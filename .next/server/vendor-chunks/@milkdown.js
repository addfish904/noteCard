"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@milkdown";
exports.ids = ["vendor-chunks/@milkdown"];
exports.modules = {

/***/ "(rsc)/./node_modules/@milkdown/theme-nord/lib/style.css":
/*!*********************************************************!*\
  !*** ./node_modules/@milkdown/theme-nord/lib/style.css ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"0483034b9480\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1pbGtkb3duL3RoZW1lLW5vcmQvbGliL3N0eWxlLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW4yL0RvY3VtZW50cy9ub3RlQ2FyZC9ub2RlX21vZHVsZXMvQG1pbGtkb3duL3RoZW1lLW5vcmQvbGliL3N0eWxlLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjA0ODMwMzRiOTQ4MFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@milkdown/theme-nord/lib/style.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/core/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@milkdown/core/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandManager: () => (/* binding */ CommandManager),\n/* harmony export */   CommandsReady: () => (/* binding */ CommandsReady),\n/* harmony export */   ConfigReady: () => (/* binding */ ConfigReady),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   EditorStateReady: () => (/* binding */ EditorStateReady),\n/* harmony export */   EditorStatus: () => (/* binding */ EditorStatus),\n/* harmony export */   EditorViewReady: () => (/* binding */ EditorViewReady),\n/* harmony export */   InitReady: () => (/* binding */ InitReady),\n/* harmony export */   ParserReady: () => (/* binding */ ParserReady),\n/* harmony export */   SchemaReady: () => (/* binding */ SchemaReady),\n/* harmony export */   SerializerReady: () => (/* binding */ SerializerReady),\n/* harmony export */   commands: () => (/* binding */ commands),\n/* harmony export */   commandsCtx: () => (/* binding */ commandsCtx),\n/* harmony export */   commandsTimerCtx: () => (/* binding */ commandsTimerCtx),\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   createCmdKey: () => (/* binding */ createCmdKey),\n/* harmony export */   defaultValueCtx: () => (/* binding */ defaultValueCtx),\n/* harmony export */   editorCtx: () => (/* binding */ editorCtx),\n/* harmony export */   editorState: () => (/* binding */ editorState),\n/* harmony export */   editorStateCtx: () => (/* binding */ editorStateCtx),\n/* harmony export */   editorStateOptionsCtx: () => (/* binding */ editorStateOptionsCtx),\n/* harmony export */   editorStateTimerCtx: () => (/* binding */ editorStateTimerCtx),\n/* harmony export */   editorView: () => (/* binding */ editorView),\n/* harmony export */   editorViewCtx: () => (/* binding */ editorViewCtx),\n/* harmony export */   editorViewOptionsCtx: () => (/* binding */ editorViewOptionsCtx),\n/* harmony export */   editorViewTimerCtx: () => (/* binding */ editorViewTimerCtx),\n/* harmony export */   getDoc: () => (/* binding */ getDoc),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   initTimerCtx: () => (/* binding */ initTimerCtx),\n/* harmony export */   inputRulesCtx: () => (/* binding */ inputRulesCtx),\n/* harmony export */   markViewCtx: () => (/* binding */ markViewCtx),\n/* harmony export */   marksCtx: () => (/* binding */ marksCtx),\n/* harmony export */   nodeViewCtx: () => (/* binding */ nodeViewCtx),\n/* harmony export */   nodesCtx: () => (/* binding */ nodesCtx),\n/* harmony export */   parser: () => (/* binding */ parser),\n/* harmony export */   parserCtx: () => (/* binding */ parserCtx),\n/* harmony export */   parserTimerCtx: () => (/* binding */ parserTimerCtx),\n/* harmony export */   prosePluginsCtx: () => (/* binding */ prosePluginsCtx),\n/* harmony export */   remarkCtx: () => (/* binding */ remarkCtx),\n/* harmony export */   remarkPluginsCtx: () => (/* binding */ remarkPluginsCtx),\n/* harmony export */   remarkStringifyOptionsCtx: () => (/* binding */ remarkStringifyOptionsCtx),\n/* harmony export */   rootAttrsCtx: () => (/* binding */ rootAttrsCtx),\n/* harmony export */   rootCtx: () => (/* binding */ rootCtx),\n/* harmony export */   rootDOMCtx: () => (/* binding */ rootDOMCtx),\n/* harmony export */   schema: () => (/* binding */ schema),\n/* harmony export */   schemaCtx: () => (/* binding */ schemaCtx),\n/* harmony export */   schemaTimerCtx: () => (/* binding */ schemaTimerCtx),\n/* harmony export */   serializer: () => (/* binding */ serializer),\n/* harmony export */   serializerCtx: () => (/* binding */ serializerCtx),\n/* harmony export */   serializerTimerCtx: () => (/* binding */ serializerTimerCtx)\n/* harmony export */ });\n/* harmony import */ var _milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @milkdown/ctx */ \"(ssr)/./node_modules/@milkdown/ctx/lib/index.js\");\n/* harmony import */ var _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @milkdown/prose/model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-stringify */ \"(ssr)/./node_modules/remark-stringify/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var _milkdown_exception__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @milkdown/exception */ \"(ssr)/./node_modules/@milkdown/exception/lib/index.js\");\n/* harmony import */ var _milkdown_transformer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @milkdown/transformer */ \"(ssr)/./node_modules/@milkdown/transformer/lib/index.js\");\n/* harmony import */ var _milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @milkdown/prose/commands */ \"(ssr)/./node_modules/prosemirror-commands/dist/index.js\");\n/* harmony import */ var _milkdown_prose__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @milkdown/prose */ \"(ssr)/./node_modules/@milkdown/prose/lib/index.js\");\n/* harmony import */ var _milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @milkdown/prose/inputrules */ \"(ssr)/./node_modules/prosemirror-inputrules/dist/index.js\");\n/* harmony import */ var _milkdown_prose_keymap__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @milkdown/prose/keymap */ \"(ssr)/./node_modules/prosemirror-keymap/dist/index.js\");\n/* harmony import */ var _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @milkdown/prose/state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var _milkdown_prose_view__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @milkdown/prose/view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _container, _ctx, _enableInspector, _status, _configureList, _onStatusChange, _container2, _clock, _usrPluginStore, _sysPluginStore, _ctx2, _loadInternal, _prepare, _cleanup, _cleanupInternal, _setStatus, _loadPluginInStore;\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction withMeta(plugin, meta) {\n  plugin.meta = {\n    package: \"@milkdown/core\",\n    group: \"System\",\n    ...meta\n  };\n  return plugin;\n}\nconst remarkHandlers = {\n  strong: (node, _, state, info) => {\n    const marker = node.marker || state.options.strong || \"*\";\n    const exit = state.enter(\"strong\");\n    const tracker = state.createTracker(info);\n    let value = tracker.move(marker + marker);\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: marker,\n        ...tracker.current()\n      })\n    );\n    value += tracker.move(marker + marker);\n    exit();\n    return value;\n  },\n  emphasis: (node, _, state, info) => {\n    const marker = node.marker || state.options.emphasis || \"*\";\n    const exit = state.enter(\"emphasis\");\n    const tracker = state.createTracker(info);\n    let value = tracker.move(marker);\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: marker,\n        ...tracker.current()\n      })\n    );\n    value += tracker.move(marker);\n    exit();\n    return value;\n  }\n};\nconst editorViewCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)({}, \"editorView\");\nconst editorStateCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)({}, \"editorState\");\nconst initTimerCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"initTimer\");\nconst editorCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)({}, \"editor\");\nconst inputRulesCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"inputRules\");\nconst prosePluginsCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"prosePlugins\");\nconst remarkPluginsCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  [],\n  \"remarkPlugins\"\n);\nconst nodeViewCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"nodeView\");\nconst markViewCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"markView\");\nconst remarkCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"]).use(remark_stringify__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n  \"remark\"\n);\nconst remarkStringifyOptionsCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  {\n    handlers: remarkHandlers\n  },\n  \"remarkStringifyOptions\"\n);\nconst ConfigReady = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createTimer)(\"ConfigReady\");\nfunction config(configure) {\n  const plugin = (ctx) => {\n    ctx.record(ConfigReady);\n    return async () => {\n      await configure(ctx);\n      ctx.done(ConfigReady);\n      return () => {\n        ctx.clearTimer(ConfigReady);\n      };\n    };\n  };\n  withMeta(plugin, {\n    displayName: \"Config\"\n  });\n  return plugin;\n}\nconst InitReady = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createTimer)(\"InitReady\");\nfunction init(editor) {\n  const plugin = (ctx) => {\n    ctx.inject(editorCtx, editor).inject(prosePluginsCtx, []).inject(remarkPluginsCtx, []).inject(inputRulesCtx, []).inject(nodeViewCtx, []).inject(markViewCtx, []).inject(remarkStringifyOptionsCtx, {\n      handlers: remarkHandlers\n    }).inject(remarkCtx, (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"]).use(remark_stringify__WEBPACK_IMPORTED_MODULE_3__[\"default\"])).inject(initTimerCtx, [ConfigReady]).record(InitReady);\n    return async () => {\n      await ctx.waitTimers(initTimerCtx);\n      const options = ctx.get(remarkStringifyOptionsCtx);\n      ctx.set(\n        remarkCtx,\n        (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"]).use(remark_stringify__WEBPACK_IMPORTED_MODULE_3__[\"default\"], options)\n      );\n      ctx.done(InitReady);\n      return () => {\n        ctx.remove(editorCtx).remove(prosePluginsCtx).remove(remarkPluginsCtx).remove(inputRulesCtx).remove(nodeViewCtx).remove(markViewCtx).remove(remarkStringifyOptionsCtx).remove(remarkCtx).remove(initTimerCtx).clearTimer(InitReady);\n      };\n    };\n  };\n  withMeta(plugin, {\n    displayName: \"Init\"\n  });\n  return plugin;\n}\nconst SchemaReady = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createTimer)(\"SchemaReady\");\nconst schemaTimerCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"schemaTimer\");\nconst schemaCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)({}, \"schema\");\nconst nodesCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"nodes\");\nconst marksCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"marks\");\nfunction extendPriority(x) {\n  var _a;\n  return {\n    ...x,\n    parseDOM: (_a = x.parseDOM) == null ? void 0 : _a.map((rule) => ({ priority: x.priority, ...rule }))\n  };\n}\nconst schema = (ctx) => {\n  ctx.inject(schemaCtx, {}).inject(nodesCtx, []).inject(marksCtx, []).inject(schemaTimerCtx, [InitReady]).record(SchemaReady);\n  return async () => {\n    await ctx.waitTimers(schemaTimerCtx);\n    const remark = ctx.get(remarkCtx);\n    const remarkPlugins = ctx.get(remarkPluginsCtx);\n    const processor = remarkPlugins.reduce(\n      (acc, plug) => acc.use(plug.plugin, plug.options),\n      remark\n    );\n    ctx.set(remarkCtx, processor);\n    const nodes = Object.fromEntries(\n      ctx.get(nodesCtx).map(([key2, x]) => [key2, extendPriority(x)])\n    );\n    const marks = Object.fromEntries(\n      ctx.get(marksCtx).map(([key2, x]) => [key2, extendPriority(x)])\n    );\n    const schema2 = new _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_4__.Schema({ nodes, marks });\n    ctx.set(schemaCtx, schema2);\n    ctx.done(SchemaReady);\n    return () => {\n      ctx.remove(schemaCtx).remove(nodesCtx).remove(marksCtx).remove(schemaTimerCtx).clearTimer(SchemaReady);\n    };\n  };\n};\nwithMeta(schema, {\n  displayName: \"Schema\"\n});\nclass CommandManager {\n  constructor() {\n    __privateAdd(this, _container);\n    __privateAdd(this, _ctx);\n    __privateSet(this, _container, new _milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.Container());\n    __privateSet(this, _ctx, null);\n    this.setCtx = (ctx) => {\n      __privateSet(this, _ctx, ctx);\n    };\n    this.chain = () => {\n      if (__privateGet(this, _ctx) == null) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.callCommandBeforeEditorView)();\n      const ctx = __privateGet(this, _ctx);\n      const commands2 = [];\n      const get = this.get;\n      const chains = {\n        run: () => {\n          const chained = (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_6__.chainCommands)(...commands2);\n          const view = ctx.get(editorViewCtx);\n          return chained(view.state, view.dispatch, view);\n        },\n        inline: (command) => {\n          commands2.push(command);\n          return chains;\n        },\n        pipe\n      };\n      function pipe(slice, payload) {\n        const cmd = get(slice);\n        commands2.push(cmd(payload));\n        return chains;\n      }\n      return chains;\n    };\n  }\n  get ctx() {\n    return __privateGet(this, _ctx);\n  }\n  /// Register a command into the manager.\n  create(meta, value) {\n    const slice = meta.create(__privateGet(this, _container).sliceMap);\n    slice.set(value);\n    return slice;\n  }\n  get(slice) {\n    return __privateGet(this, _container).get(slice).get();\n  }\n  remove(slice) {\n    return __privateGet(this, _container).remove(slice);\n  }\n  call(slice, payload) {\n    if (__privateGet(this, _ctx) == null) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.callCommandBeforeEditorView)();\n    const cmd = this.get(slice);\n    const command = cmd(payload);\n    const view = __privateGet(this, _ctx).get(editorViewCtx);\n    return command(view.state, view.dispatch, view);\n  }\n  /// Call an inline command.\n  inline(command) {\n    if (__privateGet(this, _ctx) == null) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.callCommandBeforeEditorView)();\n    const view = __privateGet(this, _ctx).get(editorViewCtx);\n    return command(view.state, view.dispatch, view);\n  }\n}\n_container = new WeakMap();\n_ctx = new WeakMap();\nfunction createCmdKey(key2 = \"cmdKey\") {\n  return (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(() => () => false, key2);\n}\nconst commandsCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(new CommandManager(), \"commands\");\nconst commandsTimerCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([SchemaReady], \"commandsTimer\");\nconst CommandsReady = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createTimer)(\"CommandsReady\");\nconst commands = (ctx) => {\n  const cmd = new CommandManager();\n  cmd.setCtx(ctx);\n  ctx.inject(commandsCtx, cmd).inject(commandsTimerCtx, [SchemaReady]).record(CommandsReady);\n  return async () => {\n    await ctx.waitTimers(commandsTimerCtx);\n    ctx.done(CommandsReady);\n    return () => {\n      ctx.remove(commandsCtx).remove(commandsTimerCtx).clearTimer(CommandsReady);\n    };\n  };\n};\nwithMeta(commands, {\n  displayName: \"Commands\"\n});\nconst ParserReady = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createTimer)(\"ParserReady\");\nconst outOfScope$1 = () => {\n  throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.ctxCallOutOfScope)();\n};\nconst parserCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(outOfScope$1, \"parser\");\nconst parserTimerCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)([], \"parserTimer\");\nconst parser = (ctx) => {\n  ctx.inject(parserCtx, outOfScope$1).inject(parserTimerCtx, [SchemaReady]).record(ParserReady);\n  return async () => {\n    await ctx.waitTimers(parserTimerCtx);\n    const remark = ctx.get(remarkCtx);\n    const schema2 = ctx.get(schemaCtx);\n    ctx.set(parserCtx, _milkdown_transformer__WEBPACK_IMPORTED_MODULE_7__.ParserState.create(schema2, remark));\n    ctx.done(ParserReady);\n    return () => {\n      ctx.remove(parserCtx).remove(parserTimerCtx).clearTimer(ParserReady);\n    };\n  };\n};\nwithMeta(parser, {\n  displayName: \"Parser\"\n});\nconst SerializerReady = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createTimer)(\"SerializerReady\");\nconst serializerTimerCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  [],\n  \"serializerTimer\"\n);\nconst outOfScope = () => {\n  throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.ctxCallOutOfScope)();\n};\nconst serializerCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  outOfScope,\n  \"serializer\"\n);\nconst serializer = (ctx) => {\n  ctx.inject(serializerCtx, outOfScope).inject(serializerTimerCtx, [SchemaReady]).record(SerializerReady);\n  return async () => {\n    await ctx.waitTimers(serializerTimerCtx);\n    const remark = ctx.get(remarkCtx);\n    const schema2 = ctx.get(schemaCtx);\n    ctx.set(serializerCtx, _milkdown_transformer__WEBPACK_IMPORTED_MODULE_7__.SerializerState.create(schema2, remark));\n    ctx.done(SerializerReady);\n    return () => {\n      ctx.remove(serializerCtx).remove(serializerTimerCtx).clearTimer(SerializerReady);\n    };\n  };\n};\nwithMeta(serializer, {\n  displayName: \"Serializer\"\n});\nconst defaultValueCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\"\", \"defaultValue\");\nconst editorStateOptionsCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  (x) => x,\n  \"stateOptions\"\n);\nconst editorStateTimerCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  [],\n  \"editorStateTimer\"\n);\nconst EditorStateReady = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createTimer)(\"EditorStateReady\");\nfunction getDoc(defaultValue, parser2, schema2) {\n  if (typeof defaultValue === \"string\") return parser2(defaultValue);\n  if (defaultValue.type === \"html\")\n    return _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_4__.DOMParser.fromSchema(schema2).parse(defaultValue.dom);\n  if (defaultValue.type === \"json\")\n    return _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_4__.Node.fromJSON(schema2, defaultValue.value);\n  throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.docTypeError)(defaultValue);\n}\nconst key$1 = new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_8__.PluginKey(\"MILKDOWN_STATE_TRACKER\");\nfunction overrideBaseKeymap(keymap2) {\n  const handleBackspace = (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_6__.chainCommands)(\n    _milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_9__.undoInputRule,\n    _milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_6__.deleteSelection,\n    _milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_6__.joinBackward,\n    _milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_6__.selectNodeBackward\n  );\n  keymap2.Backspace = handleBackspace;\n  return keymap2;\n}\nconst editorState = (ctx) => {\n  ctx.inject(defaultValueCtx, \"\").inject(editorStateCtx, {}).inject(editorStateOptionsCtx, (x) => x).inject(editorStateTimerCtx, [ParserReady, SerializerReady, CommandsReady]).record(EditorStateReady);\n  return async () => {\n    await ctx.waitTimers(editorStateTimerCtx);\n    const schema2 = ctx.get(schemaCtx);\n    const parser2 = ctx.get(parserCtx);\n    const rules = ctx.get(inputRulesCtx);\n    const optionsOverride = ctx.get(editorStateOptionsCtx);\n    const prosePlugins = ctx.get(prosePluginsCtx);\n    const defaultValue = ctx.get(defaultValueCtx);\n    const doc = getDoc(defaultValue, parser2, schema2);\n    const plugins = [\n      ...prosePlugins,\n      new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_8__.Plugin({\n        key: key$1,\n        state: {\n          init: () => {\n          },\n          apply: (_tr, _value, _oldState, newState) => {\n            ctx.set(editorStateCtx, newState);\n          }\n        }\n      }),\n      (0,_milkdown_prose__WEBPACK_IMPORTED_MODULE_10__.customInputRules)({ rules }),\n      (0,_milkdown_prose_keymap__WEBPACK_IMPORTED_MODULE_11__.keymap)(overrideBaseKeymap(_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_6__.baseKeymap))\n    ];\n    ctx.set(prosePluginsCtx, plugins);\n    const options = optionsOverride({\n      schema: schema2,\n      doc,\n      plugins\n    });\n    const state = _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_8__.EditorState.create(options);\n    ctx.set(editorStateCtx, state);\n    ctx.done(EditorStateReady);\n    return () => {\n      ctx.remove(defaultValueCtx).remove(editorStateCtx).remove(editorStateOptionsCtx).remove(editorStateTimerCtx).clearTimer(EditorStateReady);\n    };\n  };\n};\nwithMeta(editorState, {\n  displayName: \"EditorState\"\n});\nconst EditorViewReady = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createTimer)(\"EditorViewReady\");\nconst editorViewTimerCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  [],\n  \"editorViewTimer\"\n);\nconst editorViewOptionsCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  {},\n  \"editorViewOptions\"\n);\nconst rootCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(null, \"root\");\nconst rootDOMCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(null, \"rootDOM\");\nconst rootAttrsCtx = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.createSlice)(\n  {},\n  \"rootAttrs\"\n);\nfunction createViewContainer(root, ctx) {\n  const container = document.createElement(\"div\");\n  container.className = \"milkdown\";\n  root.appendChild(container);\n  ctx.set(rootDOMCtx, container);\n  const attrs = ctx.get(rootAttrsCtx);\n  Object.entries(attrs).forEach(\n    ([key2, value]) => container.setAttribute(key2, value)\n  );\n  return container;\n}\nfunction prepareViewDom(dom) {\n  dom.classList.add(\"editor\");\n  dom.setAttribute(\"role\", \"textbox\");\n}\nconst key = new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_8__.PluginKey(\"MILKDOWN_VIEW_CLEAR\");\nconst editorView = (ctx) => {\n  ctx.inject(rootCtx, document.body).inject(editorViewCtx, {}).inject(editorViewOptionsCtx, {}).inject(rootDOMCtx, null).inject(rootAttrsCtx, {}).inject(editorViewTimerCtx, [EditorStateReady]).record(EditorViewReady);\n  return async () => {\n    await ctx.wait(InitReady);\n    const root = ctx.get(rootCtx) || document.body;\n    const el = typeof root === \"string\" ? document.querySelector(root) : root;\n    ctx.update(prosePluginsCtx, (xs) => [\n      new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_8__.Plugin({\n        key,\n        view: (editorView2) => {\n          const container = el ? createViewContainer(el, ctx) : void 0;\n          const handleDOM = () => {\n            if (container && el) {\n              const editor = editorView2.dom;\n              el.replaceChild(container, editor);\n              container.appendChild(editor);\n            }\n          };\n          handleDOM();\n          return {\n            destroy: () => {\n              if (container == null ? void 0 : container.parentNode)\n                container == null ? void 0 : container.parentNode.replaceChild(editorView2.dom, container);\n              container == null ? void 0 : container.remove();\n            }\n          };\n        }\n      }),\n      ...xs\n    ]);\n    await ctx.waitTimers(editorViewTimerCtx);\n    const state = ctx.get(editorStateCtx);\n    const options = ctx.get(editorViewOptionsCtx);\n    const nodeViews = Object.fromEntries(ctx.get(nodeViewCtx));\n    const markViews = Object.fromEntries(ctx.get(markViewCtx));\n    const view = new _milkdown_prose_view__WEBPACK_IMPORTED_MODULE_12__.EditorView(el, {\n      state,\n      nodeViews,\n      markViews,\n      ...options\n    });\n    prepareViewDom(view.dom);\n    ctx.set(editorViewCtx, view);\n    ctx.done(EditorViewReady);\n    return () => {\n      view == null ? void 0 : view.destroy();\n      ctx.remove(rootCtx).remove(editorViewCtx).remove(editorViewOptionsCtx).remove(rootDOMCtx).remove(rootAttrsCtx).remove(editorViewTimerCtx).clearTimer(EditorViewReady);\n    };\n  };\n};\nwithMeta(editorView, {\n  displayName: \"EditorView\"\n});\nvar EditorStatus = /* @__PURE__ */ ((EditorStatus2) => {\n  EditorStatus2[\"Idle\"] = \"Idle\";\n  EditorStatus2[\"OnCreate\"] = \"OnCreate\";\n  EditorStatus2[\"Created\"] = \"Created\";\n  EditorStatus2[\"OnDestroy\"] = \"OnDestroy\";\n  EditorStatus2[\"Destroyed\"] = \"Destroyed\";\n  return EditorStatus2;\n})(EditorStatus || {});\nconst _Editor = class _Editor {\n  constructor() {\n    __privateAdd(this, _enableInspector);\n    __privateAdd(this, _status);\n    __privateAdd(this, _configureList);\n    __privateAdd(this, _onStatusChange);\n    __privateAdd(this, _container2);\n    __privateAdd(this, _clock);\n    __privateAdd(this, _usrPluginStore);\n    __privateAdd(this, _sysPluginStore);\n    __privateAdd(this, _ctx2);\n    __privateAdd(this, _loadInternal);\n    __privateAdd(this, _prepare);\n    __privateAdd(this, _cleanup);\n    __privateAdd(this, _cleanupInternal);\n    __privateAdd(this, _setStatus);\n    __privateAdd(this, _loadPluginInStore);\n    __privateSet(this, _enableInspector, false);\n    __privateSet(this, _status, \"Idle\");\n    __privateSet(this, _configureList, []);\n    __privateSet(this, _onStatusChange, () => void 0);\n    __privateSet(this, _container2, new _milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.Container());\n    __privateSet(this, _clock, new _milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.Clock());\n    __privateSet(this, _usrPluginStore, /* @__PURE__ */ new Map());\n    __privateSet(this, _sysPluginStore, /* @__PURE__ */ new Map());\n    __privateSet(this, _ctx2, new _milkdown_ctx__WEBPACK_IMPORTED_MODULE_0__.Ctx(__privateGet(this, _container2), __privateGet(this, _clock)));\n    __privateSet(this, _loadInternal, () => {\n      const configPlugin = config(async (ctx) => {\n        await Promise.all(__privateGet(this, _configureList).map((fn) => fn(ctx)));\n      });\n      const internalPlugins = [\n        schema,\n        parser,\n        serializer,\n        commands,\n        editorState,\n        editorView,\n        init(this),\n        configPlugin\n      ];\n      __privateGet(this, _prepare).call(this, internalPlugins, __privateGet(this, _sysPluginStore));\n    });\n    __privateSet(this, _prepare, (plugins, store) => {\n      plugins.forEach((plugin) => {\n        const ctx = __privateGet(this, _ctx2).produce(\n          __privateGet(this, _enableInspector) ? plugin.meta : void 0\n        );\n        const handler = plugin(ctx);\n        store.set(plugin, { ctx, handler, cleanup: void 0 });\n      });\n    });\n    __privateSet(this, _cleanup, (plugins, remove = false) => {\n      return Promise.all(\n        [plugins].flat().map((plugin) => {\n          const loader = __privateGet(this, _usrPluginStore).get(plugin);\n          const cleanup = loader == null ? void 0 : loader.cleanup;\n          if (remove) __privateGet(this, _usrPluginStore).delete(plugin);\n          else\n            __privateGet(this, _usrPluginStore).set(plugin, {\n              ctx: void 0,\n              handler: void 0,\n              cleanup: void 0\n            });\n          if (typeof cleanup === \"function\") return cleanup();\n          return cleanup;\n        })\n      );\n    });\n    __privateSet(this, _cleanupInternal, async () => {\n      await Promise.all(\n        [...__privateGet(this, _sysPluginStore).entries()].map(([_, { cleanup }]) => {\n          if (typeof cleanup === \"function\") return cleanup();\n          return cleanup;\n        })\n      );\n      __privateGet(this, _sysPluginStore).clear();\n    });\n    __privateSet(this, _setStatus, (status) => {\n      __privateSet(this, _status, status);\n      __privateGet(this, _onStatusChange).call(this, status);\n    });\n    __privateSet(this, _loadPluginInStore, (store) => {\n      return [...store.entries()].map(async ([key2, loader]) => {\n        const { ctx, handler } = loader;\n        if (!handler) return;\n        const cleanup = await handler();\n        store.set(key2, { ctx, handler, cleanup });\n      });\n    });\n    this.enableInspector = (enable = true) => {\n      __privateSet(this, _enableInspector, enable);\n      return this;\n    };\n    this.onStatusChange = (onChange) => {\n      __privateSet(this, _onStatusChange, onChange);\n      return this;\n    };\n    this.config = (configure) => {\n      __privateGet(this, _configureList).push(configure);\n      return this;\n    };\n    this.removeConfig = (configure) => {\n      __privateSet(this, _configureList, __privateGet(this, _configureList).filter((x) => x !== configure));\n      return this;\n    };\n    this.use = (plugins) => {\n      const _plugins = [plugins].flat();\n      _plugins.flat().forEach((plugin) => {\n        __privateGet(this, _usrPluginStore).set(plugin, {\n          ctx: void 0,\n          handler: void 0,\n          cleanup: void 0\n        });\n      });\n      if (__privateGet(this, _status) === \"Created\")\n        __privateGet(this, _prepare).call(this, _plugins, __privateGet(this, _usrPluginStore));\n      return this;\n    };\n    this.remove = async (plugins) => {\n      if (__privateGet(this, _status) === \"OnCreate\") {\n        console.warn(\n          \"[Milkdown]: You are trying to remove plugins when the editor is creating, this is not recommended, please check your code.\"\n        );\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(this.remove(plugins));\n          }, 50);\n        });\n      }\n      await __privateGet(this, _cleanup).call(this, [plugins].flat(), true);\n      return this;\n    };\n    this.create = async () => {\n      if (__privateGet(this, _status) === \"OnCreate\") return this;\n      if (__privateGet(this, _status) === \"Created\") await this.destroy();\n      __privateGet(this, _setStatus).call(this, \"OnCreate\");\n      __privateGet(this, _loadInternal).call(this);\n      __privateGet(this, _prepare).call(this, [...__privateGet(this, _usrPluginStore).keys()], __privateGet(this, _usrPluginStore));\n      await Promise.all(\n        [\n          __privateGet(this, _loadPluginInStore).call(this, __privateGet(this, _sysPluginStore)),\n          __privateGet(this, _loadPluginInStore).call(this, __privateGet(this, _usrPluginStore))\n        ].flat()\n      );\n      __privateGet(this, _setStatus).call(this, \"Created\");\n      return this;\n    };\n    this.destroy = async (clearPlugins = false) => {\n      if (__privateGet(this, _status) === \"Destroyed\" || __privateGet(this, _status) === \"OnDestroy\")\n        return this;\n      if (__privateGet(this, _status) === \"OnCreate\") {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(this.destroy(clearPlugins));\n          }, 50);\n        });\n      }\n      if (clearPlugins) __privateSet(this, _configureList, []);\n      __privateGet(this, _setStatus).call(this, \"OnDestroy\");\n      await __privateGet(this, _cleanup).call(this, [...__privateGet(this, _usrPluginStore).keys()], clearPlugins);\n      await __privateGet(this, _cleanupInternal).call(this);\n      __privateGet(this, _setStatus).call(this, \"Destroyed\");\n      return this;\n    };\n    this.action = (action) => action(__privateGet(this, _ctx2));\n    this.inspect = () => {\n      if (!__privateGet(this, _enableInspector)) {\n        console.warn(\n          \"[Milkdown]: You are trying to collect inspection when inspector is disabled, please enable inspector by `editor.enableInspector()` first.\"\n        );\n        return [];\n      }\n      return [...__privateGet(this, _sysPluginStore).values(), ...__privateGet(this, _usrPluginStore).values()].map(({ ctx }) => {\n        var _a;\n        return (_a = ctx == null ? void 0 : ctx.inspector) == null ? void 0 : _a.read();\n      }).filter((x) => Boolean(x));\n    };\n  }\n  /// Create a new editor instance.\n  static make() {\n    return new _Editor();\n  }\n  /// Get the ctx of the editor.\n  get ctx() {\n    return __privateGet(this, _ctx2);\n  }\n  /// Get the status of the editor.\n  get status() {\n    return __privateGet(this, _status);\n  }\n};\n_enableInspector = new WeakMap();\n_status = new WeakMap();\n_configureList = new WeakMap();\n_onStatusChange = new WeakMap();\n_container2 = new WeakMap();\n_clock = new WeakMap();\n_usrPluginStore = new WeakMap();\n_sysPluginStore = new WeakMap();\n_ctx2 = new WeakMap();\n_loadInternal = new WeakMap();\n_prepare = new WeakMap();\n_cleanup = new WeakMap();\n_cleanupInternal = new WeakMap();\n_setStatus = new WeakMap();\n_loadPluginInStore = new WeakMap();\nlet Editor = _Editor;\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/core/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/ctx/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@milkdown/ctx/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Clock: () => (/* binding */ Clock),\n/* harmony export */   Container: () => (/* binding */ Container),\n/* harmony export */   Ctx: () => (/* binding */ Ctx),\n/* harmony export */   Inspector: () => (/* binding */ Inspector),\n/* harmony export */   Slice: () => (/* binding */ Slice),\n/* harmony export */   SliceType: () => (/* binding */ SliceType),\n/* harmony export */   Timer: () => (/* binding */ Timer),\n/* harmony export */   TimerType: () => (/* binding */ TimerType),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createTimer: () => (/* binding */ createTimer)\n/* harmony export */ });\n/* harmony import */ var _milkdown_exception__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @milkdown/exception */ \"(ssr)/./node_modules/@milkdown/exception/lib/index.js\");\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _watchers, _value, _emit, _meta, _container, _clock, _injectedSlices, _consumedSlices, _recordedTimers, _waitTimers, _getSlice, _getTimer, _container2, _clock2, _meta2, _inspector, _promise, _listener, _eventUniqId, _status, _removeListener, _waitTimeout;\n\nclass Container {\n  constructor() {\n    this.sliceMap = /* @__PURE__ */ new Map();\n    this.get = (slice) => {\n      const context = typeof slice === \"string\" ? [...this.sliceMap.values()].find((x) => x.type.name === slice) : this.sliceMap.get(slice.id);\n      if (!context) {\n        const name = typeof slice === \"string\" ? slice : slice.name;\n        throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_0__.contextNotFound)(name);\n      }\n      return context;\n    };\n    this.remove = (slice) => {\n      const context = typeof slice === \"string\" ? [...this.sliceMap.values()].find((x) => x.type.name === slice) : this.sliceMap.get(slice.id);\n      if (!context) return;\n      this.sliceMap.delete(context.type.id);\n    };\n    this.has = (slice) => {\n      if (typeof slice === \"string\")\n        return [...this.sliceMap.values()].some((x) => x.type.name === slice);\n      return this.sliceMap.has(slice.id);\n    };\n  }\n}\nclass Slice {\n  /// @internal\n  constructor(container, value, type) {\n    __privateAdd(this, _watchers);\n    /// @internal\n    __privateAdd(this, _value);\n    __privateAdd(this, _emit);\n    __privateSet(this, _watchers, []);\n    __privateSet(this, _emit, () => {\n      __privateGet(this, _watchers).forEach((watcher) => watcher(__privateGet(this, _value)));\n    });\n    this.set = (value2) => {\n      __privateSet(this, _value, value2);\n      __privateGet(this, _emit).call(this);\n    };\n    this.get = () => __privateGet(this, _value);\n    this.update = (updater) => {\n      __privateSet(this, _value, updater(__privateGet(this, _value)));\n      __privateGet(this, _emit).call(this);\n    };\n    this.type = type;\n    __privateSet(this, _value, value);\n    container.set(type.id, this);\n  }\n  /// Add a watcher for changes in the slice.\n  /// Returns a function to remove the watcher.\n  on(watcher) {\n    __privateGet(this, _watchers).push(watcher);\n    return () => {\n      __privateSet(this, _watchers, __privateGet(this, _watchers).filter((w) => w !== watcher));\n    };\n  }\n  /// Add a one-time watcher for changes in the slice.\n  /// The watcher will be removed after it is called.\n  /// Returns a function to remove the watcher.\n  once(watcher) {\n    const off = this.on((value) => {\n      watcher(value);\n      off();\n    });\n    return off;\n  }\n  /// Remove a watcher.\n  off(watcher) {\n    __privateSet(this, _watchers, __privateGet(this, _watchers).filter((w) => w !== watcher));\n  }\n  /// Remove all watchers.\n  offAll() {\n    __privateSet(this, _watchers, []);\n  }\n}\n_watchers = new WeakMap();\n_value = new WeakMap();\n_emit = new WeakMap();\nclass SliceType {\n  /// Create a slice type with a default value and a name.\n  /// The name should be unique in the container.\n  constructor(value, name) {\n    this.id = Symbol(`Context-${name}`);\n    this.name = name;\n    this._defaultValue = value;\n    this._typeInfo = () => {\n      throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_0__.ctxCallOutOfScope)();\n    };\n  }\n  /// Create a slice with a container.\n  /// You can also pass a value to override the default value.\n  create(container, value = this._defaultValue) {\n    return new Slice(container, value, this);\n  }\n}\nconst createSlice = (value, name) => new SliceType(value, name);\nclass Inspector {\n  /// Create an inspector with container, clock and metadata.\n  constructor(container, clock, meta) {\n    /// @internal\n    __privateAdd(this, _meta);\n    /// @internal\n    __privateAdd(this, _container);\n    /// @internal\n    __privateAdd(this, _clock);\n    __privateAdd(this, _injectedSlices);\n    __privateAdd(this, _consumedSlices);\n    __privateAdd(this, _recordedTimers);\n    __privateAdd(this, _waitTimers);\n    __privateAdd(this, _getSlice);\n    __privateAdd(this, _getTimer);\n    __privateSet(this, _injectedSlices, /* @__PURE__ */ new Set());\n    __privateSet(this, _consumedSlices, /* @__PURE__ */ new Set());\n    __privateSet(this, _recordedTimers, /* @__PURE__ */ new Map());\n    __privateSet(this, _waitTimers, /* @__PURE__ */ new Map());\n    this.read = () => {\n      return {\n        metadata: __privateGet(this, _meta),\n        injectedSlices: [...__privateGet(this, _injectedSlices)].map((slice) => ({\n          name: typeof slice === \"string\" ? slice : slice.name,\n          value: __privateGet(this, _getSlice).call(this, slice)\n        })),\n        consumedSlices: [...__privateGet(this, _consumedSlices)].map((slice) => ({\n          name: typeof slice === \"string\" ? slice : slice.name,\n          value: __privateGet(this, _getSlice).call(this, slice)\n        })),\n        recordedTimers: [...__privateGet(this, _recordedTimers)].map(\n          ([timer, { duration }]) => ({\n            name: timer.name,\n            duration,\n            status: __privateGet(this, _getTimer).call(this, timer)\n          })\n        ),\n        waitTimers: [...__privateGet(this, _waitTimers)].map(([timer, { duration }]) => ({\n          name: timer.name,\n          duration,\n          status: __privateGet(this, _getTimer).call(this, timer)\n        }))\n      };\n    };\n    this.onRecord = (timerType) => {\n      __privateGet(this, _recordedTimers).set(timerType, { start: Date.now(), duration: 0 });\n    };\n    this.onClear = (timerType) => {\n      __privateGet(this, _recordedTimers).delete(timerType);\n    };\n    this.onDone = (timerType) => {\n      const timer = __privateGet(this, _recordedTimers).get(timerType);\n      if (!timer) return;\n      timer.duration = Date.now() - timer.start;\n    };\n    this.onWait = (timerType, promise) => {\n      const start = Date.now();\n      promise.finally(() => {\n        __privateGet(this, _waitTimers).set(timerType, { duration: Date.now() - start });\n      }).catch(console.error);\n    };\n    this.onInject = (sliceType) => {\n      __privateGet(this, _injectedSlices).add(sliceType);\n    };\n    this.onRemove = (sliceType) => {\n      __privateGet(this, _injectedSlices).delete(sliceType);\n    };\n    this.onUse = (sliceType) => {\n      __privateGet(this, _consumedSlices).add(sliceType);\n    };\n    __privateSet(this, _getSlice, (sliceType) => {\n      return __privateGet(this, _container).get(sliceType).get();\n    });\n    __privateSet(this, _getTimer, (timerType) => {\n      return __privateGet(this, _clock).get(timerType).status;\n    });\n    __privateSet(this, _container, container);\n    __privateSet(this, _clock, clock);\n    __privateSet(this, _meta, meta);\n  }\n}\n_meta = new WeakMap();\n_container = new WeakMap();\n_clock = new WeakMap();\n_injectedSlices = new WeakMap();\n_consumedSlices = new WeakMap();\n_recordedTimers = new WeakMap();\n_waitTimers = new WeakMap();\n_getSlice = new WeakMap();\n_getTimer = new WeakMap();\nconst _Ctx = class _Ctx {\n  /// Create a ctx object with container and clock.\n  constructor(container, clock, meta) {\n    /// @internal\n    __privateAdd(this, _container2);\n    /// @internal\n    __privateAdd(this, _clock2);\n    /// @internal\n    __privateAdd(this, _meta2);\n    /// @internal\n    __privateAdd(this, _inspector);\n    this.produce = (meta2) => {\n      if (meta2 && Object.keys(meta2).length)\n        return new _Ctx(__privateGet(this, _container2), __privateGet(this, _clock2), { ...meta2 });\n      return this;\n    };\n    this.inject = (sliceType, value) => {\n      var _a;\n      const slice = sliceType.create(__privateGet(this, _container2).sliceMap);\n      if (value != null) slice.set(value);\n      (_a = __privateGet(this, _inspector)) == null ? void 0 : _a.onInject(sliceType);\n      return this;\n    };\n    this.remove = (sliceType) => {\n      var _a;\n      __privateGet(this, _container2).remove(sliceType);\n      (_a = __privateGet(this, _inspector)) == null ? void 0 : _a.onRemove(sliceType);\n      return this;\n    };\n    this.record = (timerType) => {\n      var _a;\n      timerType.create(__privateGet(this, _clock2).store);\n      (_a = __privateGet(this, _inspector)) == null ? void 0 : _a.onRecord(timerType);\n      return this;\n    };\n    this.clearTimer = (timerType) => {\n      var _a;\n      __privateGet(this, _clock2).remove(timerType);\n      (_a = __privateGet(this, _inspector)) == null ? void 0 : _a.onClear(timerType);\n      return this;\n    };\n    this.isInjected = (sliceType) => __privateGet(this, _container2).has(sliceType);\n    this.isRecorded = (timerType) => __privateGet(this, _clock2).has(timerType);\n    this.use = (sliceType) => {\n      var _a;\n      (_a = __privateGet(this, _inspector)) == null ? void 0 : _a.onUse(sliceType);\n      return __privateGet(this, _container2).get(sliceType);\n    };\n    this.get = (sliceType) => this.use(sliceType).get();\n    this.set = (sliceType, value) => this.use(sliceType).set(value);\n    this.update = (sliceType, updater) => this.use(sliceType).update(updater);\n    this.timer = (timer) => __privateGet(this, _clock2).get(timer);\n    this.done = (timer) => {\n      var _a;\n      this.timer(timer).done();\n      (_a = __privateGet(this, _inspector)) == null ? void 0 : _a.onDone(timer);\n    };\n    this.wait = (timer) => {\n      var _a;\n      const promise = this.timer(timer).start();\n      (_a = __privateGet(this, _inspector)) == null ? void 0 : _a.onWait(timer, promise);\n      return promise;\n    };\n    this.waitTimers = async (slice) => {\n      await Promise.all(this.get(slice).map((x) => this.wait(x)));\n    };\n    __privateSet(this, _container2, container);\n    __privateSet(this, _clock2, clock);\n    __privateSet(this, _meta2, meta);\n    if (meta) __privateSet(this, _inspector, new Inspector(container, clock, meta));\n  }\n  /// Get metadata of the ctx.\n  get meta() {\n    return __privateGet(this, _meta2);\n  }\n  /// Get the inspector of the ctx.\n  get inspector() {\n    return __privateGet(this, _inspector);\n  }\n};\n_container2 = new WeakMap();\n_clock2 = new WeakMap();\n_meta2 = new WeakMap();\n_inspector = new WeakMap();\nlet Ctx = _Ctx;\nclass Clock {\n  constructor() {\n    this.store = /* @__PURE__ */ new Map();\n    this.get = (timer) => {\n      const meta = this.store.get(timer.id);\n      if (!meta) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_0__.timerNotFound)(timer.name);\n      return meta;\n    };\n    this.remove = (timer) => {\n      this.store.delete(timer.id);\n    };\n    this.has = (timer) => {\n      return this.store.has(timer.id);\n    };\n  }\n}\nclass Timer {\n  /// @internal\n  constructor(clock, type) {\n    __privateAdd(this, _promise);\n    __privateAdd(this, _listener);\n    /// @internal\n    __privateAdd(this, _eventUniqId);\n    __privateAdd(this, _status);\n    __privateAdd(this, _removeListener);\n    __privateAdd(this, _waitTimeout);\n    __privateSet(this, _promise, null);\n    __privateSet(this, _listener, null);\n    __privateSet(this, _status, \"pending\");\n    this.start = () => {\n      __privateGet(this, _promise) ?? __privateSet(this, _promise, new Promise((resolve, reject) => {\n        __privateSet(this, _listener, (e) => {\n          if (!(e instanceof CustomEvent)) return;\n          if (e.detail.id === __privateGet(this, _eventUniqId)) {\n            __privateSet(this, _status, \"resolved\");\n            __privateGet(this, _removeListener).call(this);\n            e.stopImmediatePropagation();\n            resolve();\n          }\n        });\n        __privateGet(this, _waitTimeout).call(this, () => {\n          if (__privateGet(this, _status) === \"pending\") __privateSet(this, _status, \"rejected\");\n          __privateGet(this, _removeListener).call(this);\n          reject(new Error(`Timing ${this.type.name} timeout.`));\n        });\n        __privateSet(this, _status, \"pending\");\n        addEventListener(this.type.name, __privateGet(this, _listener));\n      }));\n      return __privateGet(this, _promise);\n    };\n    this.done = () => {\n      const event = new CustomEvent(this.type.name, {\n        detail: { id: __privateGet(this, _eventUniqId) }\n      });\n      dispatchEvent(event);\n    };\n    __privateSet(this, _removeListener, () => {\n      if (__privateGet(this, _listener)) removeEventListener(this.type.name, __privateGet(this, _listener));\n    });\n    __privateSet(this, _waitTimeout, (ifTimeout) => {\n      setTimeout(() => {\n        ifTimeout();\n      }, this.type.timeout);\n    });\n    __privateSet(this, _eventUniqId, Symbol(type.name));\n    this.type = type;\n    clock.set(type.id, this);\n  }\n  /// The status of the timer.\n  /// Can be `pending`, `resolved` or `rejected`.\n  get status() {\n    return __privateGet(this, _status);\n  }\n}\n_promise = new WeakMap();\n_listener = new WeakMap();\n_eventUniqId = new WeakMap();\n_status = new WeakMap();\n_removeListener = new WeakMap();\n_waitTimeout = new WeakMap();\nclass TimerType {\n  /// Create a timer type with a name and a timeout.\n  /// The name should be unique in the clock.\n  constructor(name, timeout = 3e3) {\n    this.create = (clock) => {\n      return new Timer(clock, this);\n    };\n    this.id = Symbol(`Timer-${name}`);\n    this.name = name;\n    this.timeout = timeout;\n  }\n}\nconst createTimer = (name, timeout = 3e3) => new TimerType(name, timeout);\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/ctx/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/exception/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@milkdown/exception/lib/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callCommandBeforeEditorView: () => (/* binding */ callCommandBeforeEditorView),\n/* harmony export */   contextNotFound: () => (/* binding */ contextNotFound),\n/* harmony export */   createNodeInParserFail: () => (/* binding */ createNodeInParserFail),\n/* harmony export */   ctxCallOutOfScope: () => (/* binding */ ctxCallOutOfScope),\n/* harmony export */   ctxNotBind: () => (/* binding */ ctxNotBind),\n/* harmony export */   docTypeError: () => (/* binding */ docTypeError),\n/* harmony export */   expectDomTypeError: () => (/* binding */ expectDomTypeError),\n/* harmony export */   getAtomFromSchemaFail: () => (/* binding */ getAtomFromSchemaFail),\n/* harmony export */   missingMarkInSchema: () => (/* binding */ missingMarkInSchema),\n/* harmony export */   missingNodeInSchema: () => (/* binding */ missingNodeInSchema),\n/* harmony export */   missingRootElement: () => (/* binding */ missingRootElement),\n/* harmony export */   missingYjsDoc: () => (/* binding */ missingYjsDoc),\n/* harmony export */   parserMatchError: () => (/* binding */ parserMatchError),\n/* harmony export */   serializerMatchError: () => (/* binding */ serializerMatchError),\n/* harmony export */   stackOverFlow: () => (/* binding */ stackOverFlow),\n/* harmony export */   timerNotFound: () => (/* binding */ timerNotFound)\n/* harmony export */ });\nvar ErrorCode = /* @__PURE__ */ ((ErrorCode2) => {\n  ErrorCode2[\"docTypeError\"] = \"docTypeError\";\n  ErrorCode2[\"contextNotFound\"] = \"contextNotFound\";\n  ErrorCode2[\"timerNotFound\"] = \"timerNotFound\";\n  ErrorCode2[\"ctxCallOutOfScope\"] = \"ctxCallOutOfScope\";\n  ErrorCode2[\"createNodeInParserFail\"] = \"createNodeInParserFail\";\n  ErrorCode2[\"stackOverFlow\"] = \"stackOverFlow\";\n  ErrorCode2[\"parserMatchError\"] = \"parserMatchError\";\n  ErrorCode2[\"serializerMatchError\"] = \"serializerMatchError\";\n  ErrorCode2[\"getAtomFromSchemaFail\"] = \"getAtomFromSchemaFail\";\n  ErrorCode2[\"expectDomTypeError\"] = \"expectDomTypeError\";\n  ErrorCode2[\"callCommandBeforeEditorView\"] = \"callCommandBeforeEditorView\";\n  ErrorCode2[\"missingRootElement\"] = \"missingRootElement\";\n  ErrorCode2[\"missingNodeInSchema\"] = \"missingNodeInSchema\";\n  ErrorCode2[\"missingMarkInSchema\"] = \"missingMarkInSchema\";\n  ErrorCode2[\"ctxNotBind\"] = \"ctxNotBind\";\n  ErrorCode2[\"missingYjsDoc\"] = \"missingYjsDoc\";\n  return ErrorCode2;\n})(ErrorCode || {});\nclass MilkdownError extends Error {\n  constructor(code, message) {\n    super(message);\n    this.name = \"MilkdownError\";\n    this.code = code;\n  }\n}\nconst functionReplacer = (_, value) => typeof value === \"function\" ? \"[Function]\" : value;\nconst stringify = (x) => JSON.stringify(x, functionReplacer);\nfunction docTypeError(type) {\n  return new MilkdownError(\n    ErrorCode.docTypeError,\n    `Doc type error, unsupported type: ${stringify(type)}`\n  );\n}\nfunction contextNotFound(name) {\n  return new MilkdownError(\n    ErrorCode.contextNotFound,\n    `Context \"${name}\" not found, do you forget to inject it?`\n  );\n}\nfunction timerNotFound(name) {\n  return new MilkdownError(\n    ErrorCode.timerNotFound,\n    `Timer \"${name}\" not found, do you forget to record it?`\n  );\n}\nfunction ctxCallOutOfScope() {\n  return new MilkdownError(\n    ErrorCode.ctxCallOutOfScope,\n    \"Should not call a context out of the plugin.\"\n  );\n}\nfunction createNodeInParserFail(nodeType, attrs, content) {\n  const nodeTypeName = \"name\" in nodeType ? nodeType.name : nodeType;\n  const heading = `Cannot create node for ${nodeTypeName}`;\n  const serialize = (x) => {\n    if (x == null) return \"null\";\n    if (Array.isArray(x)) {\n      return `[${x.map(serialize).join(\", \")}]`;\n    }\n    if (typeof x === \"object\") {\n      if (\"toJSON\" in x && typeof x.toJSON === \"function\") {\n        return JSON.stringify(x.toJSON());\n      }\n      if (\"spec\" in x) {\n        return JSON.stringify(x.spec);\n      }\n      return JSON.stringify(x);\n    }\n    if (typeof x === \"string\" || typeof x === \"number\" || typeof x === \"boolean\") {\n      return JSON.stringify(x);\n    }\n    if (typeof x === \"function\") {\n      return `[Function: ${x.name || \"anonymous\"}]`;\n    }\n    try {\n      return String(x);\n    } catch {\n      return \"[Unserializable]\";\n    }\n  };\n  const headingMessage = [\"[Description]\", heading];\n  const attrsMessage = [\"[Attributes]\", attrs];\n  const contentMessage = [\n    \"[Content]\",\n    (content ?? []).map((node) => {\n      if (!node) return \"null\";\n      if (typeof node === \"object\" && \"type\" in node) {\n        return `${node}`;\n      }\n      return serialize(node);\n    })\n  ];\n  const messages = [headingMessage, attrsMessage, contentMessage].reduce(\n    (acc, [title, value]) => {\n      const message = `${title}: ${serialize(value)}.`;\n      return acc.concat(message);\n    },\n    []\n  );\n  return new MilkdownError(\n    ErrorCode.createNodeInParserFail,\n    messages.join(\"\\n\")\n  );\n}\nfunction stackOverFlow() {\n  return new MilkdownError(\n    ErrorCode.stackOverFlow,\n    \"Stack over flow, cannot pop on an empty stack.\"\n  );\n}\nfunction parserMatchError(node) {\n  return new MilkdownError(\n    ErrorCode.parserMatchError,\n    `Cannot match target parser for node: ${stringify(node)}.`\n  );\n}\nfunction serializerMatchError(node) {\n  return new MilkdownError(\n    ErrorCode.serializerMatchError,\n    `Cannot match target serializer for node: ${stringify(node)}.`\n  );\n}\nfunction getAtomFromSchemaFail(type, name) {\n  return new MilkdownError(\n    ErrorCode.getAtomFromSchemaFail,\n    `Cannot get ${type}: ${name} from schema.`\n  );\n}\nfunction expectDomTypeError(node) {\n  return new MilkdownError(\n    ErrorCode.expectDomTypeError,\n    `Expect to be a dom, but get: ${stringify(node)}.`\n  );\n}\nfunction callCommandBeforeEditorView() {\n  return new MilkdownError(\n    ErrorCode.callCommandBeforeEditorView,\n    \"You're trying to call a command before editor view initialized, make sure to get commandManager from ctx after editor view has been initialized\"\n  );\n}\nfunction missingRootElement() {\n  return new MilkdownError(\n    ErrorCode.missingRootElement,\n    \"Missing root element, milkdown cannot find root element of the editor.\"\n  );\n}\nfunction missingNodeInSchema(name) {\n  return new MilkdownError(\n    ErrorCode.missingNodeInSchema,\n    `Missing node in schema, milkdown cannot find \"${name}\" in schema.`\n  );\n}\nfunction missingMarkInSchema(name) {\n  return new MilkdownError(\n    ErrorCode.missingMarkInSchema,\n    `Missing mark in schema, milkdown cannot find \"${name}\" in schema.`\n  );\n}\nfunction ctxNotBind() {\n  return new MilkdownError(\n    ErrorCode.ctxNotBind,\n    \"Context not bind, please make sure the plugin has been initialized.\"\n  );\n}\nfunction missingYjsDoc() {\n  return new MilkdownError(\n    ErrorCode.missingYjsDoc,\n    \"Missing yjs doc, please make sure you have bind one.\"\n  );\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/exception/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/preset-commonmark/lib/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@milkdown/preset-commonmark/lib/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockquoteAttr: () => (/* binding */ blockquoteAttr),\n/* harmony export */   blockquoteKeymap: () => (/* binding */ blockquoteKeymap),\n/* harmony export */   blockquoteSchema: () => (/* binding */ blockquoteSchema),\n/* harmony export */   bulletListAttr: () => (/* binding */ bulletListAttr),\n/* harmony export */   bulletListKeymap: () => (/* binding */ bulletListKeymap),\n/* harmony export */   bulletListSchema: () => (/* binding */ bulletListSchema),\n/* harmony export */   codeBlockAttr: () => (/* binding */ codeBlockAttr),\n/* harmony export */   codeBlockKeymap: () => (/* binding */ codeBlockKeymap),\n/* harmony export */   codeBlockSchema: () => (/* binding */ codeBlockSchema),\n/* harmony export */   commands: () => (/* binding */ commands),\n/* harmony export */   commonmark: () => (/* binding */ commonmark),\n/* harmony export */   createCodeBlockCommand: () => (/* binding */ createCodeBlockCommand),\n/* harmony export */   createCodeBlockInputRule: () => (/* binding */ createCodeBlockInputRule),\n/* harmony export */   docSchema: () => (/* binding */ docSchema),\n/* harmony export */   downgradeHeadingCommand: () => (/* binding */ downgradeHeadingCommand),\n/* harmony export */   emphasisAttr: () => (/* binding */ emphasisAttr),\n/* harmony export */   emphasisKeymap: () => (/* binding */ emphasisKeymap),\n/* harmony export */   emphasisSchema: () => (/* binding */ emphasisSchema),\n/* harmony export */   emphasisStarInputRule: () => (/* binding */ emphasisStarInputRule),\n/* harmony export */   emphasisUnderscoreInputRule: () => (/* binding */ emphasisUnderscoreInputRule),\n/* harmony export */   hardbreakAttr: () => (/* binding */ hardbreakAttr),\n/* harmony export */   hardbreakClearMarkPlugin: () => (/* binding */ hardbreakClearMarkPlugin),\n/* harmony export */   hardbreakFilterNodes: () => (/* binding */ hardbreakFilterNodes),\n/* harmony export */   hardbreakFilterPlugin: () => (/* binding */ hardbreakFilterPlugin),\n/* harmony export */   hardbreakKeymap: () => (/* binding */ hardbreakKeymap),\n/* harmony export */   hardbreakSchema: () => (/* binding */ hardbreakSchema),\n/* harmony export */   headingAttr: () => (/* binding */ headingAttr),\n/* harmony export */   headingIdGenerator: () => (/* binding */ headingIdGenerator),\n/* harmony export */   headingKeymap: () => (/* binding */ headingKeymap),\n/* harmony export */   headingSchema: () => (/* binding */ headingSchema),\n/* harmony export */   hrAttr: () => (/* binding */ hrAttr),\n/* harmony export */   hrSchema: () => (/* binding */ hrSchema),\n/* harmony export */   htmlAttr: () => (/* binding */ htmlAttr),\n/* harmony export */   htmlSchema: () => (/* binding */ htmlSchema),\n/* harmony export */   imageAttr: () => (/* binding */ imageAttr),\n/* harmony export */   imageSchema: () => (/* binding */ imageSchema),\n/* harmony export */   inlineCodeAttr: () => (/* binding */ inlineCodeAttr),\n/* harmony export */   inlineCodeInputRule: () => (/* binding */ inlineCodeInputRule),\n/* harmony export */   inlineCodeKeymap: () => (/* binding */ inlineCodeKeymap),\n/* harmony export */   inlineCodeSchema: () => (/* binding */ inlineCodeSchema),\n/* harmony export */   inlineNodesCursorPlugin: () => (/* binding */ inlineNodesCursorPlugin),\n/* harmony export */   inputRules: () => (/* binding */ inputRules),\n/* harmony export */   insertHardbreakCommand: () => (/* binding */ insertHardbreakCommand),\n/* harmony export */   insertHrCommand: () => (/* binding */ insertHrCommand),\n/* harmony export */   insertHrInputRule: () => (/* binding */ insertHrInputRule),\n/* harmony export */   insertImageCommand: () => (/* binding */ insertImageCommand),\n/* harmony export */   insertImageInputRule: () => (/* binding */ insertImageInputRule),\n/* harmony export */   keymap: () => (/* binding */ keymap),\n/* harmony export */   liftFirstListItemCommand: () => (/* binding */ liftFirstListItemCommand),\n/* harmony export */   liftListItemCommand: () => (/* binding */ liftListItemCommand),\n/* harmony export */   linkAttr: () => (/* binding */ linkAttr),\n/* harmony export */   linkSchema: () => (/* binding */ linkSchema),\n/* harmony export */   listItemAttr: () => (/* binding */ listItemAttr),\n/* harmony export */   listItemKeymap: () => (/* binding */ listItemKeymap),\n/* harmony export */   listItemSchema: () => (/* binding */ listItemSchema),\n/* harmony export */   markInputRules: () => (/* binding */ markInputRules),\n/* harmony export */   orderedListAttr: () => (/* binding */ orderedListAttr),\n/* harmony export */   orderedListKeymap: () => (/* binding */ orderedListKeymap),\n/* harmony export */   orderedListSchema: () => (/* binding */ orderedListSchema),\n/* harmony export */   paragraphAttr: () => (/* binding */ paragraphAttr),\n/* harmony export */   paragraphKeymap: () => (/* binding */ paragraphKeymap),\n/* harmony export */   paragraphSchema: () => (/* binding */ paragraphSchema),\n/* harmony export */   plugins: () => (/* binding */ plugins),\n/* harmony export */   remarkAddOrderInListPlugin: () => (/* binding */ remarkAddOrderInListPlugin),\n/* harmony export */   remarkHtmlTransformer: () => (/* binding */ remarkHtmlTransformer),\n/* harmony export */   remarkInlineLinkPlugin: () => (/* binding */ remarkInlineLinkPlugin),\n/* harmony export */   remarkLineBreak: () => (/* binding */ remarkLineBreak),\n/* harmony export */   remarkMarker: () => (/* binding */ remarkMarker),\n/* harmony export */   remarkPreserveEmptyLinePlugin: () => (/* binding */ remarkPreserveEmptyLinePlugin),\n/* harmony export */   schema: () => (/* binding */ schema),\n/* harmony export */   sinkListItemCommand: () => (/* binding */ sinkListItemCommand),\n/* harmony export */   splitListItemCommand: () => (/* binding */ splitListItemCommand),\n/* harmony export */   strongAttr: () => (/* binding */ strongAttr),\n/* harmony export */   strongInputRule: () => (/* binding */ strongInputRule),\n/* harmony export */   strongKeymap: () => (/* binding */ strongKeymap),\n/* harmony export */   strongSchema: () => (/* binding */ strongSchema),\n/* harmony export */   syncHeadingIdPlugin: () => (/* binding */ syncHeadingIdPlugin),\n/* harmony export */   syncListOrderPlugin: () => (/* binding */ syncListOrderPlugin),\n/* harmony export */   textSchema: () => (/* binding */ textSchema),\n/* harmony export */   toggleEmphasisCommand: () => (/* binding */ toggleEmphasisCommand),\n/* harmony export */   toggleInlineCodeCommand: () => (/* binding */ toggleInlineCodeCommand),\n/* harmony export */   toggleLinkCommand: () => (/* binding */ toggleLinkCommand),\n/* harmony export */   toggleStrongCommand: () => (/* binding */ toggleStrongCommand),\n/* harmony export */   turnIntoTextCommand: () => (/* binding */ turnIntoTextCommand),\n/* harmony export */   updateCodeBlockLanguageCommand: () => (/* binding */ updateCodeBlockLanguageCommand),\n/* harmony export */   updateImageCommand: () => (/* binding */ updateImageCommand),\n/* harmony export */   updateLinkCommand: () => (/* binding */ updateLinkCommand),\n/* harmony export */   wrapInBlockquoteCommand: () => (/* binding */ wrapInBlockquoteCommand),\n/* harmony export */   wrapInBlockquoteInputRule: () => (/* binding */ wrapInBlockquoteInputRule),\n/* harmony export */   wrapInBulletListCommand: () => (/* binding */ wrapInBulletListCommand),\n/* harmony export */   wrapInBulletListInputRule: () => (/* binding */ wrapInBulletListInputRule),\n/* harmony export */   wrapInHeadingCommand: () => (/* binding */ wrapInHeadingCommand),\n/* harmony export */   wrapInHeadingInputRule: () => (/* binding */ wrapInHeadingInputRule),\n/* harmony export */   wrapInOrderedListCommand: () => (/* binding */ wrapInOrderedListCommand),\n/* harmony export */   wrapInOrderedListInputRule: () => (/* binding */ wrapInOrderedListInputRule)\n/* harmony export */ });\n/* harmony import */ var _milkdown_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @milkdown/utils */ \"(ssr)/./node_modules/@milkdown/utils/lib/index.js\");\n/* harmony import */ var _milkdown_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @milkdown/core */ \"(ssr)/./node_modules/@milkdown/core/lib/index.js\");\n/* harmony import */ var _milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @milkdown/prose/commands */ \"(ssr)/./node_modules/prosemirror-commands/dist/index.js\");\n/* harmony import */ var unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! unist-util-visit-parents */ \"(ssr)/./node_modules/unist-util-visit-parents/lib/index.js\");\n/* harmony import */ var _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @milkdown/prose/model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var _milkdown_exception__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @milkdown/exception */ \"(ssr)/./node_modules/@milkdown/exception/lib/index.js\");\n/* harmony import */ var _milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @milkdown/prose/inputrules */ \"(ssr)/./node_modules/prosemirror-inputrules/dist/index.js\");\n/* harmony import */ var _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @milkdown/prose/state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var _milkdown_prose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @milkdown/prose */ \"(ssr)/./node_modules/@milkdown/prose/lib/index.js\");\n/* harmony import */ var _milkdown_prose_schema_list__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @milkdown/prose/schema-list */ \"(ssr)/./node_modules/prosemirror-schema-list/dist/index.js\");\n/* harmony import */ var _milkdown_prose_transform__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @milkdown/prose/transform */ \"(ssr)/./node_modules/prosemirror-transform/dist/index.js\");\n/* harmony import */ var _milkdown_prose_view__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @milkdown/prose/view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var remark_inline_links__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! remark-inline-links */ \"(ssr)/./node_modules/remark-inline-links/lib/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction serializeText(state, node) {\n  var _a;\n  const lastIsHardBreak = node.childCount >= 1 && ((_a = node.lastChild) == null ? void 0 : _a.type.name) === \"hardbreak\";\n  if (!lastIsHardBreak) {\n    state.next(node.content);\n    return;\n  }\n  const contentArr = [];\n  node.content.forEach((n, _, i) => {\n    if (i === node.childCount - 1) return;\n    contentArr.push(n);\n  });\n  state.next(_milkdown_prose_model__WEBPACK_IMPORTED_MODULE_0__.Fragment.fromArray(contentArr));\n}\nfunction withMeta(plugin, meta) {\n  Object.assign(plugin, {\n    meta: {\n      package: \"@milkdown/preset-commonmark\",\n      ...meta\n    }\n  });\n  return plugin;\n}\nconst emphasisAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$markAttr)(\"emphasis\");\nwithMeta(emphasisAttr, {\n  displayName: \"Attr<emphasis>\",\n  group: \"Emphasis\"\n});\nconst emphasisSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$markSchema)(\"emphasis\", (ctx) => ({\n  attrs: {\n    marker: {\n      default: ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.remarkStringifyOptionsCtx).emphasis || \"*\",\n      validate: \"string\"\n    }\n  },\n  parseDOM: [\n    { tag: \"i\" },\n    { tag: \"em\" },\n    { style: \"font-style\", getAttrs: (value) => value === \"italic\" }\n  ],\n  toDOM: (mark) => [\"em\", ctx.get(emphasisAttr.key)(mark)],\n  parseMarkdown: {\n    match: (node) => node.type === \"emphasis\",\n    runner: (state, node, markType) => {\n      state.openMark(markType, { marker: node.marker });\n      state.next(node.children);\n      state.closeMark(markType);\n    }\n  },\n  toMarkdown: {\n    match: (mark) => mark.type.name === \"emphasis\",\n    runner: (state, mark) => {\n      state.withMark(mark, \"emphasis\", void 0, {\n        marker: mark.attrs.marker\n      });\n    }\n  }\n}));\nwithMeta(emphasisSchema.mark, {\n  displayName: \"MarkSchema<emphasis>\",\n  group: \"Emphasis\"\n});\nwithMeta(emphasisSchema.ctx, {\n  displayName: \"MarkSchemaCtx<emphasis>\",\n  group: \"Emphasis\"\n});\nconst toggleEmphasisCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\"ToggleEmphasis\", (ctx) => () => {\n  return (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.toggleMark)(emphasisSchema.type(ctx));\n});\nwithMeta(toggleEmphasisCommand, {\n  displayName: \"Command<toggleEmphasisCommand>\",\n  group: \"Emphasis\"\n});\nconst emphasisStarInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)((ctx) => {\n  return (0,_milkdown_prose__WEBPACK_IMPORTED_MODULE_4__.markRule)(/(?:^|[^*])\\*([^*]+)\\*$/, emphasisSchema.type(ctx), {\n    getAttr: () => ({\n      marker: \"*\"\n    }),\n    updateCaptured: ({ fullMatch, start }) => !fullMatch.startsWith(\"*\") ? { fullMatch: fullMatch.slice(1), start: start + 1 } : {}\n  });\n});\nwithMeta(emphasisStarInputRule, {\n  displayName: \"InputRule<emphasis>|Star\",\n  group: \"Emphasis\"\n});\nconst emphasisUnderscoreInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)((ctx) => {\n  return (0,_milkdown_prose__WEBPACK_IMPORTED_MODULE_4__.markRule)(/(?:^|[^_])_([^_]+)_$/, emphasisSchema.type(ctx), {\n    getAttr: () => ({\n      marker: \"_\"\n    }),\n    updateCaptured: ({ fullMatch, start }) => !fullMatch.startsWith(\"_\") ? { fullMatch: fullMatch.slice(1), start: start + 1 } : {}\n  });\n});\nwithMeta(emphasisUnderscoreInputRule, {\n  displayName: \"InputRule<emphasis>|Underscore\",\n  group: \"Emphasis\"\n});\nconst emphasisKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"emphasisKeymap\", {\n  ToggleEmphasis: {\n    shortcuts: \"Mod-i\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(toggleEmphasisCommand.key);\n    }\n  }\n});\nwithMeta(emphasisKeymap.ctx, {\n  displayName: \"KeymapCtx<emphasis>\",\n  group: \"Emphasis\"\n});\nwithMeta(emphasisKeymap.shortcuts, {\n  displayName: \"Keymap<emphasis>\",\n  group: \"Emphasis\"\n});\nconst strongAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$markAttr)(\"strong\");\nwithMeta(strongAttr, {\n  displayName: \"Attr<strong>\",\n  group: \"Strong\"\n});\nconst strongSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$markSchema)(\"strong\", (ctx) => ({\n  attrs: {\n    marker: {\n      default: ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.remarkStringifyOptionsCtx).strong || \"*\",\n      validate: \"string\"\n    }\n  },\n  parseDOM: [\n    // This works around a Google Docs misbehavior where\n    // pasted content will be inexplicably wrapped in `<b>`\n    // tags with a font-weight normal.\n    {\n      tag: \"b\",\n      getAttrs: (node) => node.style.fontWeight != \"normal\" && null\n    },\n    { tag: \"strong\" },\n    { style: \"font-style\", getAttrs: (value) => value === \"bold\" },\n    { style: \"font-weight=400\", clearMark: (m) => m.type.name == \"strong\" },\n    {\n      style: \"font-weight\",\n      getAttrs: (value) => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n    }\n  ],\n  toDOM: (mark) => [\"strong\", ctx.get(strongAttr.key)(mark)],\n  parseMarkdown: {\n    match: (node) => node.type === \"strong\",\n    runner: (state, node, markType) => {\n      state.openMark(markType, { marker: node.marker });\n      state.next(node.children);\n      state.closeMark(markType);\n    }\n  },\n  toMarkdown: {\n    match: (mark) => mark.type.name === \"strong\",\n    runner: (state, mark) => {\n      state.withMark(mark, \"strong\", void 0, {\n        marker: mark.attrs.marker\n      });\n    }\n  }\n}));\nwithMeta(strongSchema.mark, {\n  displayName: \"MarkSchema<strong>\",\n  group: \"Strong\"\n});\nwithMeta(strongSchema.ctx, {\n  displayName: \"MarkSchemaCtx<strong>\",\n  group: \"Strong\"\n});\nconst toggleStrongCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\"ToggleStrong\", (ctx) => () => {\n  return (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.toggleMark)(strongSchema.type(ctx));\n});\nwithMeta(toggleStrongCommand, {\n  displayName: \"Command<toggleStrongCommand>\",\n  group: \"Strong\"\n});\nconst strongInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)((ctx) => {\n  return (0,_milkdown_prose__WEBPACK_IMPORTED_MODULE_4__.markRule)(/(?:\\*\\*|__)([^*_]+)(?:\\*\\*|__)$/, strongSchema.type(ctx), {\n    getAttr: (match) => {\n      return {\n        marker: match[0].startsWith(\"*\") ? \"*\" : \"_\"\n      };\n    }\n  });\n});\nwithMeta(strongInputRule, {\n  displayName: \"InputRule<strong>\",\n  group: \"Strong\"\n});\nconst strongKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"strongKeymap\", {\n  ToggleBold: {\n    shortcuts: [\"Mod-b\"],\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(toggleStrongCommand.key);\n    }\n  }\n});\nwithMeta(strongKeymap.ctx, {\n  displayName: \"KeymapCtx<strong>\",\n  group: \"Strong\"\n});\nwithMeta(strongKeymap.shortcuts, {\n  displayName: \"Keymap<strong>\",\n  group: \"Strong\"\n});\nconst inlineCodeAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$markAttr)(\"inlineCode\");\nwithMeta(inlineCodeAttr, {\n  displayName: \"Attr<inlineCode>\",\n  group: \"InlineCode\"\n});\nconst inlineCodeSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$markSchema)(\"inlineCode\", (ctx) => ({\n  priority: 100,\n  code: true,\n  parseDOM: [{ tag: \"code\" }],\n  toDOM: (mark) => [\"code\", ctx.get(inlineCodeAttr.key)(mark)],\n  parseMarkdown: {\n    match: (node) => node.type === \"inlineCode\",\n    runner: (state, node, markType) => {\n      state.openMark(markType);\n      state.addText(node.value);\n      state.closeMark(markType);\n    }\n  },\n  toMarkdown: {\n    match: (mark) => mark.type.name === \"inlineCode\",\n    runner: (state, mark, node) => {\n      state.withMark(mark, \"inlineCode\", node.text || \"\");\n    }\n  }\n}));\nwithMeta(inlineCodeSchema.mark, {\n  displayName: \"MarkSchema<inlineCode>\",\n  group: \"InlineCode\"\n});\nwithMeta(inlineCodeSchema.ctx, {\n  displayName: \"MarkSchemaCtx<inlineCode>\",\n  group: \"InlineCode\"\n});\nconst toggleInlineCodeCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"ToggleInlineCode\",\n  (ctx) => () => (state, dispatch) => {\n    const { selection, tr } = state;\n    if (selection.empty) return false;\n    const { from, to } = selection;\n    const has = state.doc.rangeHasMark(from, to, inlineCodeSchema.type(ctx));\n    if (has) {\n      dispatch == null ? void 0 : dispatch(tr.removeMark(from, to, inlineCodeSchema.type(ctx)));\n      return true;\n    }\n    const restMarksName = Object.keys(state.schema.marks).filter(\n      (x) => x !== inlineCodeSchema.type.name\n    );\n    restMarksName.map((name) => state.schema.marks[name]).forEach((t) => {\n      tr.removeMark(from, to, t);\n    });\n    dispatch == null ? void 0 : dispatch(tr.addMark(from, to, inlineCodeSchema.type(ctx).create()));\n    return true;\n  }\n);\nwithMeta(toggleInlineCodeCommand, {\n  displayName: \"Command<toggleInlineCodeCommand>\",\n  group: \"InlineCode\"\n});\nconst inlineCodeInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)((ctx) => {\n  return (0,_milkdown_prose__WEBPACK_IMPORTED_MODULE_4__.markRule)(/(?:`)([^`]+)(?:`)$/, inlineCodeSchema.type(ctx));\n});\nwithMeta(inlineCodeInputRule, {\n  displayName: \"InputRule<inlineCodeInputRule>\",\n  group: \"InlineCode\"\n});\nconst inlineCodeKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"inlineCodeKeymap\", {\n  ToggleInlineCode: {\n    shortcuts: \"Mod-e\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(toggleInlineCodeCommand.key);\n    }\n  }\n});\nwithMeta(inlineCodeKeymap.ctx, {\n  displayName: \"KeymapCtx<inlineCode>\",\n  group: \"InlineCode\"\n});\nwithMeta(inlineCodeKeymap.shortcuts, {\n  displayName: \"Keymap<inlineCode>\",\n  group: \"InlineCode\"\n});\nconst linkAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$markAttr)(\"link\");\nwithMeta(linkAttr, {\n  displayName: \"Attr<link>\",\n  group: \"Link\"\n});\nconst linkSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$markSchema)(\"link\", (ctx) => ({\n  attrs: {\n    href: { validate: \"string\" },\n    title: { default: null, validate: \"string|null\" }\n  },\n  parseDOM: [\n    {\n      tag: \"a[href]\",\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement)) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.expectDomTypeError)(dom);\n        return {\n          href: dom.getAttribute(\"href\"),\n          title: dom.getAttribute(\"title\")\n        };\n      }\n    }\n  ],\n  toDOM: (mark) => [\"a\", { ...ctx.get(linkAttr.key)(mark), ...mark.attrs }],\n  parseMarkdown: {\n    match: (node) => node.type === \"link\",\n    runner: (state, node, markType) => {\n      const url = node.url;\n      const title = node.title;\n      state.openMark(markType, { href: url, title });\n      state.next(node.children);\n      state.closeMark(markType);\n    }\n  },\n  toMarkdown: {\n    match: (mark) => mark.type.name === \"link\",\n    runner: (state, mark) => {\n      state.withMark(mark, \"link\", void 0, {\n        title: mark.attrs.title,\n        url: mark.attrs.href\n      });\n    }\n  }\n}));\nwithMeta(linkSchema.mark, {\n  displayName: \"MarkSchema<link>\",\n  group: \"Link\"\n});\nconst toggleLinkCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"ToggleLink\",\n  (ctx) => (payload = {}) => (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.toggleMark)(linkSchema.type(ctx), payload)\n);\nwithMeta(toggleLinkCommand, {\n  displayName: \"Command<toggleLinkCommand>\",\n  group: \"Link\"\n});\nconst updateLinkCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"UpdateLink\",\n  (ctx) => (payload = {}) => (state, dispatch) => {\n    if (!dispatch) return false;\n    let node;\n    let pos = -1;\n    const { selection } = state;\n    const { from, to } = selection;\n    state.doc.nodesBetween(from, from === to ? to + 1 : to, (n, p) => {\n      if (linkSchema.type(ctx).isInSet(n.marks)) {\n        node = n;\n        pos = p;\n        return false;\n      }\n      return void 0;\n    });\n    if (!node) return false;\n    const mark = node.marks.find(({ type }) => type === linkSchema.type(ctx));\n    if (!mark) return false;\n    const start = pos;\n    const end = pos + node.nodeSize;\n    const { tr } = state;\n    const linkMark = linkSchema.type(ctx).create({ ...mark.attrs, ...payload });\n    if (!linkMark) return false;\n    dispatch(\n      tr.removeMark(start, end, mark).addMark(start, end, linkMark).setSelection(new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.TextSelection(tr.selection.$anchor)).scrollIntoView()\n    );\n    return true;\n  }\n);\nwithMeta(updateLinkCommand, {\n  displayName: \"Command<updateLinkCommand>\",\n  group: \"Link\"\n});\nconst docSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$node)(\"doc\", () => ({\n  content: \"block+\",\n  parseMarkdown: {\n    match: ({ type }) => type === \"root\",\n    runner: (state, node, type) => {\n      state.injectRoot(node, type);\n    }\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === \"doc\",\n    runner: (state, node) => {\n      state.openNode(\"root\");\n      state.next(node.content);\n    }\n  }\n}));\nwithMeta(docSchema, {\n  displayName: \"NodeSchema<doc>\",\n  group: \"Doc\"\n});\nfunction visitEmptyLine(ast) {\n  return (0,unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_7__.visitParents)(\n    ast,\n    (node) => {\n      var _a;\n      return node.type === \"html\" && [\"<br />\", \"<br>\", \"<br >\", \"<br/>\"].includes(\n        (_a = node.value) == null ? void 0 : _a.trim()\n      );\n    },\n    (node, parents) => {\n      if (!parents.length) return;\n      const parent = parents[parents.length - 1];\n      if (!parent) return;\n      const index = parent.children.indexOf(node);\n      if (index === -1) return;\n      parent.children.splice(index, 1);\n    },\n    true\n  );\n}\nconst remarkPreserveEmptyLinePlugin = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$remark)(\n  \"remark-preserve-empty-line\",\n  () => () => visitEmptyLine\n);\nwithMeta(remarkPreserveEmptyLinePlugin.plugin, {\n  displayName: \"Remark<remarkPreserveEmptyLine>\",\n  group: \"Remark\"\n});\nwithMeta(remarkPreserveEmptyLinePlugin.options, {\n  displayName: \"RemarkConfig<remarkPreserveEmptyLine>\",\n  group: \"Remark\"\n});\nconst paragraphAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"paragraph\");\nwithMeta(paragraphAttr, {\n  displayName: \"Attr<paragraph>\",\n  group: \"Paragraph\"\n});\nconst paragraphSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"paragraph\", (ctx) => ({\n  content: \"inline*\",\n  group: \"block\",\n  parseDOM: [{ tag: \"p\" }],\n  toDOM: (node) => [\"p\", ctx.get(paragraphAttr.key)(node), 0],\n  parseMarkdown: {\n    match: (node) => node.type === \"paragraph\",\n    runner: (state, node, type) => {\n      state.openNode(type);\n      if (node.children) state.next(node.children);\n      else state.addText(node.value || \"\");\n      state.closeNode();\n    }\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === \"paragraph\",\n    runner: (state, node) => {\n      var _a;\n      const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n      const lastNode = (_a = view.state) == null ? void 0 : _a.doc.lastChild;\n      state.openNode(\"paragraph\");\n      if ((!node.content || node.content.size === 0) && node !== lastNode && shouldPreserveEmptyLine(ctx)) {\n        state.addNode(\"html\", void 0, \"<br />\");\n      } else {\n        serializeText(state, node);\n      }\n      state.closeNode();\n    }\n  }\n}));\nfunction shouldPreserveEmptyLine(ctx) {\n  let shouldPreserveEmptyLine2 = false;\n  try {\n    ctx.get(remarkPreserveEmptyLinePlugin.id);\n    shouldPreserveEmptyLine2 = true;\n  } catch {\n    shouldPreserveEmptyLine2 = false;\n  }\n  return shouldPreserveEmptyLine2;\n}\nwithMeta(paragraphSchema.node, {\n  displayName: \"NodeSchema<paragraph>\",\n  group: \"Paragraph\"\n});\nwithMeta(paragraphSchema.ctx, {\n  displayName: \"NodeSchemaCtx<paragraph>\",\n  group: \"Paragraph\"\n});\nconst turnIntoTextCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"TurnIntoText\",\n  (ctx) => () => (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.setBlockType)(paragraphSchema.type(ctx))\n);\nwithMeta(turnIntoTextCommand, {\n  displayName: \"Command<turnIntoTextCommand>\",\n  group: \"Paragraph\"\n});\nconst paragraphKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"paragraphKeymap\", {\n  TurnIntoText: {\n    shortcuts: \"Mod-Alt-0\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(turnIntoTextCommand.key);\n    }\n  }\n});\nwithMeta(paragraphKeymap.ctx, {\n  displayName: \"KeymapCtx<paragraph>\",\n  group: \"Paragraph\"\n});\nwithMeta(paragraphKeymap.shortcuts, {\n  displayName: \"Keymap<paragraph>\",\n  group: \"Paragraph\"\n});\nconst headingIndex = Array(6).fill(0).map((_, i) => i + 1);\nfunction defaultHeadingIdGenerator(node) {\n  return node.textContent.toLowerCase().trim().replace(/[^\\w\\s-]/g, \"\").replace(/\\s+/g, \"-\");\n}\nconst headingIdGenerator = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$ctx)(\n  defaultHeadingIdGenerator,\n  \"headingIdGenerator\"\n);\nwithMeta(headingIdGenerator, {\n  displayName: \"Ctx<HeadingIdGenerator>\",\n  group: \"Heading\"\n});\nconst headingAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"heading\");\nwithMeta(headingAttr, {\n  displayName: \"Attr<heading>\",\n  group: \"Heading\"\n});\nconst headingSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"heading\", (ctx) => {\n  const getId = ctx.get(headingIdGenerator.key);\n  return {\n    content: \"inline*\",\n    group: \"block\",\n    defining: true,\n    attrs: {\n      id: {\n        default: \"\",\n        validate: \"string\"\n      },\n      level: {\n        default: 1,\n        validate: \"number\"\n      }\n    },\n    parseDOM: headingIndex.map((x) => ({\n      tag: `h${x}`,\n      getAttrs: (node) => {\n        if (!(node instanceof HTMLElement)) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.expectDomTypeError)(node);\n        return { level: x, id: node.id };\n      }\n    })),\n    toDOM: (node) => {\n      return [\n        `h${node.attrs.level}`,\n        {\n          ...ctx.get(headingAttr.key)(node),\n          id: node.attrs.id || getId(node)\n        },\n        0\n      ];\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === \"heading\",\n      runner: (state, node, type) => {\n        const depth = node.depth;\n        state.openNode(type, { level: depth });\n        state.next(node.children);\n        state.closeNode();\n      }\n    },\n    toMarkdown: {\n      match: (node) => node.type.name === \"heading\",\n      runner: (state, node) => {\n        state.openNode(\"heading\", void 0, { depth: node.attrs.level });\n        serializeText(state, node);\n        state.closeNode();\n      }\n    }\n  };\n});\nwithMeta(headingSchema.node, {\n  displayName: \"NodeSchema<heading>\",\n  group: \"Heading\"\n});\nwithMeta(headingSchema.ctx, {\n  displayName: \"NodeSchemaCtx<heading>\",\n  group: \"Heading\"\n});\nconst wrapInHeadingInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)((ctx) => {\n  return (0,_milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_8__.textblockTypeInputRule)(\n    /^(?<hashes>#+)\\s$/,\n    headingSchema.type(ctx),\n    (match) => {\n      var _a, _b;\n      const x = ((_b = (_a = match.groups) == null ? void 0 : _a.hashes) == null ? void 0 : _b.length) || 0;\n      const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n      const { $from } = view.state.selection;\n      const node = $from.node();\n      if (node.type.name === \"heading\") {\n        let level = Number(node.attrs.level) + Number(x);\n        if (level > 6) level = 6;\n        return { level };\n      }\n      return { level: x };\n    }\n  );\n});\nwithMeta(wrapInHeadingInputRule, {\n  displayName: \"InputRule<wrapInHeadingInputRule>\",\n  group: \"Heading\"\n});\nconst wrapInHeadingCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\"WrapInHeading\", (ctx) => {\n  return (level) => {\n    level ?? (level = 1);\n    if (level < 1) return (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.setBlockType)(paragraphSchema.type(ctx));\n    return (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.setBlockType)(headingSchema.type(ctx), { level });\n  };\n});\nwithMeta(wrapInHeadingCommand, {\n  displayName: \"Command<wrapInHeadingCommand>\",\n  group: \"Heading\"\n});\nconst downgradeHeadingCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"DowngradeHeading\",\n  (ctx) => () => (state, dispatch, view) => {\n    const { $from } = state.selection;\n    const node = $from.node();\n    if (node.type !== headingSchema.type(ctx) || !state.selection.empty || $from.parentOffset !== 0)\n      return false;\n    const level = node.attrs.level - 1;\n    if (!level)\n      return (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.setBlockType)(paragraphSchema.type(ctx))(state, dispatch, view);\n    dispatch == null ? void 0 : dispatch(\n      state.tr.setNodeMarkup(state.selection.$from.before(), void 0, {\n        ...node.attrs,\n        level\n      })\n    );\n    return true;\n  }\n);\nwithMeta(downgradeHeadingCommand, {\n  displayName: \"Command<downgradeHeadingCommand>\",\n  group: \"Heading\"\n});\nconst headingKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"headingKeymap\", {\n  TurnIntoH1: {\n    shortcuts: \"Mod-Alt-1\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInHeadingCommand.key, 1);\n    }\n  },\n  TurnIntoH2: {\n    shortcuts: \"Mod-Alt-2\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInHeadingCommand.key, 2);\n    }\n  },\n  TurnIntoH3: {\n    shortcuts: \"Mod-Alt-3\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInHeadingCommand.key, 3);\n    }\n  },\n  TurnIntoH4: {\n    shortcuts: \"Mod-Alt-4\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInHeadingCommand.key, 4);\n    }\n  },\n  TurnIntoH5: {\n    shortcuts: \"Mod-Alt-5\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInHeadingCommand.key, 5);\n    }\n  },\n  TurnIntoH6: {\n    shortcuts: \"Mod-Alt-6\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInHeadingCommand.key, 6);\n    }\n  },\n  DowngradeHeading: {\n    shortcuts: [\"Delete\", \"Backspace\"],\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(downgradeHeadingCommand.key);\n    }\n  }\n});\nwithMeta(headingKeymap.ctx, {\n  displayName: \"KeymapCtx<heading>\",\n  group: \"Heading\"\n});\nwithMeta(headingKeymap.shortcuts, {\n  displayName: \"Keymap<heading>\",\n  group: \"Heading\"\n});\nconst blockquoteAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"blockquote\");\nwithMeta(blockquoteAttr, {\n  displayName: \"Attr<blockquote>\",\n  group: \"Blockquote\"\n});\nconst blockquoteSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\n  \"blockquote\",\n  (ctx) => ({\n    content: \"block+\",\n    group: \"block\",\n    defining: true,\n    parseDOM: [{ tag: \"blockquote\" }],\n    toDOM: (node) => [\"blockquote\", ctx.get(blockquoteAttr.key)(node), 0],\n    parseMarkdown: {\n      match: ({ type }) => type === \"blockquote\",\n      runner: (state, node, type) => {\n        state.openNode(type).next(node.children).closeNode();\n      }\n    },\n    toMarkdown: {\n      match: (node) => node.type.name === \"blockquote\",\n      runner: (state, node) => {\n        state.openNode(\"blockquote\").next(node.content).closeNode();\n      }\n    }\n  })\n);\nwithMeta(blockquoteSchema.node, {\n  displayName: \"NodeSchema<blockquote>\",\n  group: \"Blockquote\"\n});\nwithMeta(blockquoteSchema.ctx, {\n  displayName: \"NodeSchemaCtx<blockquote>\",\n  group: \"Blockquote\"\n});\nconst wrapInBlockquoteInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)(\n  (ctx) => (0,_milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_8__.wrappingInputRule)(/^\\s*>\\s$/, blockquoteSchema.type(ctx))\n);\nwithMeta(wrapInBlockquoteInputRule, {\n  displayName: \"InputRule<wrapInBlockquoteInputRule>\",\n  group: \"Blockquote\"\n});\nconst wrapInBlockquoteCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"WrapInBlockquote\",\n  (ctx) => () => (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.wrapIn)(blockquoteSchema.type(ctx))\n);\nwithMeta(wrapInBlockquoteCommand, {\n  displayName: \"Command<wrapInBlockquoteCommand>\",\n  group: \"Blockquote\"\n});\nconst blockquoteKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"blockquoteKeymap\", {\n  WrapInBlockquote: {\n    shortcuts: \"Mod-Shift-b\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInBlockquoteCommand.key);\n    }\n  }\n});\nwithMeta(blockquoteKeymap.ctx, {\n  displayName: \"KeymapCtx<blockquote>\",\n  group: \"Blockquote\"\n});\nwithMeta(blockquoteKeymap.shortcuts, {\n  displayName: \"Keymap<blockquote>\",\n  group: \"Blockquote\"\n});\nconst codeBlockAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"codeBlock\", () => ({\n  pre: {},\n  code: {}\n}));\nwithMeta(codeBlockAttr, {\n  displayName: \"Attr<codeBlock>\",\n  group: \"CodeBlock\"\n});\nconst codeBlockSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"code_block\", (ctx) => {\n  return {\n    content: \"text*\",\n    group: \"block\",\n    marks: \"\",\n    defining: true,\n    code: true,\n    attrs: {\n      language: {\n        default: \"\",\n        validate: \"string\"\n      }\n    },\n    parseDOM: [\n      {\n        tag: \"pre\",\n        preserveWhitespace: \"full\",\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement)) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.expectDomTypeError)(dom);\n          return { language: dom.dataset.language };\n        }\n      }\n    ],\n    toDOM: (node) => {\n      const attr = ctx.get(codeBlockAttr.key)(node);\n      return [\n        \"pre\",\n        {\n          ...attr.pre,\n          \"data-language\": node.attrs.language\n        },\n        [\"code\", attr.code, 0]\n      ];\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === \"code\",\n      runner: (state, node, type) => {\n        const language = node.lang;\n        const value = node.value;\n        state.openNode(type, { language });\n        if (value) state.addText(value);\n        state.closeNode();\n      }\n    },\n    toMarkdown: {\n      match: (node) => node.type.name === \"code_block\",\n      runner: (state, node) => {\n        var _a;\n        state.addNode(\"code\", void 0, ((_a = node.content.firstChild) == null ? void 0 : _a.text) || \"\", {\n          lang: node.attrs.language\n        });\n      }\n    }\n  };\n});\nwithMeta(codeBlockSchema.node, {\n  displayName: \"NodeSchema<codeBlock>\",\n  group: \"CodeBlock\"\n});\nwithMeta(codeBlockSchema.ctx, {\n  displayName: \"NodeSchemaCtx<codeBlock>\",\n  group: \"CodeBlock\"\n});\nconst createCodeBlockInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)(\n  (ctx) => (0,_milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_8__.textblockTypeInputRule)(\n    /^```(?<language>[a-z]*)?[\\s\\n]$/,\n    codeBlockSchema.type(ctx),\n    (match) => {\n      var _a;\n      return {\n        language: ((_a = match.groups) == null ? void 0 : _a.language) ?? \"\"\n      };\n    }\n  )\n);\nwithMeta(createCodeBlockInputRule, {\n  displayName: \"InputRule<createCodeBlockInputRule>\",\n  group: \"CodeBlock\"\n});\nconst createCodeBlockCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"CreateCodeBlock\",\n  (ctx) => (language = \"\") => (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.setBlockType)(codeBlockSchema.type(ctx), { language })\n);\nwithMeta(createCodeBlockCommand, {\n  displayName: \"Command<createCodeBlockCommand>\",\n  group: \"CodeBlock\"\n});\nconst updateCodeBlockLanguageCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"UpdateCodeBlockLanguage\",\n  () => ({ pos, language } = {\n    pos: -1,\n    language: \"\"\n  }) => (state, dispatch) => {\n    if (pos >= 0) {\n      dispatch == null ? void 0 : dispatch(state.tr.setNodeAttribute(pos, \"language\", language));\n      return true;\n    }\n    return false;\n  }\n);\nwithMeta(updateCodeBlockLanguageCommand, {\n  displayName: \"Command<updateCodeBlockLanguageCommand>\",\n  group: \"CodeBlock\"\n});\nconst codeBlockKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"codeBlockKeymap\", {\n  CreateCodeBlock: {\n    shortcuts: \"Mod-Alt-c\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(createCodeBlockCommand.key);\n    }\n  }\n});\nwithMeta(codeBlockKeymap.ctx, {\n  displayName: \"KeymapCtx<codeBlock>\",\n  group: \"CodeBlock\"\n});\nwithMeta(codeBlockKeymap.shortcuts, {\n  displayName: \"Keymap<codeBlock>\",\n  group: \"CodeBlock\"\n});\nconst imageAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"image\");\nwithMeta(imageAttr, {\n  displayName: \"Attr<image>\",\n  group: \"Image\"\n});\nconst imageSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"image\", (ctx) => {\n  return {\n    inline: true,\n    group: \"inline\",\n    selectable: true,\n    draggable: true,\n    marks: \"\",\n    atom: true,\n    defining: true,\n    isolating: true,\n    attrs: {\n      src: { default: \"\", validate: \"string\" },\n      alt: { default: \"\", validate: \"string\" },\n      title: { default: \"\", validate: \"string\" }\n    },\n    parseDOM: [\n      {\n        tag: \"img[src]\",\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement)) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.expectDomTypeError)(dom);\n          return {\n            src: dom.getAttribute(\"src\") || \"\",\n            alt: dom.getAttribute(\"alt\") || \"\",\n            title: dom.getAttribute(\"title\") || dom.getAttribute(\"alt\") || \"\"\n          };\n        }\n      }\n    ],\n    toDOM: (node) => {\n      return [\"img\", { ...ctx.get(imageAttr.key)(node), ...node.attrs }];\n    },\n    parseMarkdown: {\n      match: ({ type }) => type === \"image\",\n      runner: (state, node, type) => {\n        const url = node.url;\n        const alt = node.alt;\n        const title = node.title;\n        state.addNode(type, {\n          src: url,\n          alt,\n          title\n        });\n      }\n    },\n    toMarkdown: {\n      match: (node) => node.type.name === \"image\",\n      runner: (state, node) => {\n        state.addNode(\"image\", void 0, void 0, {\n          title: node.attrs.title,\n          url: node.attrs.src,\n          alt: node.attrs.alt\n        });\n      }\n    }\n  };\n});\nwithMeta(imageSchema.node, {\n  displayName: \"NodeSchema<image>\",\n  group: \"Image\"\n});\nwithMeta(imageSchema.ctx, {\n  displayName: \"NodeSchemaCtx<image>\",\n  group: \"Image\"\n});\nconst insertImageCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"InsertImage\",\n  (ctx) => (payload = {}) => (state, dispatch) => {\n    if (!dispatch) return true;\n    const { src = \"\", alt = \"\", title = \"\" } = payload;\n    const node = imageSchema.type(ctx).create({ src, alt, title });\n    if (!node) return true;\n    dispatch(state.tr.replaceSelectionWith(node).scrollIntoView());\n    return true;\n  }\n);\nwithMeta(insertImageCommand, {\n  displayName: \"Command<insertImageCommand>\",\n  group: \"Image\"\n});\nconst updateImageCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"UpdateImage\",\n  (ctx) => (payload = {}) => (state, dispatch) => {\n    const nodeWithPos = (0,_milkdown_prose__WEBPACK_IMPORTED_MODULE_4__.findSelectedNodeOfType)(\n      state.selection,\n      imageSchema.type(ctx)\n    );\n    if (!nodeWithPos) return false;\n    const { node, pos } = nodeWithPos;\n    const newAttrs = { ...node.attrs };\n    const { src, alt, title } = payload;\n    if (src !== void 0) newAttrs.src = src;\n    if (alt !== void 0) newAttrs.alt = alt;\n    if (title !== void 0) newAttrs.title = title;\n    dispatch == null ? void 0 : dispatch(\n      state.tr.setNodeMarkup(pos, void 0, newAttrs).scrollIntoView()\n    );\n    return true;\n  }\n);\nwithMeta(updateImageCommand, {\n  displayName: \"Command<updateImageCommand>\",\n  group: \"Image\"\n});\nconst insertImageInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)(\n  (ctx) => new _milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_8__.InputRule(\n    /!\\[(?<alt>.*?)]\\((?<filename>.*?)\\s*(?=\"|\\))\"?(?<title>[^\"]+)?\"?\\)/,\n    (state, match, start, end) => {\n      const [matched, alt, src = \"\", title] = match;\n      if (matched)\n        return state.tr.replaceWith(\n          start,\n          end,\n          imageSchema.type(ctx).create({ src, alt, title })\n        );\n      return null;\n    }\n  )\n);\nwithMeta(insertImageInputRule, {\n  displayName: \"InputRule<insertImageInputRule>\",\n  group: \"Image\"\n});\nconst hardbreakAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"hardbreak\", (node) => {\n  return {\n    \"data-type\": \"hardbreak\",\n    \"data-is-inline\": node.attrs.isInline\n  };\n});\nwithMeta(hardbreakAttr, {\n  displayName: \"Attr<hardbreak>\",\n  group: \"Hardbreak\"\n});\nconst hardbreakSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"hardbreak\", (ctx) => ({\n  inline: true,\n  group: \"inline\",\n  attrs: {\n    isInline: {\n      default: false,\n      validate: \"boolean\"\n    }\n  },\n  selectable: false,\n  parseDOM: [\n    { tag: \"br\" },\n    {\n      tag: 'span[data-type=\"hardbreak\"]',\n      getAttrs: () => ({ isInline: true })\n    }\n  ],\n  toDOM: (node) => node.attrs.isInline ? [\"span\", ctx.get(hardbreakAttr.key)(node), \" \"] : [\"br\", ctx.get(hardbreakAttr.key)(node)],\n  parseMarkdown: {\n    match: ({ type }) => type === \"break\",\n    runner: (state, node, type) => {\n      var _a;\n      state.addNode(type, {\n        isInline: Boolean(\n          (_a = node.data) == null ? void 0 : _a.isInline\n        )\n      });\n    }\n  },\n  leafText: () => \"\\n\",\n  toMarkdown: {\n    match: (node) => node.type.name === \"hardbreak\",\n    runner: (state, node) => {\n      if (node.attrs.isInline) state.addNode(\"text\", void 0, \"\\n\");\n      else state.addNode(\"break\");\n    }\n  }\n}));\nwithMeta(hardbreakSchema.node, {\n  displayName: \"NodeSchema<hardbreak>\",\n  group: \"Hardbreak\"\n});\nwithMeta(hardbreakSchema.ctx, {\n  displayName: \"NodeSchemaCtx<hardbreak>\",\n  group: \"Hardbreak\"\n});\nconst insertHardbreakCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"InsertHardbreak\",\n  (ctx) => () => (state, dispatch) => {\n    var _a;\n    const { selection, tr } = state;\n    if (!(selection instanceof _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.TextSelection)) return false;\n    if (selection.empty) {\n      const node = selection.$from.node();\n      if (node.childCount > 0 && ((_a = node.lastChild) == null ? void 0 : _a.type.name) === \"hardbreak\") {\n        dispatch == null ? void 0 : dispatch(\n          tr.replaceRangeWith(\n            selection.to - 1,\n            selection.to,\n            state.schema.node(\"paragraph\")\n          ).setSelection(_milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.Selection.near(tr.doc.resolve(selection.to))).scrollIntoView()\n        );\n        return true;\n      }\n    }\n    dispatch == null ? void 0 : dispatch(\n      tr.setMeta(\"hardbreak\", true).replaceSelectionWith(hardbreakSchema.type(ctx).create()).scrollIntoView()\n    );\n    return true;\n  }\n);\nwithMeta(insertHardbreakCommand, {\n  displayName: \"Command<insertHardbreakCommand>\",\n  group: \"Hardbreak\"\n});\nconst hardbreakKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"hardbreakKeymap\", {\n  InsertHardbreak: {\n    shortcuts: \"Shift-Enter\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(insertHardbreakCommand.key);\n    }\n  }\n});\nwithMeta(hardbreakKeymap.ctx, {\n  displayName: \"KeymapCtx<hardbreak>\",\n  group: \"Hardbreak\"\n});\nwithMeta(hardbreakKeymap.shortcuts, {\n  displayName: \"Keymap<hardbreak>\",\n  group: \"Hardbreak\"\n});\nconst hrAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"hr\");\nwithMeta(hrAttr, {\n  displayName: \"Attr<hr>\",\n  group: \"Hr\"\n});\nconst hrSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"hr\", (ctx) => ({\n  group: \"block\",\n  parseDOM: [{ tag: \"hr\" }],\n  toDOM: (node) => [\"hr\", ctx.get(hrAttr.key)(node)],\n  parseMarkdown: {\n    match: ({ type }) => type === \"thematicBreak\",\n    runner: (state, _, type) => {\n      state.addNode(type);\n    }\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === \"hr\",\n    runner: (state) => {\n      state.addNode(\"thematicBreak\");\n    }\n  }\n}));\nwithMeta(hrSchema.node, {\n  displayName: \"NodeSchema<hr>\",\n  group: \"Hr\"\n});\nwithMeta(hrSchema.ctx, {\n  displayName: \"NodeSchemaCtx<hr>\",\n  group: \"Hr\"\n});\nconst insertHrInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)(\n  (ctx) => new _milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_8__.InputRule(/^(?:---|___\\s|\\*\\*\\*\\s)$/, (state, match, start, end) => {\n    const { tr } = state;\n    if (match[0]) tr.replaceWith(start - 1, end, hrSchema.type(ctx).create());\n    return tr;\n  })\n);\nwithMeta(insertHrInputRule, {\n  displayName: \"InputRule<insertHrInputRule>\",\n  group: \"Hr\"\n});\nconst insertHrCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"InsertHr\",\n  (ctx) => () => (state, dispatch) => {\n    if (!dispatch) return true;\n    const paragraph = paragraphSchema.node.type(ctx).create();\n    const { tr, selection } = state;\n    const { from } = selection;\n    const node = hrSchema.type(ctx).create();\n    if (!node) return true;\n    const _tr = tr.replaceSelectionWith(node).insert(from, paragraph);\n    const sel = _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.Selection.findFrom(_tr.doc.resolve(from), 1, true);\n    if (!sel) return true;\n    dispatch(_tr.setSelection(sel).scrollIntoView());\n    return true;\n  }\n);\nwithMeta(insertHrCommand, {\n  displayName: \"Command<insertHrCommand>\",\n  group: \"Hr\"\n});\nconst bulletListAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"bulletList\");\nwithMeta(bulletListAttr, {\n  displayName: \"Attr<bulletList>\",\n  group: \"BulletList\"\n});\nconst bulletListSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"bullet_list\", (ctx) => {\n  return {\n    content: \"listItem+\",\n    group: \"block\",\n    attrs: {\n      spread: {\n        default: false,\n        validate: \"boolean\"\n      }\n    },\n    parseDOM: [\n      {\n        tag: \"ul\",\n        getAttrs: (dom) => {\n          if (!(dom instanceof HTMLElement)) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.expectDomTypeError)(dom);\n          return {\n            spread: dom.dataset.spread === \"true\"\n          };\n        }\n      }\n    ],\n    toDOM: (node) => {\n      return [\n        \"ul\",\n        {\n          ...ctx.get(bulletListAttr.key)(node),\n          \"data-spread\": node.attrs.spread\n        },\n        0\n      ];\n    },\n    parseMarkdown: {\n      match: ({ type, ordered }) => type === \"list\" && !ordered,\n      runner: (state, node, type) => {\n        const spread = node.spread != null ? `${node.spread}` : \"false\";\n        state.openNode(type, { spread }).next(node.children).closeNode();\n      }\n    },\n    toMarkdown: {\n      match: (node) => node.type.name === \"bullet_list\",\n      runner: (state, node) => {\n        state.openNode(\"list\", void 0, {\n          ordered: false,\n          spread: node.attrs.spread\n        }).next(node.content).closeNode();\n      }\n    }\n  };\n});\nwithMeta(bulletListSchema.node, {\n  displayName: \"NodeSchema<bulletList>\",\n  group: \"BulletList\"\n});\nwithMeta(bulletListSchema.ctx, {\n  displayName: \"NodeSchemaCtx<bulletList>\",\n  group: \"BulletList\"\n});\nconst wrapInBulletListInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)(\n  (ctx) => (0,_milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_8__.wrappingInputRule)(/^\\s*([-+*])\\s$/, bulletListSchema.type(ctx))\n);\nwithMeta(wrapInBulletListInputRule, {\n  displayName: \"InputRule<wrapInBulletListInputRule>\",\n  group: \"BulletList\"\n});\nconst wrapInBulletListCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"WrapInBulletList\",\n  (ctx) => () => (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.wrapIn)(bulletListSchema.type(ctx))\n);\nwithMeta(wrapInBulletListCommand, {\n  displayName: \"Command<wrapInBulletListCommand>\",\n  group: \"BulletList\"\n});\nconst bulletListKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"bulletListKeymap\", {\n  WrapInBulletList: {\n    shortcuts: \"Mod-Alt-8\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInBulletListCommand.key);\n    }\n  }\n});\nwithMeta(bulletListKeymap.ctx, {\n  displayName: \"KeymapCtx<bulletListKeymap>\",\n  group: \"BulletList\"\n});\nwithMeta(bulletListKeymap.shortcuts, {\n  displayName: \"Keymap<bulletListKeymap>\",\n  group: \"BulletList\"\n});\nconst orderedListAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"orderedList\");\nwithMeta(orderedListAttr, {\n  displayName: \"Attr<orderedList>\",\n  group: \"OrderedList\"\n});\nconst orderedListSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"ordered_list\", (ctx) => ({\n  content: \"listItem+\",\n  group: \"block\",\n  attrs: {\n    order: {\n      default: 1,\n      validate: \"number\"\n    },\n    spread: {\n      default: false,\n      validate: \"boolean\"\n    }\n  },\n  parseDOM: [\n    {\n      tag: \"ol\",\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement)) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.expectDomTypeError)(dom);\n        return {\n          spread: dom.dataset.spread,\n          order: dom.hasAttribute(\"start\") ? Number(dom.getAttribute(\"start\")) : 1\n        };\n      }\n    }\n  ],\n  toDOM: (node) => [\n    \"ol\",\n    {\n      ...ctx.get(orderedListAttr.key)(node),\n      ...node.attrs.order === 1 ? {} : node.attrs.order,\n      \"data-spread\": node.attrs.spread\n    },\n    0\n  ],\n  parseMarkdown: {\n    match: ({ type, ordered }) => type === \"list\" && !!ordered,\n    runner: (state, node, type) => {\n      const spread = node.spread != null ? `${node.spread}` : \"true\";\n      state.openNode(type, { spread }).next(node.children).closeNode();\n    }\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === \"ordered_list\",\n    runner: (state, node) => {\n      state.openNode(\"list\", void 0, {\n        ordered: true,\n        start: 1,\n        spread: node.attrs.spread === \"true\"\n      });\n      state.next(node.content);\n      state.closeNode();\n    }\n  }\n}));\nwithMeta(orderedListSchema.node, {\n  displayName: \"NodeSchema<orderedList>\",\n  group: \"OrderedList\"\n});\nwithMeta(orderedListSchema.ctx, {\n  displayName: \"NodeSchemaCtx<orderedList>\",\n  group: \"OrderedList\"\n});\nconst wrapInOrderedListInputRule = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$inputRule)(\n  (ctx) => (0,_milkdown_prose_inputrules__WEBPACK_IMPORTED_MODULE_8__.wrappingInputRule)(\n    /^\\s*(\\d+)\\.\\s$/,\n    orderedListSchema.type(ctx),\n    (match) => ({ order: Number(match[1]) }),\n    (match, node) => node.childCount + node.attrs.order === Number(match[1])\n  )\n);\nwithMeta(wrapInOrderedListInputRule, {\n  displayName: \"InputRule<wrapInOrderedListInputRule>\",\n  group: \"OrderedList\"\n});\nconst wrapInOrderedListCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"WrapInOrderedList\",\n  (ctx) => () => (0,_milkdown_prose_commands__WEBPACK_IMPORTED_MODULE_3__.wrapIn)(orderedListSchema.type(ctx))\n);\nwithMeta(wrapInOrderedListCommand, {\n  displayName: \"Command<wrapInOrderedListCommand>\",\n  group: \"OrderedList\"\n});\nconst orderedListKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"orderedListKeymap\", {\n  WrapInOrderedList: {\n    shortcuts: \"Mod-Alt-7\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(wrapInOrderedListCommand.key);\n    }\n  }\n});\nwithMeta(orderedListKeymap.ctx, {\n  displayName: \"KeymapCtx<orderedList>\",\n  group: \"OrderedList\"\n});\nwithMeta(orderedListKeymap.shortcuts, {\n  displayName: \"Keymap<orderedList>\",\n  group: \"OrderedList\"\n});\nconst listItemAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"listItem\");\nwithMeta(listItemAttr, {\n  displayName: \"Attr<listItem>\",\n  group: \"ListItem\"\n});\nconst listItemSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"list_item\", (ctx) => ({\n  group: \"listItem\",\n  content: \"paragraph block*\",\n  attrs: {\n    label: {\n      default: \"•\",\n      validate: \"string\"\n    },\n    listType: {\n      default: \"bullet\",\n      validate: \"string\"\n    },\n    spread: {\n      default: true,\n      validate: \"boolean\"\n    }\n  },\n  defining: true,\n  parseDOM: [\n    {\n      tag: \"li\",\n      getAttrs: (dom) => {\n        if (!(dom instanceof HTMLElement)) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_5__.expectDomTypeError)(dom);\n        return {\n          label: dom.dataset.label,\n          listType: dom.dataset.listType,\n          spread: dom.dataset.spread === \"true\"\n        };\n      }\n    }\n  ],\n  toDOM: (node) => [\n    \"li\",\n    {\n      ...ctx.get(listItemAttr.key)(node),\n      \"data-label\": node.attrs.label,\n      \"data-list-type\": node.attrs.listType,\n      \"data-spread\": node.attrs.spread\n    },\n    0\n  ],\n  parseMarkdown: {\n    match: ({ type }) => type === \"listItem\",\n    runner: (state, node, type) => {\n      const label = node.label != null ? `${node.label}.` : \"•\";\n      const listType = node.label != null ? \"ordered\" : \"bullet\";\n      const spread = node.spread != null ? `${node.spread}` : \"true\";\n      state.openNode(type, { label, listType, spread });\n      state.next(node.children);\n      state.closeNode();\n    }\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === \"list_item\",\n    runner: (state, node) => {\n      state.openNode(\"listItem\", void 0, {\n        spread: node.attrs.spread\n      });\n      state.next(node.content);\n      state.closeNode();\n    }\n  }\n}));\nwithMeta(listItemSchema.node, {\n  displayName: \"NodeSchema<listItem>\",\n  group: \"ListItem\"\n});\nwithMeta(listItemSchema.ctx, {\n  displayName: \"NodeSchemaCtx<listItem>\",\n  group: \"ListItem\"\n});\nconst sinkListItemCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"SinkListItem\",\n  (ctx) => () => (0,_milkdown_prose_schema_list__WEBPACK_IMPORTED_MODULE_9__.sinkListItem)(listItemSchema.type(ctx))\n);\nwithMeta(sinkListItemCommand, {\n  displayName: \"Command<sinkListItemCommand>\",\n  group: \"ListItem\"\n});\nconst liftListItemCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"LiftListItem\",\n  (ctx) => () => (0,_milkdown_prose_schema_list__WEBPACK_IMPORTED_MODULE_9__.liftListItem)(listItemSchema.type(ctx))\n);\nwithMeta(liftListItemCommand, {\n  displayName: \"Command<liftListItemCommand>\",\n  group: \"ListItem\"\n});\nconst splitListItemCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"SplitListItem\",\n  (ctx) => () => (0,_milkdown_prose_schema_list__WEBPACK_IMPORTED_MODULE_9__.splitListItem)(listItemSchema.type(ctx))\n);\nwithMeta(splitListItemCommand, {\n  displayName: \"Command<splitListItemCommand>\",\n  group: \"ListItem\"\n});\nfunction liftFirstListItem(ctx) {\n  return (state, dispatch, view) => {\n    const { selection } = state;\n    if (!(selection instanceof _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.TextSelection)) return false;\n    const { empty, $from } = selection;\n    if (!empty || $from.parentOffset !== 0) return false;\n    const parentItem = $from.node(-1);\n    if (parentItem.type !== listItemSchema.type(ctx) || parentItem.firstChild !== $from.node())\n      return false;\n    const list = $from.node(-2);\n    if (list.childCount > 1) return false;\n    return (0,_milkdown_prose_schema_list__WEBPACK_IMPORTED_MODULE_9__.liftListItem)(listItemSchema.type(ctx))(state, dispatch, view);\n  };\n}\nconst liftFirstListItemCommand = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$command)(\n  \"LiftFirstListItem\",\n  (ctx) => () => liftFirstListItem(ctx)\n);\nwithMeta(liftFirstListItemCommand, {\n  displayName: \"Command<liftFirstListItemCommand>\",\n  group: \"ListItem\"\n});\nconst listItemKeymap = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$useKeymap)(\"listItemKeymap\", {\n  NextListItem: {\n    shortcuts: \"Enter\",\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(splitListItemCommand.key);\n    }\n  },\n  SinkListItem: {\n    shortcuts: [\"Tab\", \"Mod-]\"],\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(sinkListItemCommand.key);\n    }\n  },\n  LiftListItem: {\n    shortcuts: [\"Shift-Tab\", \"Mod-[\"],\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(liftListItemCommand.key);\n    }\n  },\n  LiftFirstListItem: {\n    shortcuts: [\"Backspace\", \"Delete\"],\n    command: (ctx) => {\n      const commands2 = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx);\n      return () => commands2.call(liftFirstListItemCommand.key);\n    }\n  }\n});\nwithMeta(listItemKeymap.ctx, {\n  displayName: \"KeymapCtx<listItem>\",\n  group: \"ListItem\"\n});\nwithMeta(listItemKeymap.shortcuts, {\n  displayName: \"Keymap<listItem>\",\n  group: \"ListItem\"\n});\nconst textSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$node)(\"text\", () => ({\n  group: \"inline\",\n  parseMarkdown: {\n    match: ({ type }) => type === \"text\",\n    runner: (state, node) => {\n      state.addText(node.value);\n    }\n  },\n  toMarkdown: {\n    match: (node) => node.type.name === \"text\",\n    runner: (state, node) => {\n      state.addNode(\"text\", void 0, node.text);\n    }\n  }\n}));\nwithMeta(textSchema, {\n  displayName: \"NodeSchema<text>\",\n  group: \"Text\"\n});\nconst htmlAttr = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeAttr)(\"html\");\nwithMeta(htmlAttr, {\n  displayName: \"Attr<html>\",\n  group: \"Html\"\n});\nconst htmlSchema = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$nodeSchema)(\"html\", (ctx) => {\n  return {\n    atom: true,\n    group: \"inline\",\n    inline: true,\n    attrs: {\n      value: {\n        default: \"\",\n        validate: \"string\"\n      }\n    },\n    toDOM: (node) => {\n      const span = document.createElement(\"span\");\n      const attr = {\n        ...ctx.get(htmlAttr.key)(node),\n        \"data-value\": node.attrs.value,\n        \"data-type\": \"html\"\n      };\n      span.textContent = node.attrs.value;\n      return [\"span\", attr, node.attrs.value];\n    },\n    parseDOM: [\n      {\n        tag: 'span[data-type=\"html\"]',\n        getAttrs: (dom) => {\n          return {\n            value: dom.dataset.value ?? \"\"\n          };\n        }\n      }\n    ],\n    parseMarkdown: {\n      match: ({ type }) => Boolean(type === \"html\"),\n      runner: (state, node, type) => {\n        state.addNode(type, { value: node.value });\n      }\n    },\n    toMarkdown: {\n      match: (node) => node.type.name === \"html\",\n      runner: (state, node) => {\n        state.addNode(\"html\", void 0, node.attrs.value);\n      }\n    }\n  };\n});\nwithMeta(htmlSchema.node, {\n  displayName: \"NodeSchema<html>\",\n  group: \"Html\"\n});\nwithMeta(htmlSchema.ctx, {\n  displayName: \"NodeSchemaCtx<html>\",\n  group: \"Html\"\n});\nconst schema = [\n  docSchema,\n  paragraphAttr,\n  paragraphSchema,\n  headingIdGenerator,\n  headingAttr,\n  headingSchema,\n  hardbreakAttr,\n  hardbreakSchema,\n  blockquoteAttr,\n  blockquoteSchema,\n  codeBlockAttr,\n  codeBlockSchema,\n  hrAttr,\n  hrSchema,\n  imageAttr,\n  imageSchema,\n  bulletListAttr,\n  bulletListSchema,\n  orderedListAttr,\n  orderedListSchema,\n  listItemAttr,\n  listItemSchema,\n  emphasisAttr,\n  emphasisSchema,\n  strongAttr,\n  strongSchema,\n  inlineCodeAttr,\n  inlineCodeSchema,\n  linkAttr,\n  linkSchema,\n  htmlAttr,\n  htmlSchema,\n  textSchema\n].flat();\nconst inputRules = [\n  wrapInBlockquoteInputRule,\n  wrapInBulletListInputRule,\n  wrapInOrderedListInputRule,\n  createCodeBlockInputRule,\n  insertHrInputRule,\n  wrapInHeadingInputRule\n].flat();\nconst markInputRules = [\n  emphasisStarInputRule,\n  emphasisUnderscoreInputRule,\n  inlineCodeInputRule,\n  strongInputRule\n];\nconst commands = [\n  turnIntoTextCommand,\n  wrapInBlockquoteCommand,\n  wrapInHeadingCommand,\n  downgradeHeadingCommand,\n  createCodeBlockCommand,\n  insertHardbreakCommand,\n  insertHrCommand,\n  insertImageCommand,\n  updateImageCommand,\n  wrapInOrderedListCommand,\n  wrapInBulletListCommand,\n  sinkListItemCommand,\n  splitListItemCommand,\n  liftListItemCommand,\n  liftFirstListItemCommand,\n  toggleEmphasisCommand,\n  toggleInlineCodeCommand,\n  toggleStrongCommand,\n  toggleLinkCommand,\n  updateLinkCommand\n];\nconst keymap = [\n  blockquoteKeymap,\n  codeBlockKeymap,\n  hardbreakKeymap,\n  headingKeymap,\n  listItemKeymap,\n  orderedListKeymap,\n  bulletListKeymap,\n  paragraphKeymap,\n  emphasisKeymap,\n  inlineCodeKeymap,\n  strongKeymap\n].flat();\nconst remarkAddOrderInListPlugin = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$remark)(\n  \"remarkAddOrderInList\",\n  () => () => (tree) => {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_10__.visit)(tree, \"list\", (node) => {\n      if (node.ordered) {\n        const start = node.start ?? 1;\n        node.children.forEach((child, index) => {\n          child.label = index + start;\n        });\n      }\n    });\n  }\n);\nwithMeta(remarkAddOrderInListPlugin.plugin, {\n  displayName: \"Remark<remarkAddOrderInListPlugin>\",\n  group: \"Remark\"\n});\nwithMeta(remarkAddOrderInListPlugin.options, {\n  displayName: \"RemarkConfig<remarkAddOrderInListPlugin>\",\n  group: \"Remark\"\n});\nconst remarkLineBreak = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$remark)(\n  \"remarkLineBreak\",\n  () => () => (tree) => {\n    const find = /[\\t ]*(?:\\r?\\n|\\r)/g;\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_10__.visit)(\n      tree,\n      \"text\",\n      (node, index, parent) => {\n        if (!node.value || typeof node.value !== \"string\") return;\n        const result = [];\n        let start = 0;\n        find.lastIndex = 0;\n        let match = find.exec(node.value);\n        while (match) {\n          const position = match.index;\n          if (start !== position)\n            result.push({\n              type: \"text\",\n              value: node.value.slice(start, position)\n            });\n          result.push({ type: \"break\", data: { isInline: true } });\n          start = position + match[0].length;\n          match = find.exec(node.value);\n        }\n        const hasResultAndIndex = result.length > 0 && parent && typeof index === \"number\";\n        if (!hasResultAndIndex) return;\n        if (start < node.value.length)\n          result.push({ type: \"text\", value: node.value.slice(start) });\n        parent.children.splice(index, 1, ...result);\n        return index + result.length;\n      }\n    );\n  }\n);\nwithMeta(remarkLineBreak.plugin, {\n  displayName: \"Remark<remarkLineBreak>\",\n  group: \"Remark\"\n});\nwithMeta(remarkLineBreak.options, {\n  displayName: \"RemarkConfig<remarkLineBreak>\",\n  group: \"Remark\"\n});\nconst remarkInlineLinkPlugin = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$remark)(\n  \"remarkInlineLink\",\n  () => remark_inline_links__WEBPACK_IMPORTED_MODULE_11__[\"default\"]\n);\nwithMeta(remarkInlineLinkPlugin.plugin, {\n  displayName: \"Remark<remarkInlineLinkPlugin>\",\n  group: \"Remark\"\n});\nwithMeta(remarkInlineLinkPlugin.options, {\n  displayName: \"RemarkConfig<remarkInlineLinkPlugin>\",\n  group: \"Remark\"\n});\nconst isParent = (node) => !!node.children;\nconst isHTML = (node) => node.type === \"html\";\nfunction flatMapWithDepth(ast, fn) {\n  return transform(ast, 0, null)[0];\n  function transform(node, index, parent) {\n    if (isParent(node)) {\n      const out = [];\n      for (let i = 0, n = node.children.length; i < n; i++) {\n        const nthChild = node.children[i];\n        if (nthChild) {\n          const xs = transform(nthChild, i, node);\n          if (xs) {\n            for (let j = 0, m = xs.length; j < m; j++) {\n              const item = xs[j];\n              if (item) out.push(item);\n            }\n          }\n        }\n      }\n      node.children = out;\n    }\n    return fn(node, index, parent);\n  }\n}\nconst remarkHtmlTransformer = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$remark)(\n  \"remarkHTMLTransformer\",\n  () => () => (tree) => {\n    flatMapWithDepth(tree, (node, _index, parent) => {\n      if (!isHTML(node)) return [node];\n      if ((parent == null ? void 0 : parent.type) === \"root\") {\n        node.children = [{ ...node }];\n        delete node.value;\n        node.type = \"paragraph\";\n      }\n      return [node];\n    });\n  }\n);\nwithMeta(remarkHtmlTransformer.plugin, {\n  displayName: \"Remark<remarkHtmlTransformer>\",\n  group: \"Remark\"\n});\nwithMeta(remarkHtmlTransformer.options, {\n  displayName: \"RemarkConfig<remarkHtmlTransformer>\",\n  group: \"Remark\"\n});\nconst remarkMarker = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$remark)(\n  \"remarkMarker\",\n  () => () => (tree, file) => {\n    const getMarker = (node) => {\n      return file.value.charAt(node.position.start.offset);\n    };\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_10__.visit)(\n      tree,\n      (node) => [\"strong\", \"emphasis\"].includes(node.type),\n      (node) => {\n        node.marker = getMarker(node);\n      }\n    );\n  }\n);\nwithMeta(remarkMarker.plugin, {\n  displayName: \"Remark<remarkMarker>\",\n  group: \"Remark\"\n});\nwithMeta(remarkMarker.options, {\n  displayName: \"RemarkConfig<remarkMarker>\",\n  group: \"Remark\"\n});\nconst inlineNodesCursorPlugin = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$prose)(() => {\n  let lock = false;\n  const inlineNodesCursorPluginKey = new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.PluginKey(\n    \"MILKDOWN_INLINE_NODES_CURSOR\"\n  );\n  const inlineNodesCursorPlugin2 = new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.Plugin({\n    key: inlineNodesCursorPluginKey,\n    state: {\n      init() {\n        return false;\n      },\n      apply(tr) {\n        if (!tr.selection.empty) return false;\n        const pos = tr.selection.$from;\n        const left = pos.nodeBefore;\n        const right = pos.nodeAfter;\n        if (left && right && left.isInline && !left.isText && right.isInline && !right.isText)\n          return true;\n        return false;\n      }\n    },\n    props: {\n      handleDOMEvents: {\n        compositionend: (view, e) => {\n          if (lock) {\n            lock = false;\n            requestAnimationFrame(() => {\n              const active = inlineNodesCursorPlugin2.getState(view.state);\n              if (active) {\n                const from = view.state.selection.from;\n                e.preventDefault();\n                view.dispatch(view.state.tr.insertText(e.data || \"\", from));\n              }\n            });\n            return true;\n          }\n          return false;\n        },\n        compositionstart: (view) => {\n          const active = inlineNodesCursorPlugin2.getState(view.state);\n          if (active) lock = true;\n          return false;\n        },\n        beforeinput: (view, e) => {\n          const active = inlineNodesCursorPlugin2.getState(view.state);\n          if (active && e instanceof InputEvent && e.data && !lock) {\n            const from = view.state.selection.from;\n            e.preventDefault();\n            view.dispatch(view.state.tr.insertText(e.data || \"\", from));\n            return true;\n          }\n          return false;\n        }\n      },\n      decorations(state) {\n        const active = inlineNodesCursorPlugin2.getState(state);\n        if (active) {\n          const pos = state.selection.$from;\n          const position = pos.pos;\n          const left = document.createElement(\"span\");\n          const leftDec = _milkdown_prose_view__WEBPACK_IMPORTED_MODULE_12__.Decoration.widget(position, left, {\n            side: -1\n          });\n          const right = document.createElement(\"span\");\n          const rightDec = _milkdown_prose_view__WEBPACK_IMPORTED_MODULE_12__.Decoration.widget(position, right);\n          setTimeout(() => {\n            left.contentEditable = \"true\";\n            right.contentEditable = \"true\";\n          });\n          return _milkdown_prose_view__WEBPACK_IMPORTED_MODULE_12__.DecorationSet.create(state.doc, [leftDec, rightDec]);\n        }\n        return _milkdown_prose_view__WEBPACK_IMPORTED_MODULE_12__.DecorationSet.empty;\n      }\n    }\n  });\n  return inlineNodesCursorPlugin2;\n});\nwithMeta(inlineNodesCursorPlugin, {\n  displayName: \"Prose<inlineNodesCursorPlugin>\",\n  group: \"Prose\"\n});\nconst hardbreakClearMarkPlugin = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$prose)((ctx) => {\n  return new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.Plugin({\n    key: new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.PluginKey(\"MILKDOWN_HARDBREAK_MARKS\"),\n    appendTransaction: (trs, _oldState, newState) => {\n      if (!trs.length) return;\n      const [tr] = trs;\n      if (!tr) return;\n      const [step] = tr.steps;\n      const isInsertHr = tr.getMeta(\"hardbreak\");\n      if (isInsertHr) {\n        if (!(step instanceof _milkdown_prose_transform__WEBPACK_IMPORTED_MODULE_13__.ReplaceStep)) return;\n        const { from } = step;\n        return newState.tr.setNodeMarkup(\n          from,\n          hardbreakSchema.type(ctx),\n          void 0,\n          []\n        );\n      }\n      const isAddMarkStep = step instanceof _milkdown_prose_transform__WEBPACK_IMPORTED_MODULE_13__.AddMarkStep;\n      if (isAddMarkStep) {\n        let _tr = newState.tr;\n        const { from, to } = step;\n        newState.doc.nodesBetween(from, to, (node, pos) => {\n          if (node.type === hardbreakSchema.type(ctx))\n            _tr = _tr.setNodeMarkup(\n              pos,\n              hardbreakSchema.type(ctx),\n              void 0,\n              []\n            );\n        });\n        return _tr;\n      }\n      return void 0;\n    }\n  });\n});\nwithMeta(hardbreakClearMarkPlugin, {\n  displayName: \"Prose<hardbreakClearMarkPlugin>\",\n  group: \"Prose\"\n});\nconst hardbreakFilterNodes = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$ctx)(\n  [\"table\", \"code_block\"],\n  \"hardbreakFilterNodes\"\n);\nwithMeta(hardbreakFilterNodes, {\n  displayName: \"Ctx<hardbreakFilterNodes>\",\n  group: \"Prose\"\n});\nconst hardbreakFilterPlugin = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$prose)((ctx) => {\n  const notIn = ctx.get(hardbreakFilterNodes.key);\n  return new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.Plugin({\n    key: new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.PluginKey(\"MILKDOWN_HARDBREAK_FILTER\"),\n    filterTransaction: (tr, state) => {\n      const isInsertHr = tr.getMeta(\"hardbreak\");\n      const [step] = tr.steps;\n      if (isInsertHr && step) {\n        const { from } = step;\n        const $from = state.doc.resolve(from);\n        let curDepth = $from.depth;\n        let canApply = true;\n        while (curDepth > 0) {\n          if (notIn.includes($from.node(curDepth).type.name)) canApply = false;\n          curDepth--;\n        }\n        return canApply;\n      }\n      return true;\n    }\n  });\n});\nwithMeta(hardbreakFilterPlugin, {\n  displayName: \"Prose<hardbreakFilterPlugin>\",\n  group: \"Prose\"\n});\nconst syncHeadingIdPlugin = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$prose)((ctx) => {\n  const headingIdPluginKey = new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.PluginKey(\"MILKDOWN_HEADING_ID\");\n  const updateId = (view) => {\n    if (view.composing) return;\n    const getId = ctx.get(headingIdGenerator.key);\n    const tr = view.state.tr.setMeta(\"addToHistory\", false);\n    let found = false;\n    const idMap = {};\n    view.state.doc.descendants((node, pos) => {\n      if (node.type === headingSchema.type(ctx)) {\n        if (node.textContent.trim().length === 0) return;\n        const attrs = node.attrs;\n        let id = getId(node);\n        if (idMap[id]) {\n          idMap[id] += 1;\n          id += `-#${idMap[id]}`;\n        } else {\n          idMap[id] = 1;\n        }\n        if (attrs.id !== id) {\n          found = true;\n          tr.setMeta(headingIdPluginKey, true).setNodeMarkup(pos, void 0, {\n            ...attrs,\n            id\n          });\n        }\n      }\n    });\n    if (found) view.dispatch(tr);\n  };\n  return new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.Plugin({\n    key: headingIdPluginKey,\n    view: (view) => {\n      updateId(view);\n      return {\n        update: (view2, prevState) => {\n          if (view2.state.doc.eq(prevState.doc)) return;\n          updateId(view2);\n        }\n      };\n    }\n  });\n});\nwithMeta(syncHeadingIdPlugin, {\n  displayName: \"Prose<syncHeadingIdPlugin>\",\n  group: \"Prose\"\n});\nconst syncListOrderPlugin = (0,_milkdown_utils__WEBPACK_IMPORTED_MODULE_1__.$prose)((ctx) => {\n  const syncOrderLabel = (view) => {\n    if (view.composing || !view.editable) return;\n    const orderedListType = orderedListSchema.type(ctx);\n    const bulletListType = bulletListSchema.type(ctx);\n    const listItemType = listItemSchema.type(ctx);\n    const state = view.state;\n    const handleNodeItem = (attrs, index) => {\n      let changed = false;\n      const expectedLabel = `${index + 1}.`;\n      if (attrs.label !== expectedLabel) {\n        attrs.label = expectedLabel;\n        changed = true;\n      }\n      return changed;\n    };\n    let tr = state.tr;\n    let needDispatch = false;\n    state.doc.descendants((node, pos, parent, index) => {\n      if (node.type === bulletListType) {\n        const base = node.maybeChild(0);\n        if ((base == null ? void 0 : base.type) === listItemType && base.attrs.listType === \"ordered\") {\n          needDispatch = true;\n          tr.setNodeMarkup(pos, orderedListType, { spread: \"true\" });\n          node.descendants((child, pos2, _parent, index2) => {\n            if (child.type === listItemType) {\n              const attrs = { ...child.attrs };\n              const changed = handleNodeItem(attrs, index2);\n              if (changed) tr = tr.setNodeMarkup(pos2, void 0, attrs);\n            }\n            return false;\n          });\n        }\n      } else if (node.type === listItemType && (parent == null ? void 0 : parent.type) === orderedListType) {\n        const attrs = { ...node.attrs };\n        let changed = false;\n        if (attrs.listType !== \"ordered\") {\n          attrs.listType = \"ordered\";\n          changed = true;\n        }\n        const base = parent == null ? void 0 : parent.maybeChild(0);\n        if (base) changed = handleNodeItem(attrs, index);\n        if (changed) {\n          tr = tr.setNodeMarkup(pos, void 0, attrs);\n          needDispatch = true;\n        }\n      }\n    });\n    if (needDispatch) view.dispatch(tr.setMeta(\"addToHistory\", false));\n  };\n  return new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.Plugin({\n    key: new _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.PluginKey(\"MILKDOWN_KEEP_LIST_ORDER\"),\n    view: (view) => {\n      syncOrderLabel(view);\n      return {\n        update: (view2) => {\n          syncOrderLabel(view2);\n        }\n      };\n    }\n  });\n});\nwithMeta(syncListOrderPlugin, {\n  displayName: \"Prose<syncListOrderPlugin>\",\n  group: \"Prose\"\n});\nconst plugins = [\n  hardbreakClearMarkPlugin,\n  hardbreakFilterNodes,\n  hardbreakFilterPlugin,\n  inlineNodesCursorPlugin,\n  remarkAddOrderInListPlugin,\n  remarkInlineLinkPlugin,\n  remarkLineBreak,\n  remarkHtmlTransformer,\n  remarkMarker,\n  remarkPreserveEmptyLinePlugin,\n  syncHeadingIdPlugin,\n  syncListOrderPlugin\n].flat();\nconst commonmark = [\n  schema,\n  inputRules,\n  markInputRules,\n  commands,\n  keymap,\n  plugins\n].flat();\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/preset-commonmark/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/prose/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@milkdown/prose/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browser: () => (/* binding */ browser),\n/* harmony export */   calculateNodePosition: () => (/* binding */ calculateNodePosition),\n/* harmony export */   calculateTextPosition: () => (/* binding */ calculateTextPosition),\n/* harmony export */   cloneTr: () => (/* binding */ cloneTr),\n/* harmony export */   customInputRules: () => (/* binding */ customInputRules),\n/* harmony export */   customInputRulesKey: () => (/* binding */ customInputRulesKey),\n/* harmony export */   equalNodeType: () => (/* binding */ equalNodeType),\n/* harmony export */   findChildren: () => (/* binding */ findChildren),\n/* harmony export */   findChildrenByMark: () => (/* binding */ findChildrenByMark),\n/* harmony export */   findParent: () => (/* binding */ findParent),\n/* harmony export */   findParentNode: () => (/* binding */ findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* binding */ findParentNodeClosestToPos),\n/* harmony export */   findParentNodeType: () => (/* binding */ findParentNodeType),\n/* harmony export */   findSelectedNodeOfType: () => (/* binding */ findSelectedNodeOfType),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   getMarkFromSchema: () => (/* binding */ getMarkFromSchema),\n/* harmony export */   getNodeFromSchema: () => (/* binding */ getNodeFromSchema),\n/* harmony export */   markRule: () => (/* binding */ markRule),\n/* harmony export */   nodeRule: () => (/* binding */ nodeRule),\n/* harmony export */   posToDOMRect: () => (/* binding */ posToDOMRect)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var prosemirror_inputrules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-inputrules */ \"(ssr)/./node_modules/prosemirror-inputrules/dist/index.js\");\n/* harmony import */ var _milkdown_exception__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @milkdown/exception */ \"(ssr)/./node_modules/@milkdown/exception/lib/index.js\");\n\n\n\n\nconst nav = typeof navigator != \"undefined\" ? navigator : null;\nconst doc = typeof document != \"undefined\" ? document : null;\nconst agent = nav && nav.userAgent || \"\";\nconst ie_edge = /Edge\\/(\\d+)/.exec(agent);\nconst ie_upto10 = /MSIE \\d/.exec(agent);\nconst ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(agent);\nconst ie = !!(ie_upto10 || ie_11up || ie_edge);\nconst ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;\nconst gecko = !ie && /gecko\\/(\\d+)/i.test(agent);\nconst gecko_version = gecko && +(/Firefox\\/(\\d+)/.exec(agent) || [0, 0])[1];\nconst _chrome = !ie && /Chrome\\/(\\d+)/.exec(agent);\nconst chrome = !!_chrome;\nconst chrome_version = _chrome ? +_chrome[1] : 0;\nconst safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);\nconst ios = safari && (/Mobile\\/\\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);\nconst mac = ios || (nav ? /Mac/.test(nav.platform) : false);\nconst android = /Android \\d/.test(agent);\nconst webkit = !!doc && \"webkitFontSmoothing\" in doc.documentElement.style;\nconst webkit_version = webkit ? +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;\n\nvar browser = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  android: android,\n  chrome: chrome,\n  chrome_version: chrome_version,\n  gecko: gecko,\n  gecko_version: gecko_version,\n  ie: ie,\n  ie_version: ie_version,\n  ios: ios,\n  mac: mac,\n  safari: safari,\n  webkit: webkit,\n  webkit_version: webkit_version\n});\n\nfunction run(view, from, to, text, rules, plugin) {\n  if (view.composing) return false;\n  const state = view.state;\n  const $from = state.doc.resolve(from);\n  if ($from.parent.type.spec.code) return false;\n  const textBefore = $from.parent.textBetween(\n    Math.max(0, $from.parentOffset - 500),\n    $from.parentOffset,\n    void 0,\n    \"\\uFFFC\"\n  ) + text;\n  for (let _matcher of rules) {\n    const matcher = _matcher;\n    const match = matcher.match.exec(textBefore);\n    const tr = match && match[0] && matcher.handler(state, match, from - (match[0].length - text.length), to);\n    if (!tr) continue;\n    if (matcher.undoable !== false)\n      tr.setMeta(plugin, { transform: tr, from, to, text });\n    view.dispatch(tr);\n    return true;\n  }\n  return false;\n}\nconst customInputRulesKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"MILKDOWN_CUSTOM_INPUTRULES\");\nfunction customInputRules({ rules }) {\n  const plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n    key: customInputRulesKey,\n    isInputRules: true,\n    state: {\n      init() {\n        return null;\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(this);\n        if (stored) return stored;\n        return tr.selectionSet || tr.docChanged ? null : prev;\n      }\n    },\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run(view, from, to, text, rules, plugin);\n      },\n      handleDOMEvents: {\n        compositionend: (view) => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection;\n            if ($cursor) run(view, $cursor.pos, $cursor.pos, \"\", rules, plugin);\n          });\n          return false;\n        }\n      },\n      handleKeyDown(view, event) {\n        if (event.key !== \"Enter\") return false;\n        const { $cursor } = view.state.selection;\n        if ($cursor)\n          return run(view, $cursor.pos, $cursor.pos, \"\\n\", rules, plugin);\n        return false;\n      }\n    }\n  });\n  return plugin;\n}\n\nfunction markRule(regexp, markType, options = {}) {\n  return new prosemirror_inputrules__WEBPACK_IMPORTED_MODULE_1__.InputRule(regexp, (state, match, start, end) => {\n    var _a, _b, _c, _d;\n    const { tr } = state;\n    const matchLength = match.length;\n    let group = match[matchLength - 1];\n    let fullMatch = match[0];\n    let initialStoredMarks = [];\n    let markEnd = end;\n    const captured = {\n      group,\n      fullMatch,\n      start,\n      end\n    };\n    const result = (_a = options.updateCaptured) == null ? void 0 : _a.call(options, captured);\n    Object.assign(captured, result);\n    ({ group, fullMatch, start, end } = captured);\n    if (fullMatch === null) return null;\n    if ((group == null ? void 0 : group.trim()) === \"\") return null;\n    if (group) {\n      const startSpaces = fullMatch.search(/\\S/);\n      const textStart = start + fullMatch.indexOf(group);\n      const textEnd = textStart + group.length;\n      initialStoredMarks = (_b = tr.storedMarks) != null ? _b : [];\n      if (textEnd < end) tr.delete(textEnd, end);\n      if (textStart > start) tr.delete(start + startSpaces, textStart);\n      markEnd = start + startSpaces + group.length;\n      const attrs = (_c = options.getAttr) == null ? void 0 : _c.call(options, match);\n      tr.addMark(start, markEnd, markType.create(attrs));\n      tr.setStoredMarks(initialStoredMarks);\n      (_d = options.beforeDispatch) == null ? void 0 : _d.call(options, { match, start, end, tr });\n    }\n    return tr;\n  });\n}\n\nfunction nodeRule(regexp, nodeType, options = {}) {\n  return new prosemirror_inputrules__WEBPACK_IMPORTED_MODULE_1__.InputRule(regexp, (state, match, start, end) => {\n    var _a, _b, _c;\n    const { tr } = state;\n    let group = match[1];\n    let fullMatch = match[0];\n    const captured = {\n      group,\n      fullMatch,\n      start,\n      end\n    };\n    const result = (_a = options.updateCaptured) == null ? void 0 : _a.call(options, captured);\n    Object.assign(captured, result);\n    ({ group, fullMatch, start, end } = captured);\n    if (fullMatch === null) return null;\n    if (!group || group.trim() === \"\") return null;\n    const attrs = (_b = options.getAttr) == null ? void 0 : _b.call(options, match);\n    const node = nodeType.createAndFill(attrs);\n    if (node) {\n      tr.replaceRangeWith(\n        nodeType.isBlock ? tr.doc.resolve(start).before() : start,\n        end,\n        node\n      );\n      (_c = options.beforeDispatch) == null ? void 0 : _c.call(options, {\n        match: [fullMatch, group != null ? group : \"\"],\n        start,\n        end,\n        tr\n      });\n    }\n    return tr;\n  });\n}\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction calculateNodePosition(view, target, handler) {\n  const state = view.state;\n  const { from } = state.selection;\n  const { node } = view.domAtPos(from);\n  const element = node instanceof Text ? node.parentElement : node;\n  if (!(element instanceof HTMLElement)) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_2__.expectDomTypeError)(element);\n  const selectedNodeRect = element.getBoundingClientRect();\n  const targetNodeRect = target.getBoundingClientRect();\n  const parent = target.parentElement;\n  if (!parent) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_2__.expectDomTypeError)(parent);\n  const parentNodeRect = parent.getBoundingClientRect();\n  const [top, left] = handler(selectedNodeRect, targetNodeRect, parentNodeRect);\n  target.style.top = `${top}px`;\n  target.style.left = `${left}px`;\n}\nfunction calculateTextPosition(view, target, handler) {\n  const state = view.state;\n  const { from, to } = state.selection;\n  const start = view.coordsAtPos(from);\n  const end = view.coordsAtPos(to);\n  const targetNodeRect = target.getBoundingClientRect();\n  const parent = target.parentElement;\n  if (!parent) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_2__.missingRootElement)();\n  const parentNodeRect = parent.getBoundingClientRect();\n  const [top, left] = handler(start, end, targetNodeRect, parentNodeRect);\n  target.style.top = `${top}px`;\n  target.style.left = `${left}px`;\n}\nfunction minMax(value = 0, min = 0, max = 0) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction posToDOMRect(view, from, to) {\n  const minPos = 0;\n  const maxPos = view.state.doc.content.size;\n  const resolvedFrom = minMax(from, minPos, maxPos);\n  const resolvedEnd = minMax(to, minPos, maxPos);\n  const start = view.coordsAtPos(resolvedFrom);\n  const end = view.coordsAtPos(resolvedEnd, -1);\n  const top = Math.min(start.top, end.top);\n  const bottom = Math.max(start.bottom, end.bottom);\n  const left = Math.min(start.left, end.left);\n  const right = Math.max(start.right, end.right);\n  const width = right - left;\n  const height = bottom - top;\n  const x = left;\n  const y = top;\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y\n  };\n  return __spreadProps(__spreadValues({}, data), {\n    toJSON: () => data\n  });\n}\n\nfunction cloneTr(tr) {\n  return Object.assign(Object.create(tr), tr).setTime(Date.now());\n}\nfunction equalNodeType(nodeType, node) {\n  return Array.isArray(nodeType) && nodeType.includes(node.type) || node.type === nodeType;\n}\n\nfunction flatten(node, descend = true) {\n  const result = [];\n  node.descendants((child, pos) => {\n    result.push({ node: child, pos });\n    if (!descend) return false;\n    return void 0;\n  });\n  return result;\n}\nfunction findChildren(predicate) {\n  return (node, descend) => flatten(node, descend).filter((child) => predicate(child.node));\n}\nfunction findChildrenByMark(node, markType, descend) {\n  return findChildren((child) => Boolean(markType.isInSet(child.marks)))(\n    node,\n    descend\n  );\n}\nfunction findParent(predicate) {\n  return ($pos) => {\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\n      const node = $pos.node(depth);\n      if (predicate(node)) {\n        const from = $pos.before(depth);\n        const to = $pos.after(depth);\n        return {\n          from,\n          to,\n          node\n        };\n      }\n    }\n    return void 0;\n  };\n}\nfunction findParentNodeType($pos, nodeType) {\n  return findParent((node) => node.type === nodeType)($pos);\n}\n\nfunction getNodeFromSchema(type, schema) {\n  const target = schema.nodes[type];\n  if (!target) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_2__.getAtomFromSchemaFail)(\"node\", type);\n  return target;\n}\nfunction getMarkFromSchema(type, schema) {\n  const target = schema.marks[type];\n  if (!target) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_2__.getAtomFromSchemaFail)(\"mark\", type);\n  return target;\n}\n\nfunction findParentNodeClosestToPos(predicate) {\n  return ($pos) => {\n    for (let i = $pos.depth; i > 0; i--) {\n      const node = $pos.node(i);\n      if (predicate(node)) {\n        return {\n          pos: i > 0 ? $pos.before(i) : 0,\n          start: $pos.start(i),\n          depth: i,\n          node\n        };\n      }\n    }\n    return void 0;\n  };\n}\nfunction findParentNode(predicate) {\n  return (selection) => {\n    return findParentNodeClosestToPos(predicate)(selection.$from);\n  };\n}\nfunction findSelectedNodeOfType(selection, nodeType) {\n  if (!(selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection)) return;\n  const { node, $from } = selection;\n  if (equalNodeType(nodeType, node))\n    return {\n      node,\n      pos: $from.pos,\n      start: $from.start($from.depth),\n      depth: $from.depth\n    };\n  return void 0;\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/prose/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/react/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@milkdown/react/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Milkdown: () => (/* binding */ Milkdown),\n/* harmony export */   MilkdownProvider: () => (/* binding */ MilkdownProvider),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   useInstance: () => (/* binding */ useInstance)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\nconst editorInfoContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(\n  {}\n);\nfunction useGetEditor() {\n  const {\n    dom,\n    editor: editorRef,\n    setLoading,\n    editorFactory: getEditor\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(editorInfoContext);\n  const domRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const div = domRef.current;\n    if (!getEditor) return;\n    if (!div) return;\n    dom.current = div;\n    const editor = getEditor(div);\n    if (!editor) return;\n    setLoading(true);\n    editor.create().then((editor2) => {\n      editorRef.current = editor2;\n    }).finally(() => {\n      setLoading(false);\n    }).catch(console.error);\n    return () => {\n      editor.destroy().catch(console.error);\n    };\n  }, [dom, editorRef, getEditor, setLoading]);\n  return domRef;\n}\nconst Milkdown = () => {\n  const domRef = useGetEditor();\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { \"data-milkdown-root\": true, ref: domRef });\n};\nconst MilkdownProvider = ({ children }) => {\n  const dom = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n  const [editorFactory, setEditorFactory] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    void 0\n  );\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(void 0);\n  const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n  const editorInfoCtx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      loading,\n      dom,\n      editor,\n      setLoading,\n      editorFactory,\n      setEditorFactory\n    }),\n    [loading, editorFactory]\n  );\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(editorInfoContext.Provider, { value: editorInfoCtx }, children);\n};\nfunction useEditor(getEditor, deps = []) {\n  const editorInfo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(editorInfoContext);\n  const factory = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(getEditor, deps);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(() => {\n    editorInfo.setEditorFactory(() => factory);\n  }, [editorInfo, factory]);\n  return {\n    loading: editorInfo.loading,\n    get: () => editorInfo.editor.current\n  };\n}\nfunction useInstance() {\n  const editorInfo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(editorInfoContext);\n  const getInstance = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    return editorInfo.editor.current;\n  }, [editorInfo.editor]);\n  return [editorInfo.loading, getInstance];\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pbGtkb3duL3JlYWN0L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2SDtBQUM3SCwwQkFBMEIsb0RBQWE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksRUFBRSxpREFBVTtBQUNoQixpQkFBaUIsNkNBQU07QUFDdkIsRUFBRSxnREFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0RBQW1CLFVBQVUseUNBQXlDO0FBQy9GO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEMsY0FBYyw2Q0FBTTtBQUNwQiw0Q0FBNEMsK0NBQVE7QUFDcEQ7QUFDQTtBQUNBLGlCQUFpQiw2Q0FBTTtBQUN2QixnQ0FBZ0MsK0NBQVE7QUFDeEMsd0JBQXdCLDhDQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx5QkFBeUIsZ0RBQW1CLCtCQUErQixzQkFBc0I7QUFDakc7QUFDQTtBQUNBLHFCQUFxQixpREFBVTtBQUMvQixrQkFBa0Isa0RBQVc7QUFDN0IsRUFBRSxzREFBZTtBQUNqQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaURBQVU7QUFDL0Isc0JBQXNCLGtEQUFXO0FBQ2pDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFNRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbjIvRG9jdW1lbnRzL25vdGVDYXJkL25vZGVfbW9kdWxlcy9AbWlsa2Rvd24vcmVhY3QvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZU1lbW8sIHVzZUNhbGxiYWNrLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmNvbnN0IGVkaXRvckluZm9Db250ZXh0ID0gY3JlYXRlQ29udGV4dChcbiAge31cbik7XG5mdW5jdGlvbiB1c2VHZXRFZGl0b3IoKSB7XG4gIGNvbnN0IHtcbiAgICBkb20sXG4gICAgZWRpdG9yOiBlZGl0b3JSZWYsXG4gICAgc2V0TG9hZGluZyxcbiAgICBlZGl0b3JGYWN0b3J5OiBnZXRFZGl0b3JcbiAgfSA9IHVzZUNvbnRleHQoZWRpdG9ySW5mb0NvbnRleHQpO1xuICBjb25zdCBkb21SZWYgPSB1c2VSZWYobnVsbCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZGl2ID0gZG9tUmVmLmN1cnJlbnQ7XG4gICAgaWYgKCFnZXRFZGl0b3IpIHJldHVybjtcbiAgICBpZiAoIWRpdikgcmV0dXJuO1xuICAgIGRvbS5jdXJyZW50ID0gZGl2O1xuICAgIGNvbnN0IGVkaXRvciA9IGdldEVkaXRvcihkaXYpO1xuICAgIGlmICghZWRpdG9yKSByZXR1cm47XG4gICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICBlZGl0b3IuY3JlYXRlKCkudGhlbigoZWRpdG9yMikgPT4ge1xuICAgICAgZWRpdG9yUmVmLmN1cnJlbnQgPSBlZGl0b3IyO1xuICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgfSkuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGVkaXRvci5kZXN0cm95KCkuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgfTtcbiAgfSwgW2RvbSwgZWRpdG9yUmVmLCBnZXRFZGl0b3IsIHNldExvYWRpbmddKTtcbiAgcmV0dXJuIGRvbVJlZjtcbn1cbmNvbnN0IE1pbGtkb3duID0gKCkgPT4ge1xuICBjb25zdCBkb21SZWYgPSB1c2VHZXRFZGl0b3IoKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgXCJkYXRhLW1pbGtkb3duLXJvb3RcIjogdHJ1ZSwgcmVmOiBkb21SZWYgfSk7XG59O1xuY29uc3QgTWlsa2Rvd25Qcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgZG9tID0gdXNlUmVmKHZvaWQgMCk7XG4gIGNvbnN0IFtlZGl0b3JGYWN0b3J5LCBzZXRFZGl0b3JGYWN0b3J5XSA9IHVzZVN0YXRlKFxuICAgIHZvaWQgMFxuICApO1xuICBjb25zdCBlZGl0b3IgPSB1c2VSZWYodm9pZCAwKTtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IGVkaXRvckluZm9DdHggPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBsb2FkaW5nLFxuICAgICAgZG9tLFxuICAgICAgZWRpdG9yLFxuICAgICAgc2V0TG9hZGluZyxcbiAgICAgIGVkaXRvckZhY3RvcnksXG4gICAgICBzZXRFZGl0b3JGYWN0b3J5XG4gICAgfSksXG4gICAgW2xvYWRpbmcsIGVkaXRvckZhY3RvcnldXG4gICk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChlZGl0b3JJbmZvQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogZWRpdG9ySW5mb0N0eCB9LCBjaGlsZHJlbik7XG59O1xuZnVuY3Rpb24gdXNlRWRpdG9yKGdldEVkaXRvciwgZGVwcyA9IFtdKSB7XG4gIGNvbnN0IGVkaXRvckluZm8gPSB1c2VDb250ZXh0KGVkaXRvckluZm9Db250ZXh0KTtcbiAgY29uc3QgZmFjdG9yeSA9IHVzZUNhbGxiYWNrKGdldEVkaXRvciwgZGVwcyk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgZWRpdG9ySW5mby5zZXRFZGl0b3JGYWN0b3J5KCgpID0+IGZhY3RvcnkpO1xuICB9LCBbZWRpdG9ySW5mbywgZmFjdG9yeV0pO1xuICByZXR1cm4ge1xuICAgIGxvYWRpbmc6IGVkaXRvckluZm8ubG9hZGluZyxcbiAgICBnZXQ6ICgpID0+IGVkaXRvckluZm8uZWRpdG9yLmN1cnJlbnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZUluc3RhbmNlKCkge1xuICBjb25zdCBlZGl0b3JJbmZvID0gdXNlQ29udGV4dChlZGl0b3JJbmZvQ29udGV4dCk7XG4gIGNvbnN0IGdldEluc3RhbmNlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiBlZGl0b3JJbmZvLmVkaXRvci5jdXJyZW50O1xuICB9LCBbZWRpdG9ySW5mby5lZGl0b3JdKTtcbiAgcmV0dXJuIFtlZGl0b3JJbmZvLmxvYWRpbmcsIGdldEluc3RhbmNlXTtcbn1cbmV4cG9ydCB7XG4gIE1pbGtkb3duLFxuICBNaWxrZG93blByb3ZpZGVyLFxuICB1c2VFZGl0b3IsXG4gIHVzZUluc3RhbmNlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/react/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/theme-nord/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@milkdown/theme-nord/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nord: () => (/* binding */ nord)\n/* harmony export */ });\n/* harmony import */ var _milkdown_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @milkdown/core */ \"(ssr)/./node_modules/@milkdown/core/lib/index.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n\n\nfunction nord(ctx) {\n  ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_1__.editorViewOptionsCtx, (prev) => {\n    const prevClass = prev.attributes;\n    return {\n      ...prev,\n      attributes: (state) => {\n        const attrs = typeof prevClass === \"function\" ? prevClass(state) : prevClass;\n        return {\n          ...attrs,\n          class: (0,clsx__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\n            \"prose dark:prose-invert\",\n            (attrs == null ? void 0 : attrs.class) || \"\",\n            \"milkdown-theme-nord\"\n          )\n        };\n      }\n    };\n  });\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pbGtkb3duL3RoZW1lLW5vcmQvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRDtBQUM5QjtBQUN4QjtBQUNBLGFBQWEsZ0VBQW9CO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdEQUFJO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3JhaW4yL0RvY3VtZW50cy9ub3RlQ2FyZC9ub2RlX21vZHVsZXMvQG1pbGtkb3duL3RoZW1lLW5vcmQvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVkaXRvclZpZXdPcHRpb25zQ3R4IH0gZnJvbSBcIkBtaWxrZG93bi9jb3JlXCI7XG5pbXBvcnQgY2xzeCBmcm9tIFwiY2xzeFwiO1xuZnVuY3Rpb24gbm9yZChjdHgpIHtcbiAgY3R4LnVwZGF0ZShlZGl0b3JWaWV3T3B0aW9uc0N0eCwgKHByZXYpID0+IHtcbiAgICBjb25zdCBwcmV2Q2xhc3MgPSBwcmV2LmF0dHJpYnV0ZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBhdHRyaWJ1dGVzOiAoc3RhdGUpID0+IHtcbiAgICAgICAgY29uc3QgYXR0cnMgPSB0eXBlb2YgcHJldkNsYXNzID09PSBcImZ1bmN0aW9uXCIgPyBwcmV2Q2xhc3Moc3RhdGUpIDogcHJldkNsYXNzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLmF0dHJzLFxuICAgICAgICAgIGNsYXNzOiBjbHN4KFxuICAgICAgICAgICAgXCJwcm9zZSBkYXJrOnByb3NlLWludmVydFwiLFxuICAgICAgICAgICAgKGF0dHJzID09IG51bGwgPyB2b2lkIDAgOiBhdHRycy5jbGFzcykgfHwgXCJcIixcbiAgICAgICAgICAgIFwibWlsa2Rvd24tdGhlbWUtbm9yZFwiXG4gICAgICAgICAgKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuZXhwb3J0IHtcbiAgbm9yZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/theme-nord/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/transformer/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@milkdown/transformer/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParserState: () => (/* binding */ ParserState),\n/* harmony export */   SerializerState: () => (/* binding */ SerializerState),\n/* harmony export */   Stack: () => (/* binding */ Stack),\n/* harmony export */   StackElement: () => (/* binding */ StackElement)\n/* harmony export */ });\n/* harmony import */ var _milkdown_exception__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @milkdown/exception */ \"(ssr)/./node_modules/@milkdown/exception/lib/index.js\");\n/* harmony import */ var _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @milkdown/prose/model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _marks, _hasText, _maybeMerge, _matchTarget, _runNode, _closeNodeAndPush, _addNodeAndPush, _marks2, _matchTarget2, _runProseNode, _runProseMark, _runNode2, _searchType, _maybeMergeChildren, _createMarkdownNode, _moveSpaces, _closeNodeAndPush2, _addNodeAndPush2, _openMark, _closeMark;\n\n\nclass StackElement {\n}\nclass Stack {\n  constructor() {\n    this.elements = [];\n    this.size = () => {\n      return this.elements.length;\n    };\n    this.top = () => {\n      return this.elements.at(-1);\n    };\n    this.push = (node) => {\n      var _a;\n      (_a = this.top()) == null ? void 0 : _a.push(node);\n    };\n    this.open = (node) => {\n      this.elements.push(node);\n    };\n    this.close = () => {\n      const el = this.elements.pop();\n      if (!el) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_0__.stackOverFlow)();\n      return el;\n    };\n  }\n}\nclass ParserStackElement extends StackElement {\n  constructor(type, content, attrs) {\n    super();\n    this.type = type;\n    this.content = content;\n    this.attrs = attrs;\n  }\n  push(node, ...rest) {\n    this.content.push(node, ...rest);\n  }\n  pop() {\n    return this.content.pop();\n  }\n  static create(type, content, attrs) {\n    return new ParserStackElement(type, content, attrs);\n  }\n}\nconst _ParserState = class _ParserState extends Stack {\n  /// @internal\n  constructor(schema) {\n    super();\n    __privateAdd(this, _marks);\n    __privateAdd(this, _hasText);\n    __privateAdd(this, _maybeMerge);\n    __privateAdd(this, _matchTarget);\n    __privateAdd(this, _runNode);\n    __privateAdd(this, _closeNodeAndPush);\n    __privateAdd(this, _addNodeAndPush);\n    __privateSet(this, _marks, _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_1__.Mark.none);\n    __privateSet(this, _hasText, (node) => node.isText);\n    __privateSet(this, _maybeMerge, (a, b) => {\n      if (__privateGet(this, _hasText).call(this, a) && __privateGet(this, _hasText).call(this, b) && _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_1__.Mark.sameSet(a.marks, b.marks))\n        return this.schema.text(a.text + b.text, a.marks);\n      return void 0;\n    });\n    __privateSet(this, _matchTarget, (node) => {\n      const result = Object.values({\n        ...this.schema.nodes,\n        ...this.schema.marks\n      }).find((x) => {\n        const spec = x.spec;\n        return spec.parseMarkdown.match(node);\n      });\n      if (!result) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_0__.parserMatchError)(node);\n      return result;\n    });\n    __privateSet(this, _runNode, (node) => {\n      const type = __privateGet(this, _matchTarget).call(this, node);\n      const spec = type.spec;\n      spec.parseMarkdown.runner(this, node, type);\n    });\n    this.injectRoot = (node, nodeType, attrs) => {\n      this.openNode(nodeType, attrs);\n      this.next(node.children);\n      return this;\n    };\n    this.openNode = (nodeType, attrs) => {\n      this.open(ParserStackElement.create(nodeType, [], attrs));\n      return this;\n    };\n    __privateSet(this, _closeNodeAndPush, () => {\n      __privateSet(this, _marks, _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_1__.Mark.none);\n      const element = this.close();\n      return __privateGet(this, _addNodeAndPush).call(this, element.type, element.attrs, element.content);\n    });\n    this.closeNode = () => {\n      try {\n        __privateGet(this, _closeNodeAndPush).call(this);\n      } catch (e) {\n        console.error(e);\n      }\n      return this;\n    };\n    __privateSet(this, _addNodeAndPush, (nodeType, attrs, content) => {\n      const node = nodeType.createAndFill(attrs, content, __privateGet(this, _marks));\n      if (!node) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_0__.createNodeInParserFail)(nodeType, attrs, content);\n      this.push(node);\n      return node;\n    });\n    this.addNode = (nodeType, attrs, content) => {\n      try {\n        __privateGet(this, _addNodeAndPush).call(this, nodeType, attrs, content);\n      } catch (e) {\n        console.error(e);\n      }\n      return this;\n    };\n    this.openMark = (markType, attrs) => {\n      const mark = markType.create(attrs);\n      __privateSet(this, _marks, mark.addToSet(__privateGet(this, _marks)));\n      return this;\n    };\n    this.closeMark = (markType) => {\n      __privateSet(this, _marks, markType.removeFromSet(__privateGet(this, _marks)));\n      return this;\n    };\n    this.addText = (text) => {\n      try {\n        const topElement = this.top();\n        if (!topElement) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_0__.stackOverFlow)();\n        const prevNode = topElement.pop();\n        const currNode = this.schema.text(text, __privateGet(this, _marks));\n        if (!prevNode) {\n          topElement.push(currNode);\n          return this;\n        }\n        const merged = __privateGet(this, _maybeMerge).call(this, prevNode, currNode);\n        if (merged) {\n          topElement.push(merged);\n          return this;\n        }\n        topElement.push(prevNode, currNode);\n        return this;\n      } catch (e) {\n        console.error(e);\n        return this;\n      }\n    };\n    this.build = () => {\n      let doc;\n      do\n        doc = __privateGet(this, _closeNodeAndPush).call(this);\n      while (this.size());\n      return doc;\n    };\n    this.next = (nodes = []) => {\n      [nodes].flat().forEach((node) => __privateGet(this, _runNode).call(this, node));\n      return this;\n    };\n    this.toDoc = () => this.build();\n    this.run = (remark, markdown) => {\n      const tree = remark.runSync(\n        remark.parse(markdown),\n        markdown\n      );\n      this.next(tree);\n      return this;\n    };\n    this.schema = schema;\n  }\n};\n_marks = new WeakMap();\n_hasText = new WeakMap();\n_maybeMerge = new WeakMap();\n_matchTarget = new WeakMap();\n_runNode = new WeakMap();\n_closeNodeAndPush = new WeakMap();\n_addNodeAndPush = new WeakMap();\n_ParserState.create = (schema, remark) => {\n  const state = new _ParserState(schema);\n  return (text) => {\n    state.run(remark, text);\n    return state.toDoc();\n  };\n};\nlet ParserState = _ParserState;\nconst _SerializerStackElement = class _SerializerStackElement extends StackElement {\n  constructor(type, children, value, props = {}) {\n    super();\n    this.type = type;\n    this.children = children;\n    this.value = value;\n    this.props = props;\n    this.push = (node, ...rest) => {\n      if (!this.children) this.children = [];\n      this.children.push(node, ...rest);\n    };\n    this.pop = () => {\n      var _a;\n      return (_a = this.children) == null ? void 0 : _a.pop();\n    };\n  }\n};\n_SerializerStackElement.create = (type, children, value, props = {}) => new _SerializerStackElement(type, children, value, props);\nlet SerializerStackElement = _SerializerStackElement;\nconst isFragment = (x) => Object.prototype.hasOwnProperty.call(x, \"size\");\nconst _SerializerState = class _SerializerState extends Stack {\n  /// @internal\n  constructor(schema) {\n    super();\n    __privateAdd(this, _marks2);\n    __privateAdd(this, _matchTarget2);\n    __privateAdd(this, _runProseNode);\n    __privateAdd(this, _runProseMark);\n    __privateAdd(this, _runNode2);\n    __privateAdd(this, _searchType);\n    __privateAdd(this, _maybeMergeChildren);\n    __privateAdd(this, _createMarkdownNode);\n    __privateAdd(this, _moveSpaces);\n    __privateAdd(this, _closeNodeAndPush2);\n    __privateAdd(this, _addNodeAndPush2);\n    __privateAdd(this, _openMark);\n    __privateAdd(this, _closeMark);\n    __privateSet(this, _marks2, _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_1__.Mark.none);\n    __privateSet(this, _matchTarget2, (node) => {\n      const result = Object.values({\n        ...this.schema.nodes,\n        ...this.schema.marks\n      }).find((x) => {\n        const spec = x.spec;\n        return spec.toMarkdown.match(node);\n      });\n      if (!result) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_0__.serializerMatchError)(node.type);\n      return result;\n    });\n    __privateSet(this, _runProseNode, (node) => {\n      const type = __privateGet(this, _matchTarget2).call(this, node);\n      const spec = type.spec;\n      return spec.toMarkdown.runner(this, node);\n    });\n    __privateSet(this, _runProseMark, (mark, node) => {\n      const type = __privateGet(this, _matchTarget2).call(this, mark);\n      const spec = type.spec;\n      return spec.toMarkdown.runner(this, mark, node);\n    });\n    __privateSet(this, _runNode2, (node) => {\n      const { marks } = node;\n      const getPriority = (x) => x.type.spec.priority ?? 50;\n      const tmp = [...marks].sort((a, b) => getPriority(a) - getPriority(b));\n      const unPreventNext = tmp.every((mark) => !__privateGet(this, _runProseMark).call(this, mark, node));\n      if (unPreventNext) __privateGet(this, _runProseNode).call(this, node);\n      marks.forEach((mark) => __privateGet(this, _closeMark).call(this, mark));\n    });\n    __privateSet(this, _searchType, (child, type) => {\n      var _a;\n      if (child.type === type) return child;\n      if (((_a = child.children) == null ? void 0 : _a.length) !== 1) return child;\n      const searchNode = (node2) => {\n        var _a2;\n        if (node2.type === type) return node2;\n        if (((_a2 = node2.children) == null ? void 0 : _a2.length) !== 1) return null;\n        const [firstChild] = node2.children;\n        if (!firstChild) return null;\n        return searchNode(firstChild);\n      };\n      const target = searchNode(child);\n      if (!target) return child;\n      const tmp = target.children ? [...target.children] : void 0;\n      const node = { ...child, children: tmp };\n      node.children = tmp;\n      target.children = [node];\n      return target;\n    });\n    __privateSet(this, _maybeMergeChildren, (node) => {\n      const { children } = node;\n      if (!children) return node;\n      node.children = children.reduce((nextChildren, child, index) => {\n        if (index === 0) return [child];\n        const last = nextChildren.at(-1);\n        if (last && last.isMark && child.isMark) {\n          child = __privateGet(this, _searchType).call(this, child, last.type);\n          const { children: currChildren, ...currRest } = child;\n          const { children: prevChildren, ...prevRest } = last;\n          if (child.type === last.type && currChildren && prevChildren && JSON.stringify(currRest) === JSON.stringify(prevRest)) {\n            const next = {\n              ...prevRest,\n              children: [...prevChildren, ...currChildren]\n            };\n            return nextChildren.slice(0, -1).concat(__privateGet(this, _maybeMergeChildren).call(this, next));\n          }\n        }\n        return nextChildren.concat(child);\n      }, []);\n      return node;\n    });\n    __privateSet(this, _createMarkdownNode, (element) => {\n      const node = {\n        ...element.props,\n        type: element.type\n      };\n      if (element.children) node.children = element.children;\n      if (element.value) node.value = element.value;\n      return node;\n    });\n    this.openNode = (type, value, props) => {\n      this.open(SerializerStackElement.create(type, void 0, value, props));\n      return this;\n    };\n    __privateSet(this, _moveSpaces, (element, onPush) => {\n      let startSpaces = \"\";\n      let endSpaces = \"\";\n      const children = element.children;\n      let first = -1;\n      let last = -1;\n      const findIndex = (node) => {\n        if (!node) return;\n        node.forEach((child, index) => {\n          if (child.type === \"text\" && child.value) {\n            if (first < 0) first = index;\n            last = index;\n          }\n        });\n      };\n      if (children) {\n        findIndex(children);\n        const lastChild = children == null ? void 0 : children[last];\n        const firstChild = children == null ? void 0 : children[first];\n        if (lastChild && lastChild.value.endsWith(\" \")) {\n          endSpaces = lastChild.value.match(/ +$/)[0];\n          lastChild.value = lastChild.value.trimEnd();\n        }\n        if (firstChild && firstChild.value.startsWith(\" \")) {\n          startSpaces = firstChild.value.match(/^ +/)[0];\n          firstChild.value = firstChild.value.trimStart();\n        }\n      }\n      if (startSpaces.length) __privateGet(this, _addNodeAndPush2).call(this, \"text\", void 0, startSpaces);\n      const result = onPush();\n      if (endSpaces.length) __privateGet(this, _addNodeAndPush2).call(this, \"text\", void 0, endSpaces);\n      return result;\n    });\n    __privateSet(this, _closeNodeAndPush2, (trim = false) => {\n      const element = this.close();\n      const onPush = () => __privateGet(this, _addNodeAndPush2).call(this, element.type, element.children, element.value, element.props);\n      if (trim) return __privateGet(this, _moveSpaces).call(this, element, onPush);\n      return onPush();\n    });\n    this.closeNode = () => {\n      __privateGet(this, _closeNodeAndPush2).call(this);\n      return this;\n    };\n    __privateSet(this, _addNodeAndPush2, (type, children, value, props) => {\n      const element = SerializerStackElement.create(type, children, value, props);\n      const node = __privateGet(this, _maybeMergeChildren).call(this, __privateGet(this, _createMarkdownNode).call(this, element));\n      this.push(node);\n      return node;\n    });\n    this.addNode = (type, children, value, props) => {\n      __privateGet(this, _addNodeAndPush2).call(this, type, children, value, props);\n      return this;\n    };\n    __privateSet(this, _openMark, (mark, type, value, props) => {\n      const isIn = mark.isInSet(__privateGet(this, _marks2));\n      if (isIn) return this;\n      __privateSet(this, _marks2, mark.addToSet(__privateGet(this, _marks2)));\n      return this.openNode(type, value, { ...props, isMark: true });\n    });\n    __privateSet(this, _closeMark, (mark) => {\n      const isIn = mark.isInSet(__privateGet(this, _marks2));\n      if (!isIn) return;\n      __privateSet(this, _marks2, mark.type.removeFromSet(__privateGet(this, _marks2)));\n      __privateGet(this, _closeNodeAndPush2).call(this, true);\n    });\n    this.withMark = (mark, type, value, props) => {\n      __privateGet(this, _openMark).call(this, mark, type, value, props);\n      return this;\n    };\n    this.closeMark = (mark) => {\n      __privateGet(this, _closeMark).call(this, mark);\n      return this;\n    };\n    this.build = () => {\n      let doc = null;\n      do\n        doc = __privateGet(this, _closeNodeAndPush2).call(this);\n      while (this.size());\n      return doc;\n    };\n    this.next = (nodes) => {\n      if (isFragment(nodes)) {\n        nodes.forEach((node) => {\n          __privateGet(this, _runNode2).call(this, node);\n        });\n        return this;\n      }\n      __privateGet(this, _runNode2).call(this, nodes);\n      return this;\n    };\n    this.toString = (remark) => remark.stringify(this.build());\n    this.run = (tree) => {\n      this.next(tree);\n      return this;\n    };\n    this.schema = schema;\n  }\n};\n_marks2 = new WeakMap();\n_matchTarget2 = new WeakMap();\n_runProseNode = new WeakMap();\n_runProseMark = new WeakMap();\n_runNode2 = new WeakMap();\n_searchType = new WeakMap();\n_maybeMergeChildren = new WeakMap();\n_createMarkdownNode = new WeakMap();\n_moveSpaces = new WeakMap();\n_closeNodeAndPush2 = new WeakMap();\n_addNodeAndPush2 = new WeakMap();\n_openMark = new WeakMap();\n_closeMark = new WeakMap();\n_SerializerState.create = (schema, remark) => {\n  const state = new _SerializerState(schema);\n  return (content) => {\n    state.run(content);\n    return state.toString(remark);\n  };\n};\nlet SerializerState = _SerializerState;\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/transformer/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/utils/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@milkdown/utils/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $command: () => (/* binding */ $command),\n/* harmony export */   $commandAsync: () => (/* binding */ $commandAsync),\n/* harmony export */   $ctx: () => (/* binding */ $ctx),\n/* harmony export */   $inputRule: () => (/* binding */ $inputRule),\n/* harmony export */   $inputRuleAsync: () => (/* binding */ $inputRuleAsync),\n/* harmony export */   $mark: () => (/* binding */ $mark),\n/* harmony export */   $markAsync: () => (/* binding */ $markAsync),\n/* harmony export */   $markAttr: () => (/* binding */ $markAttr),\n/* harmony export */   $markSchema: () => (/* binding */ $markSchema),\n/* harmony export */   $node: () => (/* binding */ $node),\n/* harmony export */   $nodeAsync: () => (/* binding */ $nodeAsync),\n/* harmony export */   $nodeAttr: () => (/* binding */ $nodeAttr),\n/* harmony export */   $nodeSchema: () => (/* binding */ $nodeSchema),\n/* harmony export */   $prose: () => (/* binding */ $prose),\n/* harmony export */   $proseAsync: () => (/* binding */ $proseAsync),\n/* harmony export */   $remark: () => (/* binding */ $remark),\n/* harmony export */   $shortcut: () => (/* binding */ $shortcut),\n/* harmony export */   $shortcutAsync: () => (/* binding */ $shortcutAsync),\n/* harmony export */   $useKeymap: () => (/* binding */ $useKeymap),\n/* harmony export */   $view: () => (/* binding */ $view),\n/* harmony export */   $viewAsync: () => (/* binding */ $viewAsync),\n/* harmony export */   addTimer: () => (/* binding */ addTimer),\n/* harmony export */   callCommand: () => (/* binding */ callCommand),\n/* harmony export */   forceUpdate: () => (/* binding */ forceUpdate),\n/* harmony export */   getHTML: () => (/* binding */ getHTML),\n/* harmony export */   getMarkdown: () => (/* binding */ getMarkdown),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   outline: () => (/* binding */ outline),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   replaceAll: () => (/* binding */ replaceAll),\n/* harmony export */   setAttr: () => (/* binding */ setAttr)\n/* harmony export */ });\n/* harmony import */ var _milkdown_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @milkdown/core */ \"(ssr)/./node_modules/@milkdown/core/lib/index.js\");\n/* harmony import */ var _milkdown_ctx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @milkdown/ctx */ \"(ssr)/./node_modules/@milkdown/ctx/lib/index.js\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@milkdown/utils/node_modules/nanoid/index.js\");\n/* harmony import */ var _milkdown_exception__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @milkdown/exception */ \"(ssr)/./node_modules/@milkdown/exception/lib/index.js\");\n/* harmony import */ var _milkdown_prose_keymap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @milkdown/prose/keymap */ \"(ssr)/./node_modules/prosemirror-keymap/dist/index.js\");\n/* harmony import */ var _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @milkdown/prose/model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @milkdown/prose/state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n\n\n\n\n\n\n\nconst nanoid = (0,nanoid__WEBPACK_IMPORTED_MODULE_0__.customAlphabet)(\"abcedfghicklmn\", 10);\nfunction addTimer(runner, injectTo, timerName) {\n  const timer = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_1__.createTimer)(timerName || nanoid());\n  let doneCalled = false;\n  const plugin = (ctx) => {\n    ctx.record(timer);\n    ctx.update(injectTo, (x) => x.concat(timer));\n    return async () => {\n      const done = () => {\n        ctx.done(timer);\n        doneCalled = true;\n      };\n      const cleanup = await runner(ctx, plugin, done);\n      if (!doneCalled) ctx.done(timer);\n      return () => {\n        ctx.update(injectTo, (x) => x.filter((y) => y !== timer));\n        ctx.clearTimer(timer);\n        if (cleanup) {\n          const result = cleanup();\n          if (result && \"then\" in result) {\n            result.catch(console.error);\n          }\n        }\n      };\n    };\n  };\n  plugin.timer = timer;\n  return plugin;\n}\nfunction $command(key, cmd) {\n  const cmdKey = (0,_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.createCmdKey)(key);\n  const plugin = (ctx) => async () => {\n    plugin.key = cmdKey;\n    await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.CommandsReady);\n    const command = cmd(ctx);\n    ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx).create(cmdKey, command);\n    plugin.run = (payload) => ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx).call(key, payload);\n    return () => {\n      ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx).remove(cmdKey);\n    };\n  };\n  return plugin;\n}\nfunction $commandAsync(key, cmd, timerName) {\n  const cmdKey = (0,_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.createCmdKey)(key);\n  return addTimer(\n    async (ctx, plugin) => {\n      await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.CommandsReady);\n      const command = await cmd(ctx);\n      ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx).create(cmdKey, command);\n      plugin.run = (payload) => ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx).call(key, payload);\n      plugin.key = cmdKey;\n      return () => {\n        ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx).remove(cmdKey);\n      };\n    },\n    _milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsTimerCtx,\n    timerName\n  );\n}\nfunction $inputRule(inputRule) {\n  const plugin = (ctx) => async () => {\n    await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.SchemaReady);\n    const ir = inputRule(ctx);\n    ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesCtx, (irs) => [...irs, ir]);\n    plugin.inputRule = ir;\n    return () => {\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesCtx, (irs) => irs.filter((x) => x !== ir));\n    };\n  };\n  return plugin;\n}\nfunction $inputRuleAsync(inputRule, timerName) {\n  return addTimer(\n    async (ctx, plugin) => {\n      await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.SchemaReady);\n      const ir = await inputRule(ctx);\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesCtx, (irs) => [...irs, ir]);\n      plugin.inputRule = ir;\n      return () => {\n        ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesCtx, (irs) => irs.filter((x) => x !== ir));\n      };\n    },\n    _milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorStateTimerCtx,\n    timerName\n  );\n}\nfunction $mark(id, schema) {\n  const plugin = (ctx) => async () => {\n    const markSchema = schema(ctx);\n    ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.marksCtx, (ns) => [\n      ...ns.filter((n) => n[0] !== id),\n      [id, markSchema]\n    ]);\n    plugin.id = id;\n    plugin.schema = markSchema;\n    return () => {\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.marksCtx, (ns) => ns.filter(([x]) => x !== id));\n    };\n  };\n  plugin.type = (ctx) => {\n    const markType = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.schemaCtx).marks[id];\n    if (!markType) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_3__.missingMarkInSchema)(id);\n    return markType;\n  };\n  return plugin;\n}\nfunction $markAsync(id, schema, timerName) {\n  const plugin = addTimer(\n    async (ctx, plugin2, done) => {\n      const markSchema = await schema(ctx);\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.marksCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, markSchema]\n      ]);\n      plugin2.id = id;\n      plugin2.schema = markSchema;\n      done();\n      return () => {\n        ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.marksCtx, (ns) => ns.filter(([x]) => x !== id));\n      };\n    },\n    _milkdown_core__WEBPACK_IMPORTED_MODULE_2__.schemaTimerCtx,\n    timerName\n  );\n  plugin.type = (ctx) => {\n    const markType = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.schemaCtx).marks[id];\n    if (!markType) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_3__.missingMarkInSchema)(id);\n    return markType;\n  };\n  return plugin;\n}\nfunction $node(id, schema) {\n  const plugin = (ctx) => async () => {\n    const nodeSchema = schema(ctx);\n    ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodesCtx, (ns) => [\n      ...ns.filter((n) => n[0] !== id),\n      [id, nodeSchema]\n    ]);\n    plugin.id = id;\n    plugin.schema = nodeSchema;\n    return () => {\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodesCtx, (ns) => ns.filter(([x]) => x !== id));\n    };\n  };\n  plugin.type = (ctx) => {\n    const nodeType = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.schemaCtx).nodes[id];\n    if (!nodeType) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_3__.missingNodeInSchema)(id);\n    return nodeType;\n  };\n  return plugin;\n}\nfunction $nodeAsync(id, schema, timerName) {\n  const plugin = addTimer(\n    async (ctx, plugin2, done) => {\n      const nodeSchema = await schema(ctx);\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodesCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, nodeSchema]\n      ]);\n      plugin2.id = id;\n      plugin2.schema = nodeSchema;\n      done();\n      return () => {\n        ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodesCtx, (ns) => ns.filter(([x]) => x !== id));\n      };\n    },\n    _milkdown_core__WEBPACK_IMPORTED_MODULE_2__.schemaTimerCtx,\n    timerName\n  );\n  plugin.type = (ctx) => {\n    const nodeType = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.schemaCtx).nodes[id];\n    if (!nodeType) throw (0,_milkdown_exception__WEBPACK_IMPORTED_MODULE_3__.missingNodeInSchema)(id);\n    return nodeType;\n  };\n  return plugin;\n}\nfunction $prose(prose) {\n  let prosePlugin;\n  const plugin = (ctx) => async () => {\n    await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.SchemaReady);\n    prosePlugin = prose(ctx);\n    ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx, (ps) => [...ps, prosePlugin]);\n    return () => {\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx, (ps) => ps.filter((x) => x !== prosePlugin));\n    };\n  };\n  plugin.plugin = () => prosePlugin;\n  plugin.key = () => prosePlugin.spec.key;\n  return plugin;\n}\nfunction $proseAsync(prose, timerName) {\n  let prosePlugin;\n  const plugin = addTimer(\n    async (ctx) => {\n      await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.SchemaReady);\n      prosePlugin = await prose(ctx);\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx, (ps) => [...ps, prosePlugin]);\n      return () => {\n        ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx, (ps) => ps.filter((x) => x !== prosePlugin));\n      };\n    },\n    _milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorStateTimerCtx,\n    timerName\n  );\n  plugin.plugin = () => prosePlugin;\n  plugin.key = () => prosePlugin.spec.key;\n  return plugin;\n}\nfunction $shortcut(shortcut) {\n  const plugin = (ctx) => async () => {\n    await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.SchemaReady);\n    const k = shortcut(ctx);\n    const keymapPlugin = (0,_milkdown_prose_keymap__WEBPACK_IMPORTED_MODULE_4__.keymap)(k);\n    ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx, (ps) => [...ps, keymapPlugin]);\n    plugin.keymap = k;\n    return () => {\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx, (ps) => ps.filter((x) => x !== keymapPlugin));\n    };\n  };\n  return plugin;\n}\nfunction $shortcutAsync(shortcut, timerName) {\n  return addTimer(\n    async (ctx, plugin) => {\n      await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.SchemaReady);\n      const k = await shortcut(ctx);\n      const keymapPlugin = (0,_milkdown_prose_keymap__WEBPACK_IMPORTED_MODULE_4__.keymap)(k);\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx, (ps) => [...ps, keymapPlugin]);\n      plugin.keymap = k;\n      return () => {\n        ctx.update(\n          _milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx,\n          (ps) => ps.filter((x) => x !== keymapPlugin)\n        );\n      };\n    },\n    _milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorStateTimerCtx,\n    timerName\n  );\n}\nfunction $view(type, view) {\n  const plugin = (ctx) => async () => {\n    await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.SchemaReady);\n    const v = view(ctx);\n    if (type.type(ctx) instanceof _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_5__.NodeType)\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodeViewCtx, (ps) => [\n        ...ps,\n        [type.id, v]\n      ]);\n    else\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.markViewCtx, (ps) => [\n        ...ps,\n        [type.id, v]\n      ]);\n    plugin.view = v;\n    plugin.type = type;\n    return () => {\n      if (type.type(ctx) instanceof _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_5__.NodeType)\n        ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodeViewCtx, (ps) => ps.filter((x) => x[0] !== type.id));\n      else ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.markViewCtx, (ps) => ps.filter((x) => x[0] !== type.id));\n    };\n  };\n  return plugin;\n}\nfunction $viewAsync(type, view, timerName) {\n  return addTimer(\n    async (ctx, plugin) => {\n      await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.SchemaReady);\n      const v = await view(ctx);\n      if (type.type(ctx) instanceof _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_5__.NodeType)\n        ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodeViewCtx, (ps) => [\n          ...ps,\n          [type.id, v]\n        ]);\n      else\n        ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.markViewCtx, (ps) => [\n          ...ps,\n          [type.id, v]\n        ]);\n      plugin.view = v;\n      plugin.type = type;\n      return () => {\n        if (type.type(ctx) instanceof _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_5__.NodeType)\n          ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodeViewCtx, (ps) => ps.filter((x) => x[0] !== type.id));\n        else ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.markViewCtx, (ps) => ps.filter((x) => x[0] !== type.id));\n      };\n    },\n    _milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewTimerCtx,\n    timerName\n  );\n}\nfunction $ctx(value, name) {\n  const slice = (0,_milkdown_ctx__WEBPACK_IMPORTED_MODULE_1__.createSlice)(value, name);\n  const plugin = (ctx) => {\n    ctx.inject(slice);\n    return () => {\n      return () => {\n        ctx.remove(slice);\n      };\n    };\n  };\n  plugin.key = slice;\n  return plugin;\n}\nfunction $nodeSchema(id, schema) {\n  const schemaCtx2 = $ctx(schema, id);\n  const nodeSchema = $node(id, (ctx) => {\n    const userSchema = ctx.get(schemaCtx2.key);\n    return userSchema(ctx);\n  });\n  const result = [schemaCtx2, nodeSchema];\n  result.id = nodeSchema.id;\n  result.node = nodeSchema;\n  result.type = (ctx) => nodeSchema.type(ctx);\n  result.schema = nodeSchema.schema;\n  result.ctx = schemaCtx2;\n  result.key = schemaCtx2.key;\n  result.extendSchema = (handler) => {\n    return (ctx) => () => {\n      const prev = ctx.get(schemaCtx2.key);\n      const next = handler(prev);\n      const nodeSchema2 = next(ctx);\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.nodesCtx, (ns) => [\n        ...ns.filter((n) => n[0] !== id),\n        [id, nodeSchema2]\n      ]);\n      result.schema = nodeSchema2;\n    };\n  };\n  return result;\n}\nfunction $markSchema(id, schema) {\n  const schemaCtx2 = $ctx(schema, id);\n  const markSchema = $mark(id, (ctx) => {\n    const userSchema = ctx.get(schemaCtx2.key);\n    return userSchema(ctx);\n  });\n  const result = [schemaCtx2, markSchema];\n  result.id = markSchema.id;\n  result.mark = markSchema;\n  result.type = markSchema.type;\n  result.schema = markSchema.schema;\n  result.ctx = schemaCtx2;\n  result.key = schemaCtx2.key;\n  result.extendSchema = (handler) => {\n    return (ctx) => () => {\n      const prev = ctx.get(schemaCtx2.key);\n      const next = handler(prev);\n      const markSchema2 = next(ctx);\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.marksCtx, (ms) => [\n        ...ms.filter((m) => m[0] !== id),\n        [id, markSchema2]\n      ]);\n      result.schema = markSchema2;\n    };\n  };\n  return result;\n}\nfunction $useKeymap(name, userKeymap) {\n  const key = Object.fromEntries(\n    Object.entries(userKeymap).map(([key2, { shortcuts: shortcuts2 }]) => {\n      return [key2, shortcuts2];\n    })\n  );\n  const keymapDef = $ctx(key, `${name}Keymap`);\n  const shortcuts = $shortcut((ctx) => {\n    const keys = ctx.get(keymapDef.key);\n    const keymapTuple = Object.entries(userKeymap).flatMap(\n      ([key2, { command }]) => {\n        const targetKeys = [keys[key2]].flat();\n        return targetKeys.map((targetKey) => [targetKey, command(ctx)]);\n      }\n    );\n    return Object.fromEntries(keymapTuple);\n  });\n  const result = [keymapDef, shortcuts];\n  result.ctx = keymapDef;\n  result.shortcuts = shortcuts;\n  result.key = keymapDef.key;\n  result.keymap = shortcuts.keymap;\n  return result;\n}\nconst $nodeAttr = (name, value = () => ({})) => $ctx(value, `${name}Attr`);\nconst $markAttr = (name, value = () => ({})) => $ctx(value, `${name}Attr`);\nfunction $remark(id, remark, initialOptions) {\n  const options = $ctx(initialOptions ?? {}, id);\n  const plugin = (ctx) => async () => {\n    await ctx.wait(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.InitReady);\n    const re = remark(ctx);\n    const remarkPlugin = {\n      plugin: re,\n      options: ctx.get(options.key)\n    };\n    ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.remarkPluginsCtx, (rp) => [...rp, remarkPlugin]);\n    return () => {\n      ctx.update(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.remarkPluginsCtx, (rp) => rp.filter((x) => x !== remarkPlugin));\n    };\n  };\n  const result = [options, plugin];\n  result.id = id;\n  result.plugin = plugin;\n  result.options = options;\n  return result;\n}\nfunction callCommand(slice, payload) {\n  return (ctx) => {\n    return ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.commandsCtx).call(slice, payload);\n  };\n}\nfunction forceUpdate() {\n  return (ctx) => {\n    const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n    const { tr } = view.state;\n    const nextTr = Object.assign(Object.create(tr), tr).setTime(Date.now());\n    return view.dispatch(nextTr);\n  };\n}\nfunction getHTML() {\n  return (ctx) => {\n    const div = document.createElement(\"div\");\n    const schema = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.schemaCtx);\n    const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n    const fragment = _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_5__.DOMSerializer.fromSchema(schema).serializeFragment(\n      view.state.doc.content\n    );\n    div.appendChild(fragment);\n    return div.innerHTML;\n  };\n}\nfunction getMarkdown() {\n  return (ctx) => {\n    const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n    const serializer = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.serializerCtx);\n    return serializer(view.state.doc);\n  };\n}\nfunction insert(markdown) {\n  return (ctx) => {\n    const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n    const parser = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.parserCtx);\n    const doc = parser(markdown);\n    if (!doc) return;\n    const contentSlice = view.state.selection.content();\n    return view.dispatch(\n      view.state.tr.replaceSelection(\n        new _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_5__.Slice(doc.content, contentSlice.openStart, contentSlice.openEnd)\n      ).scrollIntoView()\n    );\n  };\n}\nfunction outline() {\n  return (ctx) => {\n    const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n    const data = [];\n    const doc = view.state.doc;\n    doc.descendants((node) => {\n      if (node.type.name === \"heading\" && node.attrs.level)\n        data.push({\n          text: node.textContent,\n          level: node.attrs.level,\n          id: node.attrs.id\n        });\n    });\n    return data;\n  };\n}\nfunction replaceAll(markdown, flush = false) {\n  return (ctx) => {\n    const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n    const parser = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.parserCtx);\n    const doc = parser(markdown);\n    if (!doc) return;\n    if (!flush) {\n      const { state: state2 } = view;\n      return view.dispatch(\n        state2.tr.replace(\n          0,\n          state2.doc.content.size,\n          new _milkdown_prose_model__WEBPACK_IMPORTED_MODULE_5__.Slice(doc.content, 0, 0)\n        )\n      );\n    }\n    const schema = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.schemaCtx);\n    const options = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorStateOptionsCtx);\n    const plugins = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.prosePluginsCtx);\n    const state = _milkdown_prose_state__WEBPACK_IMPORTED_MODULE_6__.EditorState.create({\n      schema,\n      doc,\n      plugins,\n      ...options\n    });\n    view.updateState(state);\n  };\n}\nfunction setAttr(pos, update) {\n  return (ctx) => {\n    const view = ctx.get(_milkdown_core__WEBPACK_IMPORTED_MODULE_2__.editorViewCtx);\n    const { tr } = view.state;\n    const node = tr.doc.nodeAt(pos);\n    if (!node) return;\n    const nextAttr = update(node.attrs);\n    return view.dispatch(tr.setNodeMarkup(pos, void 0, nextAttr));\n  };\n}\nconst pipe = (...funcs) => {\n  const length = funcs.length;\n  let index = length;\n  while (index--) {\n    if (typeof funcs[index] !== \"function\")\n      throw new TypeError(\"Expected a function\");\n  }\n  return (...args) => {\n    let index2 = 0;\n    let result = length ? funcs[index2](...args) : args[0];\n    while (++index2 < length) result = funcs[index2](result);\n    return result;\n  };\n};\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pbGtkb3duL3V0aWxzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd1Y7QUFDL1I7QUFDakI7QUFDdUM7QUFDL0I7QUFDdUI7QUFDbkI7QUFDcEQsZUFBZSxzREFBYztBQUM3QjtBQUNBLGdCQUFnQiwwREFBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsNERBQVk7QUFDN0I7QUFDQTtBQUNBLG1CQUFtQix5REFBYTtBQUNoQztBQUNBLFlBQVksdURBQVc7QUFDdkIsc0NBQXNDLHVEQUFXO0FBQ2pEO0FBQ0EsY0FBYyx1REFBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDREQUFZO0FBQzdCO0FBQ0E7QUFDQSxxQkFBcUIseURBQWE7QUFDbEM7QUFDQSxjQUFjLHVEQUFXO0FBQ3pCLHdDQUF3Qyx1REFBVztBQUNuRDtBQUNBO0FBQ0EsZ0JBQWdCLHVEQUFXO0FBQzNCO0FBQ0EsS0FBSztBQUNMLElBQUksNERBQWdCO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdURBQVc7QUFDOUI7QUFDQSxlQUFlLHlEQUFhO0FBQzVCO0FBQ0E7QUFDQSxpQkFBaUIseURBQWE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsdURBQVc7QUFDaEM7QUFDQSxpQkFBaUIseURBQWE7QUFDOUI7QUFDQTtBQUNBLG1CQUFtQix5REFBYTtBQUNoQztBQUNBLEtBQUs7QUFDTCxJQUFJLCtEQUFtQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9EQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvREFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIscURBQVM7QUFDdEMseUJBQXlCLHdFQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG9EQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9EQUFRO0FBQzNCO0FBQ0EsS0FBSztBQUNMLElBQUksMERBQWM7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHFEQUFTO0FBQ3RDLHlCQUF5Qix3RUFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9EQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvREFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIscURBQVM7QUFDdEMseUJBQXlCLHdFQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG9EQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9EQUFRO0FBQzNCO0FBQ0EsS0FBSztBQUNMLElBQUksMERBQWM7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHFEQUFTO0FBQ3RDLHlCQUF5Qix3RUFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdURBQVc7QUFDOUI7QUFDQSxlQUFlLDJEQUFlO0FBQzlCO0FBQ0EsaUJBQWlCLDJEQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVEQUFXO0FBQ2hDO0FBQ0EsaUJBQWlCLDJEQUFlO0FBQ2hDO0FBQ0EsbUJBQW1CLDJEQUFlO0FBQ2xDO0FBQ0EsS0FBSztBQUNMLElBQUksK0RBQW1CO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdURBQVc7QUFDOUI7QUFDQSx5QkFBeUIsOERBQU07QUFDL0IsZUFBZSwyREFBZTtBQUM5QjtBQUNBO0FBQ0EsaUJBQWlCLDJEQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHVEQUFXO0FBQ2hDO0FBQ0EsMkJBQTJCLDhEQUFNO0FBQ2pDLGlCQUFpQiwyREFBZTtBQUNoQztBQUNBO0FBQ0E7QUFDQSxVQUFVLDJEQUFlO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJLCtEQUFtQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVEQUFXO0FBQzlCO0FBQ0Esa0NBQWtDLDJEQUFRO0FBQzFDLGlCQUFpQix1REFBVztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix1REFBVztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsMkRBQVE7QUFDNUMsbUJBQW1CLHVEQUFXO0FBQzlCLHNCQUFzQix1REFBVztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix1REFBVztBQUNoQztBQUNBLG9DQUFvQywyREFBUTtBQUM1QyxtQkFBbUIsdURBQVc7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdURBQVc7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDJEQUFRO0FBQzlDLHFCQUFxQix1REFBVztBQUNoQyx3QkFBd0IsdURBQVc7QUFDbkM7QUFDQSxLQUFLO0FBQ0wsSUFBSSw4REFBa0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQVc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG9EQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvREFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qyx1QkFBdUI7QUFDcEU7QUFDQSxLQUFLO0FBQ0w7QUFDQSxpQ0FBaUMsS0FBSztBQUN0QztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHFCQUFxQixLQUFLO0FBQ3BFLDBDQUEwQyxxQkFBcUIsS0FBSztBQUNwRTtBQUNBLDJDQUEyQztBQUMzQztBQUNBLG1CQUFtQixxREFBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw0REFBZ0I7QUFDL0I7QUFDQSxpQkFBaUIsNERBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVEQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlEQUFhO0FBQ3RDLFlBQVksS0FBSztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixxREFBUztBQUNwQyx5QkFBeUIseURBQWE7QUFDdEMscUJBQXFCLGdFQUFhO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIseURBQWE7QUFDdEMsK0JBQStCLHlEQUFhO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIseURBQWE7QUFDdEMsMkJBQTJCLHFEQUFTO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdEQUFLO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix5REFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlEQUFhO0FBQ3RDLDJCQUEyQixxREFBUztBQUNwQztBQUNBO0FBQ0E7QUFDQSxjQUFjLGdCQUFnQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsd0RBQUs7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHFEQUFTO0FBQ3BDLDRCQUE0QixpRUFBcUI7QUFDakQsNEJBQTRCLDJEQUFlO0FBQzNDLGtCQUFrQiw4REFBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlEQUFhO0FBQ3RDLFlBQVksS0FBSztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBa0NFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluMi9Eb2N1bWVudHMvbm90ZUNhcmQvbm9kZV9tb2R1bGVzL0BtaWxrZG93bi91dGlscy9saWIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ21kS2V5LCBjb21tYW5kc1RpbWVyQ3R4LCBDb21tYW5kc1JlYWR5LCBjb21tYW5kc0N0eCwgZWRpdG9yU3RhdGVUaW1lckN0eCwgU2NoZW1hUmVhZHksIGlucHV0UnVsZXNDdHgsIHNjaGVtYUN0eCwgc2NoZW1hVGltZXJDdHgsIG1hcmtzQ3R4LCBub2Rlc0N0eCwgcHJvc2VQbHVnaW5zQ3R4LCBlZGl0b3JWaWV3VGltZXJDdHgsIG5vZGVWaWV3Q3R4LCBtYXJrVmlld0N0eCwgSW5pdFJlYWR5LCByZW1hcmtQbHVnaW5zQ3R4LCBlZGl0b3JWaWV3Q3R4LCBzZXJpYWxpemVyQ3R4LCBwYXJzZXJDdHgsIGVkaXRvclN0YXRlT3B0aW9uc0N0eCB9IGZyb20gXCJAbWlsa2Rvd24vY29yZVwiO1xuaW1wb3J0IHsgY3JlYXRlVGltZXIsIGNyZWF0ZVNsaWNlIH0gZnJvbSBcIkBtaWxrZG93bi9jdHhcIjtcbmltcG9ydCB7IGN1c3RvbUFscGhhYmV0IH0gZnJvbSBcIm5hbm9pZFwiO1xuaW1wb3J0IHsgbWlzc2luZ01hcmtJblNjaGVtYSwgbWlzc2luZ05vZGVJblNjaGVtYSB9IGZyb20gXCJAbWlsa2Rvd24vZXhjZXB0aW9uXCI7XG5pbXBvcnQgeyBrZXltYXAgfSBmcm9tIFwiQG1pbGtkb3duL3Byb3NlL2tleW1hcFwiO1xuaW1wb3J0IHsgTm9kZVR5cGUsIERPTVNlcmlhbGl6ZXIsIFNsaWNlIH0gZnJvbSBcIkBtaWxrZG93bi9wcm9zZS9tb2RlbFwiO1xuaW1wb3J0IHsgRWRpdG9yU3RhdGUgfSBmcm9tIFwiQG1pbGtkb3duL3Byb3NlL3N0YXRlXCI7XG5jb25zdCBuYW5vaWQgPSBjdXN0b21BbHBoYWJldChcImFiY2VkZmdoaWNrbG1uXCIsIDEwKTtcbmZ1bmN0aW9uIGFkZFRpbWVyKHJ1bm5lciwgaW5qZWN0VG8sIHRpbWVyTmFtZSkge1xuICBjb25zdCB0aW1lciA9IGNyZWF0ZVRpbWVyKHRpbWVyTmFtZSB8fCBuYW5vaWQoKSk7XG4gIGxldCBkb25lQ2FsbGVkID0gZmFsc2U7XG4gIGNvbnN0IHBsdWdpbiA9IChjdHgpID0+IHtcbiAgICBjdHgucmVjb3JkKHRpbWVyKTtcbiAgICBjdHgudXBkYXRlKGluamVjdFRvLCAoeCkgPT4geC5jb25jYXQodGltZXIpKTtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZG9uZSA9ICgpID0+IHtcbiAgICAgICAgY3R4LmRvbmUodGltZXIpO1xuICAgICAgICBkb25lQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIH07XG4gICAgICBjb25zdCBjbGVhbnVwID0gYXdhaXQgcnVubmVyKGN0eCwgcGx1Z2luLCBkb25lKTtcbiAgICAgIGlmICghZG9uZUNhbGxlZCkgY3R4LmRvbmUodGltZXIpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY3R4LnVwZGF0ZShpbmplY3RUbywgKHgpID0+IHguZmlsdGVyKCh5KSA9PiB5ICE9PSB0aW1lcikpO1xuICAgICAgICBjdHguY2xlYXJUaW1lcih0aW1lcik7XG4gICAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2xlYW51cCgpO1xuICAgICAgICAgIGlmIChyZXN1bHQgJiYgXCJ0aGVuXCIgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH07XG4gIHBsdWdpbi50aW1lciA9IHRpbWVyO1xuICByZXR1cm4gcGx1Z2luO1xufVxuZnVuY3Rpb24gJGNvbW1hbmQoa2V5LCBjbWQpIHtcbiAgY29uc3QgY21kS2V5ID0gY3JlYXRlQ21kS2V5KGtleSk7XG4gIGNvbnN0IHBsdWdpbiA9IChjdHgpID0+IGFzeW5jICgpID0+IHtcbiAgICBwbHVnaW4ua2V5ID0gY21kS2V5O1xuICAgIGF3YWl0IGN0eC53YWl0KENvbW1hbmRzUmVhZHkpO1xuICAgIGNvbnN0IGNvbW1hbmQgPSBjbWQoY3R4KTtcbiAgICBjdHguZ2V0KGNvbW1hbmRzQ3R4KS5jcmVhdGUoY21kS2V5LCBjb21tYW5kKTtcbiAgICBwbHVnaW4ucnVuID0gKHBheWxvYWQpID0+IGN0eC5nZXQoY29tbWFuZHNDdHgpLmNhbGwoa2V5LCBwYXlsb2FkKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY3R4LmdldChjb21tYW5kc0N0eCkucmVtb3ZlKGNtZEtleSk7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHBsdWdpbjtcbn1cbmZ1bmN0aW9uICRjb21tYW5kQXN5bmMoa2V5LCBjbWQsIHRpbWVyTmFtZSkge1xuICBjb25zdCBjbWRLZXkgPSBjcmVhdGVDbWRLZXkoa2V5KTtcbiAgcmV0dXJuIGFkZFRpbWVyKFxuICAgIGFzeW5jIChjdHgsIHBsdWdpbikgPT4ge1xuICAgICAgYXdhaXQgY3R4LndhaXQoQ29tbWFuZHNSZWFkeSk7XG4gICAgICBjb25zdCBjb21tYW5kID0gYXdhaXQgY21kKGN0eCk7XG4gICAgICBjdHguZ2V0KGNvbW1hbmRzQ3R4KS5jcmVhdGUoY21kS2V5LCBjb21tYW5kKTtcbiAgICAgIHBsdWdpbi5ydW4gPSAocGF5bG9hZCkgPT4gY3R4LmdldChjb21tYW5kc0N0eCkuY2FsbChrZXksIHBheWxvYWQpO1xuICAgICAgcGx1Z2luLmtleSA9IGNtZEtleTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGN0eC5nZXQoY29tbWFuZHNDdHgpLnJlbW92ZShjbWRLZXkpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbW1hbmRzVGltZXJDdHgsXG4gICAgdGltZXJOYW1lXG4gICk7XG59XG5mdW5jdGlvbiAkaW5wdXRSdWxlKGlucHV0UnVsZSkge1xuICBjb25zdCBwbHVnaW4gPSAoY3R4KSA9PiBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgY3R4LndhaXQoU2NoZW1hUmVhZHkpO1xuICAgIGNvbnN0IGlyID0gaW5wdXRSdWxlKGN0eCk7XG4gICAgY3R4LnVwZGF0ZShpbnB1dFJ1bGVzQ3R4LCAoaXJzKSA9PiBbLi4uaXJzLCBpcl0pO1xuICAgIHBsdWdpbi5pbnB1dFJ1bGUgPSBpcjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY3R4LnVwZGF0ZShpbnB1dFJ1bGVzQ3R4LCAoaXJzKSA9PiBpcnMuZmlsdGVyKCh4KSA9PiB4ICE9PSBpcikpO1xuICAgIH07XG4gIH07XG4gIHJldHVybiBwbHVnaW47XG59XG5mdW5jdGlvbiAkaW5wdXRSdWxlQXN5bmMoaW5wdXRSdWxlLCB0aW1lck5hbWUpIHtcbiAgcmV0dXJuIGFkZFRpbWVyKFxuICAgIGFzeW5jIChjdHgsIHBsdWdpbikgPT4ge1xuICAgICAgYXdhaXQgY3R4LndhaXQoU2NoZW1hUmVhZHkpO1xuICAgICAgY29uc3QgaXIgPSBhd2FpdCBpbnB1dFJ1bGUoY3R4KTtcbiAgICAgIGN0eC51cGRhdGUoaW5wdXRSdWxlc0N0eCwgKGlycykgPT4gWy4uLmlycywgaXJdKTtcbiAgICAgIHBsdWdpbi5pbnB1dFJ1bGUgPSBpcjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGN0eC51cGRhdGUoaW5wdXRSdWxlc0N0eCwgKGlycykgPT4gaXJzLmZpbHRlcigoeCkgPT4geCAhPT0gaXIpKTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBlZGl0b3JTdGF0ZVRpbWVyQ3R4LFxuICAgIHRpbWVyTmFtZVxuICApO1xufVxuZnVuY3Rpb24gJG1hcmsoaWQsIHNjaGVtYSkge1xuICBjb25zdCBwbHVnaW4gPSAoY3R4KSA9PiBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbWFya1NjaGVtYSA9IHNjaGVtYShjdHgpO1xuICAgIGN0eC51cGRhdGUobWFya3NDdHgsIChucykgPT4gW1xuICAgICAgLi4ubnMuZmlsdGVyKChuKSA9PiBuWzBdICE9PSBpZCksXG4gICAgICBbaWQsIG1hcmtTY2hlbWFdXG4gICAgXSk7XG4gICAgcGx1Z2luLmlkID0gaWQ7XG4gICAgcGx1Z2luLnNjaGVtYSA9IG1hcmtTY2hlbWE7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGN0eC51cGRhdGUobWFya3NDdHgsIChucykgPT4gbnMuZmlsdGVyKChbeF0pID0+IHggIT09IGlkKSk7XG4gICAgfTtcbiAgfTtcbiAgcGx1Z2luLnR5cGUgPSAoY3R4KSA9PiB7XG4gICAgY29uc3QgbWFya1R5cGUgPSBjdHguZ2V0KHNjaGVtYUN0eCkubWFya3NbaWRdO1xuICAgIGlmICghbWFya1R5cGUpIHRocm93IG1pc3NpbmdNYXJrSW5TY2hlbWEoaWQpO1xuICAgIHJldHVybiBtYXJrVHlwZTtcbiAgfTtcbiAgcmV0dXJuIHBsdWdpbjtcbn1cbmZ1bmN0aW9uICRtYXJrQXN5bmMoaWQsIHNjaGVtYSwgdGltZXJOYW1lKSB7XG4gIGNvbnN0IHBsdWdpbiA9IGFkZFRpbWVyKFxuICAgIGFzeW5jIChjdHgsIHBsdWdpbjIsIGRvbmUpID0+IHtcbiAgICAgIGNvbnN0IG1hcmtTY2hlbWEgPSBhd2FpdCBzY2hlbWEoY3R4KTtcbiAgICAgIGN0eC51cGRhdGUobWFya3NDdHgsIChucykgPT4gW1xuICAgICAgICAuLi5ucy5maWx0ZXIoKG4pID0+IG5bMF0gIT09IGlkKSxcbiAgICAgICAgW2lkLCBtYXJrU2NoZW1hXVxuICAgICAgXSk7XG4gICAgICBwbHVnaW4yLmlkID0gaWQ7XG4gICAgICBwbHVnaW4yLnNjaGVtYSA9IG1hcmtTY2hlbWE7XG4gICAgICBkb25lKCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjdHgudXBkYXRlKG1hcmtzQ3R4LCAobnMpID0+IG5zLmZpbHRlcigoW3hdKSA9PiB4ICE9PSBpZCkpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHNjaGVtYVRpbWVyQ3R4LFxuICAgIHRpbWVyTmFtZVxuICApO1xuICBwbHVnaW4udHlwZSA9IChjdHgpID0+IHtcbiAgICBjb25zdCBtYXJrVHlwZSA9IGN0eC5nZXQoc2NoZW1hQ3R4KS5tYXJrc1tpZF07XG4gICAgaWYgKCFtYXJrVHlwZSkgdGhyb3cgbWlzc2luZ01hcmtJblNjaGVtYShpZCk7XG4gICAgcmV0dXJuIG1hcmtUeXBlO1xuICB9O1xuICByZXR1cm4gcGx1Z2luO1xufVxuZnVuY3Rpb24gJG5vZGUoaWQsIHNjaGVtYSkge1xuICBjb25zdCBwbHVnaW4gPSAoY3R4KSA9PiBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgbm9kZVNjaGVtYSA9IHNjaGVtYShjdHgpO1xuICAgIGN0eC51cGRhdGUobm9kZXNDdHgsIChucykgPT4gW1xuICAgICAgLi4ubnMuZmlsdGVyKChuKSA9PiBuWzBdICE9PSBpZCksXG4gICAgICBbaWQsIG5vZGVTY2hlbWFdXG4gICAgXSk7XG4gICAgcGx1Z2luLmlkID0gaWQ7XG4gICAgcGx1Z2luLnNjaGVtYSA9IG5vZGVTY2hlbWE7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGN0eC51cGRhdGUobm9kZXNDdHgsIChucykgPT4gbnMuZmlsdGVyKChbeF0pID0+IHggIT09IGlkKSk7XG4gICAgfTtcbiAgfTtcbiAgcGx1Z2luLnR5cGUgPSAoY3R4KSA9PiB7XG4gICAgY29uc3Qgbm9kZVR5cGUgPSBjdHguZ2V0KHNjaGVtYUN0eCkubm9kZXNbaWRdO1xuICAgIGlmICghbm9kZVR5cGUpIHRocm93IG1pc3NpbmdOb2RlSW5TY2hlbWEoaWQpO1xuICAgIHJldHVybiBub2RlVHlwZTtcbiAgfTtcbiAgcmV0dXJuIHBsdWdpbjtcbn1cbmZ1bmN0aW9uICRub2RlQXN5bmMoaWQsIHNjaGVtYSwgdGltZXJOYW1lKSB7XG4gIGNvbnN0IHBsdWdpbiA9IGFkZFRpbWVyKFxuICAgIGFzeW5jIChjdHgsIHBsdWdpbjIsIGRvbmUpID0+IHtcbiAgICAgIGNvbnN0IG5vZGVTY2hlbWEgPSBhd2FpdCBzY2hlbWEoY3R4KTtcbiAgICAgIGN0eC51cGRhdGUobm9kZXNDdHgsIChucykgPT4gW1xuICAgICAgICAuLi5ucy5maWx0ZXIoKG4pID0+IG5bMF0gIT09IGlkKSxcbiAgICAgICAgW2lkLCBub2RlU2NoZW1hXVxuICAgICAgXSk7XG4gICAgICBwbHVnaW4yLmlkID0gaWQ7XG4gICAgICBwbHVnaW4yLnNjaGVtYSA9IG5vZGVTY2hlbWE7XG4gICAgICBkb25lKCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjdHgudXBkYXRlKG5vZGVzQ3R4LCAobnMpID0+IG5zLmZpbHRlcigoW3hdKSA9PiB4ICE9PSBpZCkpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHNjaGVtYVRpbWVyQ3R4LFxuICAgIHRpbWVyTmFtZVxuICApO1xuICBwbHVnaW4udHlwZSA9IChjdHgpID0+IHtcbiAgICBjb25zdCBub2RlVHlwZSA9IGN0eC5nZXQoc2NoZW1hQ3R4KS5ub2Rlc1tpZF07XG4gICAgaWYgKCFub2RlVHlwZSkgdGhyb3cgbWlzc2luZ05vZGVJblNjaGVtYShpZCk7XG4gICAgcmV0dXJuIG5vZGVUeXBlO1xuICB9O1xuICByZXR1cm4gcGx1Z2luO1xufVxuZnVuY3Rpb24gJHByb3NlKHByb3NlKSB7XG4gIGxldCBwcm9zZVBsdWdpbjtcbiAgY29uc3QgcGx1Z2luID0gKGN0eCkgPT4gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGN0eC53YWl0KFNjaGVtYVJlYWR5KTtcbiAgICBwcm9zZVBsdWdpbiA9IHByb3NlKGN0eCk7XG4gICAgY3R4LnVwZGF0ZShwcm9zZVBsdWdpbnNDdHgsIChwcykgPT4gWy4uLnBzLCBwcm9zZVBsdWdpbl0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjdHgudXBkYXRlKHByb3NlUGx1Z2luc0N0eCwgKHBzKSA9PiBwcy5maWx0ZXIoKHgpID0+IHggIT09IHByb3NlUGx1Z2luKSk7XG4gICAgfTtcbiAgfTtcbiAgcGx1Z2luLnBsdWdpbiA9ICgpID0+IHByb3NlUGx1Z2luO1xuICBwbHVnaW4ua2V5ID0gKCkgPT4gcHJvc2VQbHVnaW4uc3BlYy5rZXk7XG4gIHJldHVybiBwbHVnaW47XG59XG5mdW5jdGlvbiAkcHJvc2VBc3luYyhwcm9zZSwgdGltZXJOYW1lKSB7XG4gIGxldCBwcm9zZVBsdWdpbjtcbiAgY29uc3QgcGx1Z2luID0gYWRkVGltZXIoXG4gICAgYXN5bmMgKGN0eCkgPT4ge1xuICAgICAgYXdhaXQgY3R4LndhaXQoU2NoZW1hUmVhZHkpO1xuICAgICAgcHJvc2VQbHVnaW4gPSBhd2FpdCBwcm9zZShjdHgpO1xuICAgICAgY3R4LnVwZGF0ZShwcm9zZVBsdWdpbnNDdHgsIChwcykgPT4gWy4uLnBzLCBwcm9zZVBsdWdpbl0pO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY3R4LnVwZGF0ZShwcm9zZVBsdWdpbnNDdHgsIChwcykgPT4gcHMuZmlsdGVyKCh4KSA9PiB4ICE9PSBwcm9zZVBsdWdpbikpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGVkaXRvclN0YXRlVGltZXJDdHgsXG4gICAgdGltZXJOYW1lXG4gICk7XG4gIHBsdWdpbi5wbHVnaW4gPSAoKSA9PiBwcm9zZVBsdWdpbjtcbiAgcGx1Z2luLmtleSA9ICgpID0+IHByb3NlUGx1Z2luLnNwZWMua2V5O1xuICByZXR1cm4gcGx1Z2luO1xufVxuZnVuY3Rpb24gJHNob3J0Y3V0KHNob3J0Y3V0KSB7XG4gIGNvbnN0IHBsdWdpbiA9IChjdHgpID0+IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBjdHgud2FpdChTY2hlbWFSZWFkeSk7XG4gICAgY29uc3QgayA9IHNob3J0Y3V0KGN0eCk7XG4gICAgY29uc3Qga2V5bWFwUGx1Z2luID0ga2V5bWFwKGspO1xuICAgIGN0eC51cGRhdGUocHJvc2VQbHVnaW5zQ3R4LCAocHMpID0+IFsuLi5wcywga2V5bWFwUGx1Z2luXSk7XG4gICAgcGx1Z2luLmtleW1hcCA9IGs7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGN0eC51cGRhdGUocHJvc2VQbHVnaW5zQ3R4LCAocHMpID0+IHBzLmZpbHRlcigoeCkgPT4geCAhPT0ga2V5bWFwUGx1Z2luKSk7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHBsdWdpbjtcbn1cbmZ1bmN0aW9uICRzaG9ydGN1dEFzeW5jKHNob3J0Y3V0LCB0aW1lck5hbWUpIHtcbiAgcmV0dXJuIGFkZFRpbWVyKFxuICAgIGFzeW5jIChjdHgsIHBsdWdpbikgPT4ge1xuICAgICAgYXdhaXQgY3R4LndhaXQoU2NoZW1hUmVhZHkpO1xuICAgICAgY29uc3QgayA9IGF3YWl0IHNob3J0Y3V0KGN0eCk7XG4gICAgICBjb25zdCBrZXltYXBQbHVnaW4gPSBrZXltYXAoayk7XG4gICAgICBjdHgudXBkYXRlKHByb3NlUGx1Z2luc0N0eCwgKHBzKSA9PiBbLi4ucHMsIGtleW1hcFBsdWdpbl0pO1xuICAgICAgcGx1Z2luLmtleW1hcCA9IGs7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjdHgudXBkYXRlKFxuICAgICAgICAgIHByb3NlUGx1Z2luc0N0eCxcbiAgICAgICAgICAocHMpID0+IHBzLmZpbHRlcigoeCkgPT4geCAhPT0ga2V5bWFwUGx1Z2luKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGVkaXRvclN0YXRlVGltZXJDdHgsXG4gICAgdGltZXJOYW1lXG4gICk7XG59XG5mdW5jdGlvbiAkdmlldyh0eXBlLCB2aWV3KSB7XG4gIGNvbnN0IHBsdWdpbiA9IChjdHgpID0+IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBjdHgud2FpdChTY2hlbWFSZWFkeSk7XG4gICAgY29uc3QgdiA9IHZpZXcoY3R4KTtcbiAgICBpZiAodHlwZS50eXBlKGN0eCkgaW5zdGFuY2VvZiBOb2RlVHlwZSlcbiAgICAgIGN0eC51cGRhdGUobm9kZVZpZXdDdHgsIChwcykgPT4gW1xuICAgICAgICAuLi5wcyxcbiAgICAgICAgW3R5cGUuaWQsIHZdXG4gICAgICBdKTtcbiAgICBlbHNlXG4gICAgICBjdHgudXBkYXRlKG1hcmtWaWV3Q3R4LCAocHMpID0+IFtcbiAgICAgICAgLi4ucHMsXG4gICAgICAgIFt0eXBlLmlkLCB2XVxuICAgICAgXSk7XG4gICAgcGx1Z2luLnZpZXcgPSB2O1xuICAgIHBsdWdpbi50eXBlID0gdHlwZTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHR5cGUudHlwZShjdHgpIGluc3RhbmNlb2YgTm9kZVR5cGUpXG4gICAgICAgIGN0eC51cGRhdGUobm9kZVZpZXdDdHgsIChwcykgPT4gcHMuZmlsdGVyKCh4KSA9PiB4WzBdICE9PSB0eXBlLmlkKSk7XG4gICAgICBlbHNlIGN0eC51cGRhdGUobWFya1ZpZXdDdHgsIChwcykgPT4gcHMuZmlsdGVyKCh4KSA9PiB4WzBdICE9PSB0eXBlLmlkKSk7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHBsdWdpbjtcbn1cbmZ1bmN0aW9uICR2aWV3QXN5bmModHlwZSwgdmlldywgdGltZXJOYW1lKSB7XG4gIHJldHVybiBhZGRUaW1lcihcbiAgICBhc3luYyAoY3R4LCBwbHVnaW4pID0+IHtcbiAgICAgIGF3YWl0IGN0eC53YWl0KFNjaGVtYVJlYWR5KTtcbiAgICAgIGNvbnN0IHYgPSBhd2FpdCB2aWV3KGN0eCk7XG4gICAgICBpZiAodHlwZS50eXBlKGN0eCkgaW5zdGFuY2VvZiBOb2RlVHlwZSlcbiAgICAgICAgY3R4LnVwZGF0ZShub2RlVmlld0N0eCwgKHBzKSA9PiBbXG4gICAgICAgICAgLi4ucHMsXG4gICAgICAgICAgW3R5cGUuaWQsIHZdXG4gICAgICAgIF0pO1xuICAgICAgZWxzZVxuICAgICAgICBjdHgudXBkYXRlKG1hcmtWaWV3Q3R4LCAocHMpID0+IFtcbiAgICAgICAgICAuLi5wcyxcbiAgICAgICAgICBbdHlwZS5pZCwgdl1cbiAgICAgICAgXSk7XG4gICAgICBwbHVnaW4udmlldyA9IHY7XG4gICAgICBwbHVnaW4udHlwZSA9IHR5cGU7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAodHlwZS50eXBlKGN0eCkgaW5zdGFuY2VvZiBOb2RlVHlwZSlcbiAgICAgICAgICBjdHgudXBkYXRlKG5vZGVWaWV3Q3R4LCAocHMpID0+IHBzLmZpbHRlcigoeCkgPT4geFswXSAhPT0gdHlwZS5pZCkpO1xuICAgICAgICBlbHNlIGN0eC51cGRhdGUobWFya1ZpZXdDdHgsIChwcykgPT4gcHMuZmlsdGVyKCh4KSA9PiB4WzBdICE9PSB0eXBlLmlkKSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgZWRpdG9yVmlld1RpbWVyQ3R4LFxuICAgIHRpbWVyTmFtZVxuICApO1xufVxuZnVuY3Rpb24gJGN0eCh2YWx1ZSwgbmFtZSkge1xuICBjb25zdCBzbGljZSA9IGNyZWF0ZVNsaWNlKHZhbHVlLCBuYW1lKTtcbiAgY29uc3QgcGx1Z2luID0gKGN0eCkgPT4ge1xuICAgIGN0eC5pbmplY3Qoc2xpY2UpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjdHgucmVtb3ZlKHNsaWNlKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbiAgcGx1Z2luLmtleSA9IHNsaWNlO1xuICByZXR1cm4gcGx1Z2luO1xufVxuZnVuY3Rpb24gJG5vZGVTY2hlbWEoaWQsIHNjaGVtYSkge1xuICBjb25zdCBzY2hlbWFDdHgyID0gJGN0eChzY2hlbWEsIGlkKTtcbiAgY29uc3Qgbm9kZVNjaGVtYSA9ICRub2RlKGlkLCAoY3R4KSA9PiB7XG4gICAgY29uc3QgdXNlclNjaGVtYSA9IGN0eC5nZXQoc2NoZW1hQ3R4Mi5rZXkpO1xuICAgIHJldHVybiB1c2VyU2NoZW1hKGN0eCk7XG4gIH0pO1xuICBjb25zdCByZXN1bHQgPSBbc2NoZW1hQ3R4Miwgbm9kZVNjaGVtYV07XG4gIHJlc3VsdC5pZCA9IG5vZGVTY2hlbWEuaWQ7XG4gIHJlc3VsdC5ub2RlID0gbm9kZVNjaGVtYTtcbiAgcmVzdWx0LnR5cGUgPSAoY3R4KSA9PiBub2RlU2NoZW1hLnR5cGUoY3R4KTtcbiAgcmVzdWx0LnNjaGVtYSA9IG5vZGVTY2hlbWEuc2NoZW1hO1xuICByZXN1bHQuY3R4ID0gc2NoZW1hQ3R4MjtcbiAgcmVzdWx0LmtleSA9IHNjaGVtYUN0eDIua2V5O1xuICByZXN1bHQuZXh0ZW5kU2NoZW1hID0gKGhhbmRsZXIpID0+IHtcbiAgICByZXR1cm4gKGN0eCkgPT4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJldiA9IGN0eC5nZXQoc2NoZW1hQ3R4Mi5rZXkpO1xuICAgICAgY29uc3QgbmV4dCA9IGhhbmRsZXIocHJldik7XG4gICAgICBjb25zdCBub2RlU2NoZW1hMiA9IG5leHQoY3R4KTtcbiAgICAgIGN0eC51cGRhdGUobm9kZXNDdHgsIChucykgPT4gW1xuICAgICAgICAuLi5ucy5maWx0ZXIoKG4pID0+IG5bMF0gIT09IGlkKSxcbiAgICAgICAgW2lkLCBub2RlU2NoZW1hMl1cbiAgICAgIF0pO1xuICAgICAgcmVzdWx0LnNjaGVtYSA9IG5vZGVTY2hlbWEyO1xuICAgIH07XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiAkbWFya1NjaGVtYShpZCwgc2NoZW1hKSB7XG4gIGNvbnN0IHNjaGVtYUN0eDIgPSAkY3R4KHNjaGVtYSwgaWQpO1xuICBjb25zdCBtYXJrU2NoZW1hID0gJG1hcmsoaWQsIChjdHgpID0+IHtcbiAgICBjb25zdCB1c2VyU2NoZW1hID0gY3R4LmdldChzY2hlbWFDdHgyLmtleSk7XG4gICAgcmV0dXJuIHVzZXJTY2hlbWEoY3R4KTtcbiAgfSk7XG4gIGNvbnN0IHJlc3VsdCA9IFtzY2hlbWFDdHgyLCBtYXJrU2NoZW1hXTtcbiAgcmVzdWx0LmlkID0gbWFya1NjaGVtYS5pZDtcbiAgcmVzdWx0Lm1hcmsgPSBtYXJrU2NoZW1hO1xuICByZXN1bHQudHlwZSA9IG1hcmtTY2hlbWEudHlwZTtcbiAgcmVzdWx0LnNjaGVtYSA9IG1hcmtTY2hlbWEuc2NoZW1hO1xuICByZXN1bHQuY3R4ID0gc2NoZW1hQ3R4MjtcbiAgcmVzdWx0LmtleSA9IHNjaGVtYUN0eDIua2V5O1xuICByZXN1bHQuZXh0ZW5kU2NoZW1hID0gKGhhbmRsZXIpID0+IHtcbiAgICByZXR1cm4gKGN0eCkgPT4gKCkgPT4ge1xuICAgICAgY29uc3QgcHJldiA9IGN0eC5nZXQoc2NoZW1hQ3R4Mi5rZXkpO1xuICAgICAgY29uc3QgbmV4dCA9IGhhbmRsZXIocHJldik7XG4gICAgICBjb25zdCBtYXJrU2NoZW1hMiA9IG5leHQoY3R4KTtcbiAgICAgIGN0eC51cGRhdGUobWFya3NDdHgsIChtcykgPT4gW1xuICAgICAgICAuLi5tcy5maWx0ZXIoKG0pID0+IG1bMF0gIT09IGlkKSxcbiAgICAgICAgW2lkLCBtYXJrU2NoZW1hMl1cbiAgICAgIF0pO1xuICAgICAgcmVzdWx0LnNjaGVtYSA9IG1hcmtTY2hlbWEyO1xuICAgIH07XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiAkdXNlS2V5bWFwKG5hbWUsIHVzZXJLZXltYXApIHtcbiAgY29uc3Qga2V5ID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgIE9iamVjdC5lbnRyaWVzKHVzZXJLZXltYXApLm1hcCgoW2tleTIsIHsgc2hvcnRjdXRzOiBzaG9ydGN1dHMyIH1dKSA9PiB7XG4gICAgICByZXR1cm4gW2tleTIsIHNob3J0Y3V0czJdO1xuICAgIH0pXG4gICk7XG4gIGNvbnN0IGtleW1hcERlZiA9ICRjdHgoa2V5LCBgJHtuYW1lfUtleW1hcGApO1xuICBjb25zdCBzaG9ydGN1dHMgPSAkc2hvcnRjdXQoKGN0eCkgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBjdHguZ2V0KGtleW1hcERlZi5rZXkpO1xuICAgIGNvbnN0IGtleW1hcFR1cGxlID0gT2JqZWN0LmVudHJpZXModXNlcktleW1hcCkuZmxhdE1hcChcbiAgICAgIChba2V5MiwgeyBjb21tYW5kIH1dKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldEtleXMgPSBba2V5c1trZXkyXV0uZmxhdCgpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0S2V5cy5tYXAoKHRhcmdldEtleSkgPT4gW3RhcmdldEtleSwgY29tbWFuZChjdHgpXSk7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGtleW1hcFR1cGxlKTtcbiAgfSk7XG4gIGNvbnN0IHJlc3VsdCA9IFtrZXltYXBEZWYsIHNob3J0Y3V0c107XG4gIHJlc3VsdC5jdHggPSBrZXltYXBEZWY7XG4gIHJlc3VsdC5zaG9ydGN1dHMgPSBzaG9ydGN1dHM7XG4gIHJlc3VsdC5rZXkgPSBrZXltYXBEZWYua2V5O1xuICByZXN1bHQua2V5bWFwID0gc2hvcnRjdXRzLmtleW1hcDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0ICRub2RlQXR0ciA9IChuYW1lLCB2YWx1ZSA9ICgpID0+ICh7fSkpID0+ICRjdHgodmFsdWUsIGAke25hbWV9QXR0cmApO1xuY29uc3QgJG1hcmtBdHRyID0gKG5hbWUsIHZhbHVlID0gKCkgPT4gKHt9KSkgPT4gJGN0eCh2YWx1ZSwgYCR7bmFtZX1BdHRyYCk7XG5mdW5jdGlvbiAkcmVtYXJrKGlkLCByZW1hcmssIGluaXRpYWxPcHRpb25zKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSAkY3R4KGluaXRpYWxPcHRpb25zID8/IHt9LCBpZCk7XG4gIGNvbnN0IHBsdWdpbiA9IChjdHgpID0+IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBjdHgud2FpdChJbml0UmVhZHkpO1xuICAgIGNvbnN0IHJlID0gcmVtYXJrKGN0eCk7XG4gICAgY29uc3QgcmVtYXJrUGx1Z2luID0ge1xuICAgICAgcGx1Z2luOiByZSxcbiAgICAgIG9wdGlvbnM6IGN0eC5nZXQob3B0aW9ucy5rZXkpXG4gICAgfTtcbiAgICBjdHgudXBkYXRlKHJlbWFya1BsdWdpbnNDdHgsIChycCkgPT4gWy4uLnJwLCByZW1hcmtQbHVnaW5dKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY3R4LnVwZGF0ZShyZW1hcmtQbHVnaW5zQ3R4LCAocnApID0+IHJwLmZpbHRlcigoeCkgPT4geCAhPT0gcmVtYXJrUGx1Z2luKSk7XG4gICAgfTtcbiAgfTtcbiAgY29uc3QgcmVzdWx0ID0gW29wdGlvbnMsIHBsdWdpbl07XG4gIHJlc3VsdC5pZCA9IGlkO1xuICByZXN1bHQucGx1Z2luID0gcGx1Z2luO1xuICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjYWxsQ29tbWFuZChzbGljZSwgcGF5bG9hZCkge1xuICByZXR1cm4gKGN0eCkgPT4ge1xuICAgIHJldHVybiBjdHguZ2V0KGNvbW1hbmRzQ3R4KS5jYWxsKHNsaWNlLCBwYXlsb2FkKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICByZXR1cm4gKGN0eCkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjdHguZ2V0KGVkaXRvclZpZXdDdHgpO1xuICAgIGNvbnN0IHsgdHIgfSA9IHZpZXcuc3RhdGU7XG4gICAgY29uc3QgbmV4dFRyID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHRyKSwgdHIpLnNldFRpbWUoRGF0ZS5ub3coKSk7XG4gICAgcmV0dXJuIHZpZXcuZGlzcGF0Y2gobmV4dFRyKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEhUTUwoKSB7XG4gIHJldHVybiAoY3R4KSA9PiB7XG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCBzY2hlbWEgPSBjdHguZ2V0KHNjaGVtYUN0eCk7XG4gICAgY29uc3QgdmlldyA9IGN0eC5nZXQoZWRpdG9yVmlld0N0eCk7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBET01TZXJpYWxpemVyLmZyb21TY2hlbWEoc2NoZW1hKS5zZXJpYWxpemVGcmFnbWVudChcbiAgICAgIHZpZXcuc3RhdGUuZG9jLmNvbnRlbnRcbiAgICApO1xuICAgIGRpdi5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG4gICAgcmV0dXJuIGRpdi5pbm5lckhUTUw7XG4gIH07XG59XG5mdW5jdGlvbiBnZXRNYXJrZG93bigpIHtcbiAgcmV0dXJuIChjdHgpID0+IHtcbiAgICBjb25zdCB2aWV3ID0gY3R4LmdldChlZGl0b3JWaWV3Q3R4KTtcbiAgICBjb25zdCBzZXJpYWxpemVyID0gY3R4LmdldChzZXJpYWxpemVyQ3R4KTtcbiAgICByZXR1cm4gc2VyaWFsaXplcih2aWV3LnN0YXRlLmRvYyk7XG4gIH07XG59XG5mdW5jdGlvbiBpbnNlcnQobWFya2Rvd24pIHtcbiAgcmV0dXJuIChjdHgpID0+IHtcbiAgICBjb25zdCB2aWV3ID0gY3R4LmdldChlZGl0b3JWaWV3Q3R4KTtcbiAgICBjb25zdCBwYXJzZXIgPSBjdHguZ2V0KHBhcnNlckN0eCk7XG4gICAgY29uc3QgZG9jID0gcGFyc2VyKG1hcmtkb3duKTtcbiAgICBpZiAoIWRvYykgcmV0dXJuO1xuICAgIGNvbnN0IGNvbnRlbnRTbGljZSA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLmNvbnRlbnQoKTtcbiAgICByZXR1cm4gdmlldy5kaXNwYXRjaChcbiAgICAgIHZpZXcuc3RhdGUudHIucmVwbGFjZVNlbGVjdGlvbihcbiAgICAgICAgbmV3IFNsaWNlKGRvYy5jb250ZW50LCBjb250ZW50U2xpY2Uub3BlblN0YXJ0LCBjb250ZW50U2xpY2Uub3BlbkVuZClcbiAgICAgICkuc2Nyb2xsSW50b1ZpZXcoKVxuICAgICk7XG4gIH07XG59XG5mdW5jdGlvbiBvdXRsaW5lKCkge1xuICByZXR1cm4gKGN0eCkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjdHguZ2V0KGVkaXRvclZpZXdDdHgpO1xuICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICBjb25zdCBkb2MgPSB2aWV3LnN0YXRlLmRvYztcbiAgICBkb2MuZGVzY2VuZGFudHMoKG5vZGUpID0+IHtcbiAgICAgIGlmIChub2RlLnR5cGUubmFtZSA9PT0gXCJoZWFkaW5nXCIgJiYgbm9kZS5hdHRycy5sZXZlbClcbiAgICAgICAgZGF0YS5wdXNoKHtcbiAgICAgICAgICB0ZXh0OiBub2RlLnRleHRDb250ZW50LFxuICAgICAgICAgIGxldmVsOiBub2RlLmF0dHJzLmxldmVsLFxuICAgICAgICAgIGlkOiBub2RlLmF0dHJzLmlkXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xufVxuZnVuY3Rpb24gcmVwbGFjZUFsbChtYXJrZG93biwgZmx1c2ggPSBmYWxzZSkge1xuICByZXR1cm4gKGN0eCkgPT4ge1xuICAgIGNvbnN0IHZpZXcgPSBjdHguZ2V0KGVkaXRvclZpZXdDdHgpO1xuICAgIGNvbnN0IHBhcnNlciA9IGN0eC5nZXQocGFyc2VyQ3R4KTtcbiAgICBjb25zdCBkb2MgPSBwYXJzZXIobWFya2Rvd24pO1xuICAgIGlmICghZG9jKSByZXR1cm47XG4gICAgaWYgKCFmbHVzaCkge1xuICAgICAgY29uc3QgeyBzdGF0ZTogc3RhdGUyIH0gPSB2aWV3O1xuICAgICAgcmV0dXJuIHZpZXcuZGlzcGF0Y2goXG4gICAgICAgIHN0YXRlMi50ci5yZXBsYWNlKFxuICAgICAgICAgIDAsXG4gICAgICAgICAgc3RhdGUyLmRvYy5jb250ZW50LnNpemUsXG4gICAgICAgICAgbmV3IFNsaWNlKGRvYy5jb250ZW50LCAwLCAwKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBzY2hlbWEgPSBjdHguZ2V0KHNjaGVtYUN0eCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGN0eC5nZXQoZWRpdG9yU3RhdGVPcHRpb25zQ3R4KTtcbiAgICBjb25zdCBwbHVnaW5zID0gY3R4LmdldChwcm9zZVBsdWdpbnNDdHgpO1xuICAgIGNvbnN0IHN0YXRlID0gRWRpdG9yU3RhdGUuY3JlYXRlKHtcbiAgICAgIHNjaGVtYSxcbiAgICAgIGRvYyxcbiAgICAgIHBsdWdpbnMsXG4gICAgICAuLi5vcHRpb25zXG4gICAgfSk7XG4gICAgdmlldy51cGRhdGVTdGF0ZShzdGF0ZSk7XG4gIH07XG59XG5mdW5jdGlvbiBzZXRBdHRyKHBvcywgdXBkYXRlKSB7XG4gIHJldHVybiAoY3R4KSA9PiB7XG4gICAgY29uc3QgdmlldyA9IGN0eC5nZXQoZWRpdG9yVmlld0N0eCk7XG4gICAgY29uc3QgeyB0ciB9ID0gdmlldy5zdGF0ZTtcbiAgICBjb25zdCBub2RlID0gdHIuZG9jLm5vZGVBdChwb3MpO1xuICAgIGlmICghbm9kZSkgcmV0dXJuO1xuICAgIGNvbnN0IG5leHRBdHRyID0gdXBkYXRlKG5vZGUuYXR0cnMpO1xuICAgIHJldHVybiB2aWV3LmRpc3BhdGNoKHRyLnNldE5vZGVNYXJrdXAocG9zLCB2b2lkIDAsIG5leHRBdHRyKSk7XG4gIH07XG59XG5jb25zdCBwaXBlID0gKC4uLmZ1bmNzKSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IGZ1bmNzLmxlbmd0aDtcbiAgbGV0IGluZGV4ID0gbGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGlmICh0eXBlb2YgZnVuY3NbaW5kZXhdICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBmdW5jdGlvblwiKTtcbiAgfVxuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICBsZXQgaW5kZXgyID0gMDtcbiAgICBsZXQgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXgyXSguLi5hcmdzKSA6IGFyZ3NbMF07XG4gICAgd2hpbGUgKCsraW5kZXgyIDwgbGVuZ3RoKSByZXN1bHQgPSBmdW5jc1tpbmRleDJdKHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG5leHBvcnQge1xuICAkY29tbWFuZCxcbiAgJGNvbW1hbmRBc3luYyxcbiAgJGN0eCxcbiAgJGlucHV0UnVsZSxcbiAgJGlucHV0UnVsZUFzeW5jLFxuICAkbWFyayxcbiAgJG1hcmtBc3luYyxcbiAgJG1hcmtBdHRyLFxuICAkbWFya1NjaGVtYSxcbiAgJG5vZGUsXG4gICRub2RlQXN5bmMsXG4gICRub2RlQXR0cixcbiAgJG5vZGVTY2hlbWEsXG4gICRwcm9zZSxcbiAgJHByb3NlQXN5bmMsXG4gICRyZW1hcmssXG4gICRzaG9ydGN1dCxcbiAgJHNob3J0Y3V0QXN5bmMsXG4gICR1c2VLZXltYXAsXG4gICR2aWV3LFxuICAkdmlld0FzeW5jLFxuICBhZGRUaW1lcixcbiAgY2FsbENvbW1hbmQsXG4gIGZvcmNlVXBkYXRlLFxuICBnZXRIVE1MLFxuICBnZXRNYXJrZG93bixcbiAgaW5zZXJ0LFxuICBuYW5vaWQsXG4gIG91dGxpbmUsXG4gIHBpcGUsXG4gIHJlcGxhY2VBbGwsXG4gIHNldEF0dHJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/utils/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/utils/node_modules/nanoid/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@milkdown/utils/node_modules/nanoid/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),\n/* harmony export */   customRandom: () => (/* binding */ customRandom),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   urlAlphabet: () => (/* reexport safe */ _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__.urlAlphabet)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./url-alphabet/index.js */ \"(ssr)/./node_modules/@milkdown/utils/node_modules/nanoid/url-alphabet/index.js\");\n\n\n\nconst POOL_SIZE_MULTIPLIER = 128\nlet pool, poolOffset\nfunction fillPool(bytes) {\n  if (!pool || pool.length < bytes) {\n    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER)\n    node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto.getRandomValues(pool)\n    poolOffset = 0\n  } else if (poolOffset + bytes > pool.length) {\n    node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto.getRandomValues(pool)\n    poolOffset = 0\n  }\n  poolOffset += bytes\n}\nfunction random(bytes) {\n  fillPool((bytes |= 0))\n  return pool.subarray(poolOffset - bytes, poolOffset)\n}\nfunction customRandom(alphabet, defaultSize, getRandom) {\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let i = step\n      while (i--) {\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length >= size) return id\n      }\n    }\n  }\n}\nfunction customAlphabet(alphabet, size = 21) {\n  return customRandom(alphabet, size, random)\n}\nfunction nanoid(size = 21) {\n  fillPool((size |= 0))\n  let id = ''\n  for (let i = poolOffset - size; i < poolOffset; i++) {\n    id += _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__.urlAlphabet[pool[i] & 63]\n  }\n  return id\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pbGtkb3duL3V0aWxzL25vZGVfbW9kdWxlcy9uYW5vaWQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFpRDtBQUN5QjtBQUNyQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxrREFBTTtBQUNWO0FBQ0EsSUFBSTtBQUNKLElBQUksa0RBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esa0NBQWtDLGdCQUFnQjtBQUNsRCxVQUFVLCtEQUFpQjtBQUMzQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWluMi9Eb2N1bWVudHMvbm90ZUNhcmQvbm9kZV9tb2R1bGVzL0BtaWxrZG93bi91dGlscy9ub2RlX21vZHVsZXMvbmFub2lkL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdlYmNyeXB0byBhcyBjcnlwdG8gfSBmcm9tICdub2RlOmNyeXB0bydcbmltcG9ydCB7IHVybEFscGhhYmV0IGFzIHNjb3BlZFVybEFscGhhYmV0IH0gZnJvbSAnLi91cmwtYWxwaGFiZXQvaW5kZXguanMnXG5leHBvcnQgeyB1cmxBbHBoYWJldCB9IGZyb20gJy4vdXJsLWFscGhhYmV0L2luZGV4LmpzJ1xuY29uc3QgUE9PTF9TSVpFX01VTFRJUExJRVIgPSAxMjhcbmxldCBwb29sLCBwb29sT2Zmc2V0XG5mdW5jdGlvbiBmaWxsUG9vbChieXRlcykge1xuICBpZiAoIXBvb2wgfHwgcG9vbC5sZW5ndGggPCBieXRlcykge1xuICAgIHBvb2wgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYnl0ZXMgKiBQT09MX1NJWkVfTVVMVElQTElFUilcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHBvb2wpXG4gICAgcG9vbE9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChwb29sT2Zmc2V0ICsgYnl0ZXMgPiBwb29sLmxlbmd0aCkge1xuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocG9vbClcbiAgICBwb29sT2Zmc2V0ID0gMFxuICB9XG4gIHBvb2xPZmZzZXQgKz0gYnl0ZXNcbn1cbmV4cG9ydCBmdW5jdGlvbiByYW5kb20oYnl0ZXMpIHtcbiAgZmlsbFBvb2woKGJ5dGVzIHw9IDApKVxuICByZXR1cm4gcG9vbC5zdWJhcnJheShwb29sT2Zmc2V0IC0gYnl0ZXMsIHBvb2xPZmZzZXQpXG59XG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBkZWZhdWx0U2l6ZSwgZ2V0UmFuZG9tKSB7XG4gIGxldCBtYXNrID0gKDIgPDwgKDMxIC0gTWF0aC5jbHozMigoYWxwaGFiZXQubGVuZ3RoIC0gMSkgfCAxKSkpIC0gMVxuICBsZXQgc3RlcCA9IE1hdGguY2VpbCgoMS42ICogbWFzayAqIGRlZmF1bHRTaXplKSAvIGFscGhhYmV0Lmxlbmd0aClcbiAgcmV0dXJuIChzaXplID0gZGVmYXVsdFNpemUpID0+IHtcbiAgICBsZXQgaWQgPSAnJ1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgYnl0ZXMgPSBnZXRSYW5kb20oc3RlcClcbiAgICAgIGxldCBpID0gc3RlcFxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZCArPSBhbHBoYWJldFtieXRlc1tpXSAmIG1hc2tdIHx8ICcnXG4gICAgICAgIGlmIChpZC5sZW5ndGggPj0gc2l6ZSkgcmV0dXJuIGlkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tQWxwaGFiZXQoYWxwaGFiZXQsIHNpemUgPSAyMSkge1xuICByZXR1cm4gY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBzaXplLCByYW5kb20pXG59XG5leHBvcnQgZnVuY3Rpb24gbmFub2lkKHNpemUgPSAyMSkge1xuICBmaWxsUG9vbCgoc2l6ZSB8PSAwKSlcbiAgbGV0IGlkID0gJydcbiAgZm9yIChsZXQgaSA9IHBvb2xPZmZzZXQgLSBzaXplOyBpIDwgcG9vbE9mZnNldDsgaSsrKSB7XG4gICAgaWQgKz0gc2NvcGVkVXJsQWxwaGFiZXRbcG9vbFtpXSAmIDYzXVxuICB9XG4gIHJldHVybiBpZFxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/utils/node_modules/nanoid/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@milkdown/utils/node_modules/nanoid/url-alphabet/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@milkdown/utils/node_modules/nanoid/url-alphabet/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   urlAlphabet: () => (/* binding */ urlAlphabet)\n/* harmony export */ });\nconst urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1pbGtkb3duL3V0aWxzL25vZGVfbW9kdWxlcy9uYW5vaWQvdXJsLWFscGhhYmV0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQIiwic291cmNlcyI6WyIvVXNlcnMvcmFpbjIvRG9jdW1lbnRzL25vdGVDYXJkL25vZGVfbW9kdWxlcy9AbWlsa2Rvd24vdXRpbHMvbm9kZV9tb2R1bGVzL25hbm9pZC91cmwtYWxwaGFiZXQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHVybEFscGhhYmV0ID1cbiAgJ3VzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3QnXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@milkdown/utils/node_modules/nanoid/url-alphabet/index.js\n");

/***/ })

};
;